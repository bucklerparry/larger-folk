using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.ExceptionServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using ConsoleLib.Console;
using Genkit;
using HistoryKit;
using MonoMod.Utils;
using Qud.API;
using UnityEngine;
using XRL.Collections;
using XRL.Core;
using XRL.Language;
using XRL.Liquids;
using XRL.Messages;
using XRL.Names;
using XRL.Rules;
using XRL.UI;
using XRL.World.AI;
using XRL.World.AI.GoalHandlers;
using XRL.World.AI.Pathfinding;
using XRL.World.Anatomy;
using XRL.World.Capabilities;
using XRL.World.Effects;
using XRL.World.Parts;
using XRL.World.Parts.Mutation;
using XRL.World.Parts.Skill;
using XRL.World.Skills;
using XRL.World.Tinkering;

namespace XRL.World;

public class LargerFolk_GameObject : GameObject
{
	public class DisplayNameSort : Comparer<LargerFolk_GameObject>
	{
		public override int Compare(LargerFolk_GameObject a, LargerFolk_GameObject b)
		{
			return ConsoleLib.Console.ColorUtility.CompareExceptFormattingAndCase(a.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: true, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null), b.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: true, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null));
		}
	}

	private struct PullDownChoice
	{
		public string location;

		public int X;

		public int Y;
	}

	public struct ExternalEventBind
	{
		public string Event;

		public LargerFolk_GameObject Object;

		public Type Type;

		public ExternalEventBind(string Event, LargerFolk_GameObject Object, Type Type)
		{
			this.Event = Event;
			this.Object = Object;
			this.Type = Type;
		}
	}

	internal static Dictionary<LargerFolk_GameObject, List<ExternalEventBind>> ExternalLoadBindings = new Dictionary<LargerFolk_GameObject, List<ExternalEventBind>>();

	public static readonly LargerFolk_GameObject Invalid = new LargerFolk_GameObject();

	public static long AutomoveInterruptTurn = -1L;

	public static string AutomoveInterruptBecause = "";

	private static List<IPart> TurnTickParts = new List<IPart>(8);

	private static List<Effect> TargetEffects = new List<Effect>();

	private static List<Effect> SameAsEffectsUsed = new List<Effect>(16);

	private static long lastWaitTurn = 0L;

	private static MissilePath ThrowPath = new MissilePath();

	private static bool ThrowPathInUse;

	private static Dictionary<string, int> TakeObjectsFromTableGeneration = new Dictionary<string, int>();

	private static bool TakeObjectsFromTableGenerationInUse = false;

	private static Event eIsMobile = new ImmutableEvent("IsMobile");

	private static Event eCanHypersensesDetect = new ImmutableEvent("CanHypersensesDetect");

	private static Event eCanChangeBodyPosition = new Event("CanChangeBodyPosition", "To", null, "ShowMessage", 0, "Involuntary", 0);

	private static Event eCanMoveExtremities = new Event("CanMoveExtremities", "ShowMessage", 0, "Involuntary", 0);

	private static Event eHealing = new Event("Healing", "Amount", 0);

	private static Event eCommandTakeObject = new Event("CommandTakeObject").SetParameter("Object", (object)null).SetParameter("Context", null).SetFlag("NoStack", State: false);

	private static Event eCommandTakeObjectSilent = new Event("CommandTakeObject").SetParameter("Object", (object)null).SetParameter("Context", null).SetSilent(Silent: true)
		.SetFlag("NoStack", State: false);

	private static Event eCommandTakeObjectWithEnergyCost = new Event("CommandTakeObject").SetParameter("Object", (object)null).SetParameter("Context", null).SetParameter("EnergyCost", 0)
		.SetFlag("NoStack", State: false);

	private static Event eCommandTakeObjectSilentWithEnergyCost = new Event("CommandTakeObject").SetParameter("Object", (object)null).SetParameter("Context", null).SetParameter("EnergyCost", 0)
		.SetSilent(Silent: true)
		.SetFlag("NoStack", State: false);

	public int _BaseID;

	public int Flags;

	public string Blueprint = "Object";

	public string GenderName;

	public string PronounSetName;

	public XRL.World.Parts.Physics Physics;

	public Render Render;

	public Brain Brain;

	public Body Body;

	public Inventory Inventory;

	public LiquidVolume LiquidVolume;

	public ActivatedAbilities Abilities;

	public Statistic Energy;

	public Stacker Stacker;

	public PartRack PartsList = new PartRack(8);

	public EffectRack _Effects;

	public Dictionary<string, Statistic> Statistics = new Dictionary<string, Statistic>();

	public Dictionary<string, int> _IntProperty;

	public Dictionary<string, string> _Property;

	public Dictionary<string, List<Effect>> RegisteredEffectEvents;

	public Dictionary<string, List<IPart>> RegisteredPartEvents;

	public EventRegistry RegisteredEvents;

	private GameObjectBlueprint _BlueprintCache;

	public Dictionary<LargerFolk_GameObject, LargerFolk_GameObject> DeepCopyInventoryObjectMap;

	private RenderEvent _contextRender;

	public string _CachedDisplayNameForSort;

	private int PartsCascade;

	private int CarriedWeightCache = -1;

	private int MaxCarriedWeightCache = -1;

	private byte TransientCache;

	private bool Dying;

	private const int TRANSIENT_CACHE_TURN_TICK_1_YES = 1;

	private const int TRANSIENT_CACHE_TURN_TICK_1_NO = 2;

	private const int TRANSIENT_CACHE_TURN_TICK_10_YES = 4;

	private const int TRANSIENT_CACHE_TURN_TICK_10_NO = 8;

	private const int TRANSIENT_CACHE_TURN_TICK_100_YES = 16;

	private const int TRANSIENT_CACHE_TURN_TICK_100_NO = 32;

	private const int TRANSIENT_CACHE_WORSHIP_PROCESSED = 64;

	public const int FLAG_PRONOUNS_KNOWN = 1;

	public const int FLAG_COMBAT = 2;

	public const int FLAG_GRAVEYARD = 4;

	public const int FLAG_TEMPORARY = 8;

	public const int FLAG_POOLED = 16;

	public const int FLAG_SERIALIZED = 32;

	public bool IsReal => Physics?.IsReal ?? false;

	public bool IsOrganic
	{
		get
		{
			return Physics?.Organic ?? false;
		}
		set
		{
			if (Physics != null)
			{
				Physics.Organic = value;
			}
		}
	}

	public int Temperature => Physics?.Temperature ?? 0;

	public bool Takeable => Physics?.Takeable ?? false;

	public bool IsScenery => (Render?.RenderLayer ?? 0) <= 0;

	public bool Slimewalking
	{
		get
		{
			if (!IntProperty.TryGetValue("Slimewalking", out var value) || value == 0)
			{
				return HasTag("Slimewalking");
			}
			return value > 0;
		}
		set
		{
			SetIntProperty("Slimewalking", value ? 1 : (-1));
		}
	}

	public bool Polypwalking
	{
		get
		{
			if (!IntProperty.TryGetValue("Polypwalking", out var value) || value == 0)
			{
				return HasTag("Polypwalking");
			}
			return value > 0;
		}
		set
		{
			SetIntProperty("Polypwalking", value ? 1 : (-1));
		}
	}

	public bool Strutwalking
	{
		get
		{
			if (!IntProperty.TryGetValue("Strutwalking", out var value) || value == 0)
			{
				return HasTag("Strutwalking");
			}
			return value > 0;
		}
		set
		{
			SetIntProperty("Strutwalking", value ? 1 : (-1));
		}
	}

	public bool Reefer
	{
		get
		{
			if (!IntProperty.TryGetValue("Reefer", out var value) || value == 0)
			{
				return HasTag("Reefer");
			}
			return value > 0;
		}
		set
		{
			SetIntProperty("Reefer", value ? 1 : (-1));
		}
	}

	public bool IsCurrency
	{
		get
		{
			if (IntProperty.TryGetValue("Currency", out var value))
			{
				return value > 0;
			}
			return false;
		}
		set
		{
			ModIntProperty("Currency", value ? 1 : (-1), RemoveIfZero: true);
		}
	}

	public GenotypeEntry genotypeEntry
	{
		get
		{
			string genotype = GetGenotype();
			if (genotype != null && GenotypeFactory.GenotypesByName.TryGetValue(genotype, out var value))
			{
				return value;
			}
			return null;
		}
	}

	public SubtypeEntry subtypeEntry
	{
		get
		{
			string stringProperty;
			if ((stringProperty = GetStringProperty("Subtype")) != null && SubtypeFactory.SubtypesByName.TryGetValue(stringProperty, out var value))
			{
				return value;
			}
			return null;
		}
	}

	public LargerFolk_GameObject ThePlayer => XRL.The.Player;

	[Obsolete("use ID, will be removed after Q1 2024")]
	public string id
	{
		get
		{
			return ID;
		}
		set
		{
			ID = value;
		}
	}

	public int BaseID
	{
		get
		{
			if (_BaseID == 0)
			{
				XRLGame game = XRL.The.Game;
				if (game == null)
				{
					_BaseID = int.MinValue;
				}
				else
				{
					_BaseID = ++game.GameObjectIDSequence;
				}
			}
			return _BaseID;
		}
		set
		{
			_BaseID = value;
		}
	}

	public string IDIfAssigned
	{
		get
		{
			return GetStringProperty("id");
		}
		set
		{
			SetStringProperty("id", value);
		}
	}

	public string ID
	{
		get
		{
			string text = GetStringProperty("id");
			if (text == null)
			{
				text = BaseID.ToString();
				SetStringProperty("id", text);
			}
			return text;
		}
		set
		{
			SetStringProperty("id", value);
		}
	}

	[Obsolete("use HasID, will be removed after Q1 2024")]
	public bool hasid => HasID;

	public bool HasID => _BaseID > 0;

	public string GeneID
	{
		get
		{
			string text = GetStringProperty("GeneID");
			if (text == null)
			{
				if (XRL.The.Game != null)
				{
					int intGameState = XRL.The.Game.GetIntGameState("NextGeneID");
					XRL.The.Game.SetIntGameState("NextGeneID", intGameState + 1);
					text = intGameState.ToString();
					SetStringProperty("GeneID", text);
				}
				else
				{
					text = "[pre-game]";
					SetStringProperty("GeneID", text);
				}
			}
			return text;
		}
	}

	public bool HasGeneID => HasStringProperty("GeneID");

	public LargerFolk_GameObject Target
	{
		get
		{
			if (IsPlayer())
			{
				return Sidebar.CurrentTarget;
			}
			if (Brain == null)
			{
				return null;
			}
			return Brain.Target;
		}
		set
		{
			if (IsPlayer())
			{
				Sidebar.CurrentTarget = value;
			}
			else if (Brain != null)
			{
				Brain.Target = value;
			}
		}
	}

	public LargerFolk_GameObject Equipped => Physics?.Equipped;

	public LargerFolk_GameObject InInventory => Physics?.InInventory;

	public LargerFolk_GameObject Implantee => GetPart<CyberneticsBaseItem>()?.ImplantedOn;

	public LargerFolk_GameObject Holder => Equipped ?? InInventory ?? Implantee;

	public Cell CurrentCell
	{
		get
		{
			return Physics?.CurrentCell;
		}
		set
		{
			if (Physics != null)
			{
				Physics.CurrentCell = value;
			}
		}
	}

	public Zone CurrentZone => CurrentCell?.ParentZone;

	public LargerFolk_GameObject PartyLeader
	{
		get
		{
			return Brain?.PartyLeader;
		}
		set
		{
			if (Brain != null)
			{
				Brain.PartyLeader = value;
			}
		}
	}

	public Armor Armor => GetPart<Armor>();

	[Obsolete("Use Render - Will not be removed before Q1 2025")]
	public Render pRender => Render;

	[Obsolete("Use Render - Will not be removed before Q1 2025")]
	public Render _pRender => Render;

	[Obsolete("Use Physics - Will not be removed before Q1 2025")]
	public XRL.World.Parts.Physics pPhysics => Physics;

	[Obsolete("Use Physics - Will not be removed before Q1 2025")]
	public XRL.World.Parts.Physics _pPhysics => Physics;

	[Obsolete("Use Brain instead - Will not be removed before Q1 2025")]
	public Brain pBrain => Brain;

	[Obsolete("Use Brain instead - Will not be removed before Q1 2025")]
	public Brain _pBrain => Brain;

	public Dictionary<string, int> IntProperty
	{
		get
		{
			if (_IntProperty == null)
			{
				_IntProperty = new Dictionary<string, int>();
			}
			return _IntProperty;
		}
		set
		{
			_IntProperty = value;
		}
	}

	public Dictionary<string, string> Property
	{
		get
		{
			if (_Property == null)
			{
				_Property = new Dictionary<string, string>();
			}
			return _Property;
		}
		set
		{
			_Property = value;
		}
	}

	public int Speed
	{
		get
		{
			if (Statistics.TryGetValue("Speed", out var value))
			{
				return value.Value;
			}
			return 0;
		}
	}

	public Rack<Effect> Effects => _Effects ?? (_Effects = new EffectRack());

	public double ValueEach
	{
		get
		{
			double num = GetPart<Commerce>()?.Value ?? 0.01;
			if (WantEvent(GetIntrinsicValueEvent.ID, MinEvent.CascadeLevel))
			{
				GetIntrinsicValueEvent getIntrinsicValueEvent = GetIntrinsicValueEvent.FromPool(this, num);
				HandleEvent(getIntrinsicValueEvent);
				num = getIntrinsicValueEvent.Value;
			}
			if (WantEvent(AdjustValueEvent.ID, MinEvent.CascadeLevel))
			{
				AdjustValueEvent adjustValueEvent = AdjustValueEvent.FromPool(this, num);
				HandleEvent(adjustValueEvent);
				num = adjustValueEvent.Value;
			}
			if (WantEvent(GetExtrinsicValueEvent.ID, MinEvent.CascadeLevel))
			{
				GetExtrinsicValueEvent getExtrinsicValueEvent = GetExtrinsicValueEvent.FromPool(this, num);
				HandleEvent(getExtrinsicValueEvent);
				num = getExtrinsicValueEvent.Value;
			}
			return num;
		}
	}

	public double Value => ValueEach * (double)Count;

	public int Weight => Physics?.Weight ?? 0;

	public int WeightEach => Physics?.WeightEach ?? 0;

	public int IntrinsicWeight => Physics?.IntrinsicWeight ?? 0;

	public int BaseElectricalConductivity
	{
		get
		{
			return Physics?.BaseElectricalConductivity ?? 0;
		}
		set
		{
			if (Physics != null)
			{
				Physics.BaseElectricalConductivity = value;
			}
		}
	}

	public int ElectricalConductivity => GetElectricalConductivity();

	public int Count
	{
		get
		{
			if (Stacker != null)
			{
				return Stacker.Number;
			}
			return 1;
		}
		set
		{
			if (Stacker != null)
			{
				Stacker.StackCount = value;
			}
		}
	}

	public int Level => GetStat("Level")?.Value ?? 1;

	public string Owner => Physics?.Owner;

	public string UsesSlots
	{
		get
		{
			return Physics?.UsesSlots;
		}
		set
		{
			if (Physics != null)
			{
				Physics.UsesSlots = value;
			}
		}
	}

	public string DebugName
	{
		get
		{
			if (IsPlayer())
			{
				return "Player:" + Blueprint + " (" + (Render?.DisplayName ?? "EMPTY") + ")";
			}
			if (HasID)
			{
				return ID + ":" + Blueprint + " (" + (Render?.DisplayName ?? "EMPTY") + ")";
			}
			return Blueprint + " (" + (Render?.DisplayName ?? "EMPTY") + ")";
		}
	}

	private string DisplayNameBase => Render?.DisplayName ?? Blueprint;

	public string DisplayName
	{
		get
		{
			return GetDisplayNameEvent.GetFor(this, DisplayNameBase);
		}
		set
		{
			if (Render != null)
			{
				Render.DisplayName = value;
			}
		}
	}

	public string DisplayNameStripped => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string DisplayNameOnly => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string DisplayNameOnlyStripped => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string DisplayNameOnlyDirect
	{
		get
		{
			if (Render == null)
			{
				return "<unknown>";
			}
			return Render.DisplayName;
		}
	}

	public string DisplayNameOnlyDirectAndStripped => DisplayNameOnlyDirect.Strip();

	public string DisplayNameOnlyUnconfused => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: true, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string DisplayNameSingle => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string DisplayNameOnlySingle => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string ShortDisplayName => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string ShortDisplayNameSingle => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string ShortDisplayNameStripped => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string ShortDisplayNameSingleStripped => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string ShortDisplayNameWithoutTitles => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: true, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string ShortDisplayNameWithoutTitlesStripped => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: true, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string BaseDisplayName => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: true, NoColor: true, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: true, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string BaseKnownDisplayName => GetDisplayName(int.MaxValue, null, null, AsIfKnown: true, Single: false, NoConfusion: true, NoColor: true, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: true, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string BaseDisplayNameStripped => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: true, NoColor: true, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: false, BaseOnly: true, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string DisplayNameColor => GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: true, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null);

	public string Its
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedPossessiveAdjective;
			}
			return "Your";
		}
	}

	public string its
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().PossessiveAdjective;
			}
			return "your";
		}
	}

	public string It
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedSubjective;
			}
			return "You";
		}
	}

	public string it
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().Subjective;
			}
			return "you";
		}
	}

	public string Itself
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedReflexive;
			}
			if (!IsPlural)
			{
				return "Yourself";
			}
			return "Yourselves";
		}
	}

	public string itself
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().Reflexive;
			}
			if (!IsPlural)
			{
				return "yourself";
			}
			return "yourselves";
		}
	}

	public string Them
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedObjective;
			}
			return "You";
		}
	}

	public string them
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().Objective;
			}
			return "you";
		}
	}

	public string theirs
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().SubstantivePossessive;
			}
			return "yours";
		}
	}

	public string Theirs
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedSubstantivePossessive;
			}
			return "Yours";
		}
	}

	public string indicativeProximal
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().IndicativeProximal;
			}
			return "you";
		}
	}

	public string IndicativeProximal
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedIndicativeProximal;
			}
			return "you";
		}
	}

	public string indicativeDistal
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().IndicativeDistal;
			}
			return "you";
		}
	}

	public string IndicativeDistal
	{
		get
		{
			if (!IsPlayer() || !Grammar.AllowSecondPerson)
			{
				return GetPronounProvider().CapitalizedIndicativeDistal;
			}
			return "You";
		}
	}

	public bool UseBareIndicative => GetPronounProvider().UseBareIndicative;

	public string YouAre
	{
		get
		{
			if (IsPlayer() && Grammar.AllowSecondPerson)
			{
				return "You are";
			}
			IPronounProvider pronounProvider = GetPronounProvider();
			if (!pronounProvider.Plural && !pronounProvider.PseudoPlural)
			{
				return pronounProvider.CapitalizedSubjective + " is";
			}
			return pronounProvider.CapitalizedSubjective + " are";
		}
	}

	public string Itis
	{
		get
		{
			if (IsPlayer() && Grammar.AllowSecondPerson)
			{
				return "You're";
			}
			IPronounProvider pronounProvider = GetPronounProvider();
			if (!pronounProvider.Plural && !pronounProvider.PseudoPlural)
			{
				return pronounProvider.CapitalizedSubjective + "'s";
			}
			return pronounProvider.CapitalizedSubjective + "'re";
		}
	}

	public string itis
	{
		get
		{
			if (IsPlayer() && Grammar.AllowSecondPerson)
			{
				return "you're";
			}
			IPronounProvider pronounProvider = GetPronounProvider();
			if (!pronounProvider.Plural && !pronounProvider.PseudoPlural)
			{
				return pronounProvider.Subjective + "'s";
			}
			return pronounProvider.Subjective + "'re";
		}
	}

	public string Ithas
	{
		get
		{
			if (IsPlayer() && Grammar.AllowSecondPerson)
			{
				return "You've";
			}
			IPronounProvider pronounProvider = GetPronounProvider();
			if (!pronounProvider.Plural && !pronounProvider.PseudoPlural)
			{
				return pronounProvider.CapitalizedSubjective + "'s";
			}
			return pronounProvider.CapitalizedSubjective + "'ve";
		}
	}

	public string ithas
	{
		get
		{
			if (IsPlayer() && Grammar.AllowSecondPerson)
			{
				return "you've";
			}
			IPronounProvider pronounProvider = GetPronounProvider();
			if (!pronounProvider.Plural && !pronounProvider.PseudoPlural)
			{
				return pronounProvider.Subjective + "'s";
			}
			return pronounProvider.Subjective + "'ve";
		}
	}

	public string personTerm => GetPronounProvider().PersonTerm;

	public string PersonTerm => GetPronounProvider().CapitalizedPersonTerm;

	public string immaturePersonTerm => GetPronounProvider().ImmaturePersonTerm;

	public string ImmaturePersonTerm => GetPronounProvider().CapitalizedImmaturePersonTerm;

	public string formalAddressTerm => GetPronounProvider().FormalAddressTerm;

	public string FormalAddressTerm => GetPronounProvider().CapitalizedFormalAddressTerm;

	public string offspringTerm => GetPronounProvider().OffspringTerm;

	public string OffspringTerm => GetPronounProvider().CapitalizedOffspringTerm;

	public string siblingTerm => GetPronounProvider().SiblingTerm;

	public string SiblingTerm => GetPronounProvider().CapitalizedSiblingTerm;

	public string parentTerm => GetPronounProvider().ParentTerm;

	public string ParentTerm => GetPronounProvider().CapitalizedParentTerm;

	public string A
	{
		get
		{
			GetAdjunctNoun(out var Noun, out var Post);
			if (!Noun.IsNullOrEmpty() && !Post)
			{
				return IndefiniteArticle(Capital: true, Noun, AsIfKnown: false, UsingAdjunctNoun: true) + Noun + " of ";
			}
			return IndefiniteArticle(Capital: true);
		}
	}

	public string a
	{
		get
		{
			GetAdjunctNoun(out var Noun, out var Post);
			if (!Noun.IsNullOrEmpty() && !Post)
			{
				return IndefiniteArticle(Capital: false, Noun, AsIfKnown: false, UsingAdjunctNoun: true) + Noun + " of ";
			}
			return IndefiniteArticle();
		}
	}

	public string The => DefiniteArticle(Capital: true);

	public string the => DefiniteArticle();

	public string Is => GetVerb("are");

	public string Has => GetVerb("have");

	public bool HasProperName
	{
		get
		{
			Examiner part = GetPart<Examiner>();
			if (part != null)
			{
				LargerFolk_GameObject activeSample = part.GetActiveSample();
				if (activeSample != null)
				{
					return activeSample.HasProperName;
				}
			}
			int intProperty = GetIntProperty("ProperNoun");
			if (intProperty > 0)
			{
				return true;
			}
			if (intProperty < 0)
			{
				return false;
			}
			return GetBlueprint(UseDefault: false)?.HasProperName() ?? false;
		}
		set
		{
			if (value)
			{
				SetIntProperty("ProperNoun", 1);
			}
			else
			{
				SetIntProperty("ProperNoun", -1);
			}
		}
	}

	public bool IsPlural => GetPronounProvider().Plural;

	public bool IsPseudoPlural => GetPronounProvider().PseudoPlural;

	public bool IsPluralIfKnown => GetPronounProvider(AsIfKnown: true).Plural;

	public bool IsPseudoPluralIfKnown => GetPronounProvider(AsIfKnown: true).PseudoPlural;

	public int baseHitpoints
	{
		get
		{
			if (Statistics != null && Statistics.TryGetValue("Hitpoints", out var value))
			{
				return value.BaseValue;
			}
			return 0;
		}
	}

	public int hitpoints
	{
		get
		{
			if (Statistics != null && Statistics.TryGetValue("Hitpoints", out var value))
			{
				return value.Value;
			}
			return 0;
		}
		set
		{
			if (Statistics != null && Statistics.TryGetValue("Hitpoints", out var value2))
			{
				int num = value - value2.Value;
				if (num != 0)
				{
					value2.Penalty -= num;
				}
			}
		}
	}

	public bool IsImplant => HasPart<CyberneticsBaseItem>();

	public bool juiceEnabled => Options.UseOverlayCombatEffects;

	public ActivatedAbilities ActivatedAbilities => Abilities;

	public bool IsDying => Dying;

	public bool UsesTwoSlots
	{
		get
		{
			return Physics?.UsesTwoSlots ?? false;
		}
		set
		{
			if (Physics != null)
			{
				Physics.UsesTwoSlots = value;
			}
		}
	}

	public bool IsCreature => HasPropertyOrTag("Creature");

	public bool IsProjectile => HasPropertyOrTag("Projectile");

	public bool IsTrifling
	{
		get
		{
			return HasIntProperty("trifling");
		}
		set
		{
			if (value)
			{
				SetIntProperty("trifling", 1);
			}
			else
			{
				RemoveIntProperty("trifling");
			}
		}
	}

	public bool IsSubjectToGravity => SubjectToGravityEvent.Check(this);

	public bool CanFall => CanFallEvent.Check(this);

	public bool IsConfused => GetConfusion() > 0;

	public bool Respires => RespiresEvent.Check(this);

	public bool IsHidden
	{
		get
		{
			Hidden part = GetPart<Hidden>();
			if (part == null)
			{
				return false;
			}
			return !part.Found;
		}
	}

	public bool IsAlive
	{
		get
		{
			if (!IsCreature && !HasTagOrProperty("LivePlant") && !HasTagOrProperty("LiveFungus") && !HasTagOrProperty("LiveAnimal"))
			{
				return false;
			}
			if (!IsOrganic)
			{
				return false;
			}
			return true;
		}
	}

	public bool IsBridge => HasTagOrProperty("Bridge");

	public bool PathAsBurrower => PathAsBurrowerEvent.Check(this);

	public bool IsFlying
	{
		get
		{
			if (HasEffect(typeof(Flying)))
			{
				return GetIntProperty("SuspendFlight") <= 0;
			}
			return false;
		}
	}

	public bool IsThrownWeapon
	{
		get
		{
			if (HasPart<ThrownWeapon>())
			{
				return true;
			}
			if (HasPart<GeomagneticDisc>())
			{
				return true;
			}
			return false;
		}
	}

	public bool OwnedByPlayer
	{
		get
		{
			if (GetIntProperty("StoredByPlayer") <= 0)
			{
				return GetIntProperty("FromStoredByPlayer") > 0;
			}
			return true;
		}
	}

	public bool IsGiganticCreature
	{
		get
		{
			if (HasTag("Gigantic"))
			{
				return true;
			}
			int intProperty = GetIntProperty("Gigantic");
			if (intProperty > 0)
			{
				return true;
			}
			if (intProperty < 0)
			{
				return false;
			}
			return HasPart<Gigantism>();
		}
		set
		{
			SetIntProperty("Gigantic", value ? 1 : (-1));
		}
	}

	public bool IsGiganticEquipment
	{
		get
		{
			return HasPart<ModGigantic>();
		}
		set
		{
			if (value)
			{
				RequirePart<ModGigantic>();
			}
			else
			{
				RemovePart<ModGigantic>();
			}
		}
	}

	public bool HasHonorific
	{
		get
		{
			if (TryGetPart<Honorifics>(out var Part) && !Part.HonorificList.IsNullOrEmpty())
			{
				return true;
			}
			return false;
		}
	}

	public bool HasEpithet
	{
		get
		{
			if (TryGetPart<Epithets>(out var Part) && !Part.EpithetList.IsNullOrEmpty())
			{
				return true;
			}
			return false;
		}
	}

	public bool IsTemporary => (Flags & 8) != 0;

	public GameObjectReference Reference()
	{
		return new GameObjectReference(this);
	}

	[Obsolete("Use Reference()")]
	public GameObjectReference takeReference()
	{
		return new GameObjectReference(this);
	}

	public LargerFolk_GameObject Split(int n, bool NoRemove = false)
	{
		SplitStack(n, null, NoRemove);
		return this;
	}

	public LargerFolk_GameObject SplitFromStack()
	{
		SplitStack(1);
		return this;
	}

	public LargerFolk_GameObject RemoveOne()
	{
		if (Stacker != null)
		{
			return Stacker.RemoveOne();
		}
		return this;
	}

	public void Release(bool RemoveFromContext = true, bool AllowPool = true)
	{
		if (RemoveFromContext)
		{
			this.RemoveFromContext();
		}
		if (AllowPool)
		{
			Pool();
		}
		else
		{
			Clear();
		}
	}

	public static void Release(ref LargerFolk_GameObject Object, bool RemoveFromContext = true, bool AllowPool = true)
	{
		Object.Release(RemoveFromContext, AllowPool);
		Object = null;
	}

	[Obsolete("use Create(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject create(string Blueprint)
	{
		return Create(Blueprint);
	}

	[Obsolete("use Create(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject create(string Blueprint, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> ProvideInventory = null)
	{
		return Create(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context, ProvideInventory);
	}

	[Obsolete("use Create(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject create(GameObjectBlueprint Blueprint, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> ProvideInventory = null)
	{
		return Create(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context, ProvideInventory);
	}

	public static LargerFolk_GameObject Create(string Blueprint)
	{
		return GameObjectFactory.Factory.CreateObject(Blueprint);
	}

	public static LargerFolk_GameObject Create(string Blueprint, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> ProvideInventory = null)
	{
		return GameObjectFactory.Factory.CreateObject(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context, ProvideInventory);
	}

	public static LargerFolk_GameObject Create(GameObjectBlueprint Blueprint, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> ProvideInventory = null)
	{
		return GameObjectFactory.Factory.CreateObject(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context, ProvideInventory);
	}

	[Obsolete("use CreateSample(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject createSample(string Blueprint)
	{
		return CreateSample(Blueprint);
	}

	public static LargerFolk_GameObject CreateSample(string Blueprint)
	{
		return GameObjectFactory.Factory.CreateSampleObject(Blueprint);
	}

	[Obsolete("use CreateUnmodified(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject createUnmodified(string Blueprint)
	{
		return CreateUnmodified(Blueprint);
	}

	[Obsolete("use CreateUnmodified(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject createUnmodified(string Blueprint, string Context = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null)
	{
		return CreateUnmodified(Blueprint, Context, BeforeObjectCreated, AfterObjectCreated);
	}

	public static LargerFolk_GameObject CreateUnmodified(string Blueprint)
	{
		return GameObjectFactory.Factory.CreateObject(Blueprint, -9999);
	}

	public static LargerFolk_GameObject CreateUnmodified(string Blueprint, string Context = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null)
	{
		return GameObjectFactory.Factory.CreateObject(Blueprint, -9999, 0, null, BeforeObjectCreated, AfterObjectCreated, Context);
	}

	[Obsolete("use Validate(), will be removed after Q1 2024")]
	public static bool validate(ref LargerFolk_GameObject Object)
	{
		return Validate(Object);
	}

	[Obsolete("use Validate(), will be removed after Q1 2024")]
	public static bool validate(LargerFolk_GameObject Object)
	{
		return Validate(Object);
	}

	public static bool Validate(ref LargerFolk_GameObject Object)
	{
		if (Object == null)
		{
			return false;
		}
		if (Object.IsInvalid())
		{
			Object = null;
			return false;
		}
		return true;
	}

	public static bool Validate(LargerFolk_GameObject Object)
	{
		if (Object == null)
		{
			return false;
		}
		if (Object.IsInvalid())
		{
			return false;
		}
		return true;
	}

	public bool InACell()
	{
		return Physics?.CurrentCell?.ParentZone != null;
	}

	public bool OnWorldMap()
	{
		return CurrentCell?.OnWorldMap() ?? false;
	}

	public bool InZone(Zone Zone)
	{
		if (Zone == null)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		return currentCell.ParentZone == Zone;
	}

	public bool InZone(string ZoneID)
	{
		if (ZoneID == null)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		if (currentCell.ParentZone == null)
		{
			return false;
		}
		return currentCell.ParentZone.ZoneID == ZoneID;
	}

	public bool InSameZone(Cell Cell)
	{
		return InZone(Cell?.ParentZone);
	}

	public bool InSameZone(LargerFolk_GameObject Object)
	{
		return InZone(Object?.GetCurrentZone());
	}

	public void MeleeAttackWithWeapon(LargerFolk_GameObject Target, LargerFolk_GameObject Weapon, bool Autohit = false, bool Autopen = false)
	{
		string properties = null;
		if (Autohit)
		{
			properties = ((!Autopen) ? "Autohit" : "Autohit,Autopen");
		}
		else if (Autopen)
		{
			properties = "Autopen";
		}
		Combat.MeleeAttackWithWeapon(this, Target, Weapon, Body.FindDefaultOrEquippedItem(Weapon), properties);
	}

	public bool CellTeleport(Cell C, IEvent FromEvent = null, LargerFolk_GameObject Device = null, LargerFolk_GameObject DeviceOperator = null, IPart Mutation = null, string SuccessMessage = null, int? EnergyCost = 0, bool Forced = false, bool VisualEffects = true, bool ReducedVisualEffects = false, bool SkipRealityDistortion = false, string LeaveVerb = "disappear", string ArriveVerb = "appear", Cell FromCell = null)
	{
		if (FromCell == null)
		{
			FromCell = CurrentCell;
		}
		Zone zone = FromCell?.ParentZone;
		Zone zone2 = C?.ParentZone;
		if (zone2 == null)
		{
			return false;
		}
		bool flag = SkipRealityDistortion;
		if (!flag)
		{
			Event @event = Event.New("InitiateRealityDistortionTransit");
			@event.SetParameter("Object", this);
			@event.SetParameter("Cell", C);
			if (Device != null)
			{
				@event.SetParameter("Device", Device);
			}
			if (DeviceOperator != null)
			{
				@event.SetParameter("Operator", DeviceOperator);
			}
			if (Mutation != null)
			{
				@event.SetParameter("Mutation", Mutation);
			}
			flag = FireEvent(@event, FromEvent) && C.FireEvent(@event, FromEvent);
		}
		if (flag)
		{
			if (!SuccessMessage.IsNullOrEmpty() && IsPlayer())
			{
				Popup.Show(SuccessMessage);
			}
			if (TeleportTo(C, EnergyCost, ignoreCombat: true, ignoreGravity: false, Forced, UsePopups: false, LeaveVerb, ArriveVerb))
			{
				if (VisualEffects && !IsPlayer() && ThePlayer != null && ThePlayer.InZone(zone))
				{
					if (ReducedVisualEffects)
					{
						SmallTeleportSwirl(FromCell, "&C", !Forced);
					}
					else
					{
						TeleportSwirl(FromCell, "&C", !Forced);
					}
				}
				if (VisualEffects && (IsPlayer() || (ThePlayer != null && ThePlayer.InZone(zone2))))
				{
					if (zone != null && (zone2.ResolveZoneWorld() == zone.ResolveZoneWorld() || !IsPlayer()))
					{
						if (ReducedVisualEffects)
						{
							SmallTeleportSwirl();
						}
						else
						{
							TeleportSwirl();
						}
					}
					else
					{
						GameManager.Instance.Spacefolding = true;
						PlayWorldSound("Sounds/StatusEffects/sfx_statusEffect_spacetimeWeirdness", 1f);
					}
				}
			}
		}
		return flag;
	}

	public bool ZoneTeleport(string Zone, int X = -1, int Y = -1, IEvent FromEvent = null, LargerFolk_GameObject Device = null, LargerFolk_GameObject DeviceOperator = null, IPart Mutation = null, string SuccessMessage = "You are transported!", bool VisualEffects = true, Cell FromCell = null)
	{
		if (FromCell == null)
		{
			FromCell = CurrentCell;
		}
		Zone zone = FromCell?.ParentZone;
		Zone zone2 = XRL.The.ZoneManager.GetZone(Zone);
		Cell cell = zone2.GetCell(X, Y);
		if (X == -1 || Y == -1 || cell == null || !IComponent<LargerFolk_GameObject>.CheckRealityDistortionAccessibility(null, cell, DeviceOperator, Device))
		{
			try
			{
				List<Cell> emptyReachableCells = zone2.GetEmptyReachableCells((Cell c) => IComponent<LargerFolk_GameObject>.CheckRealityDistortionAccessibility(null, c, DeviceOperator, Device));
				cell = ((emptyReachableCells.Count <= 0) ? zone2.GetCell(40, 20) : emptyReachableCells.GetRandomElement());
			}
			catch (Exception exception)
			{
				Debug.LogException(exception);
				cell = zone2.GetCell(40, 20);
			}
		}
		Event @event = Event.New("InitiateRealityDistortionTransit");
		@event.SetParameter("Object", this);
		@event.SetParameter("Cell", cell);
		if (Device != null)
		{
			@event.SetParameter("Device", Device);
		}
		if (DeviceOperator != null)
		{
			@event.SetParameter("Operator", DeviceOperator);
		}
		if (Mutation != null)
		{
			@event.SetParameter("Mutation", Mutation);
		}
		bool flag = FireEvent(@event, FromEvent) && cell.FireEvent(@event, FromEvent);
		if (flag)
		{
			if (!SuccessMessage.IsNullOrEmpty() && IsPlayer())
			{
				Popup.Show(SuccessMessage);
			}
			if (TeleportTo(cell, 0))
			{
				if (VisualEffects && !IsPlayer() && ThePlayer != null && ThePlayer.InZone(zone))
				{
					TeleportSwirl(FromCell);
				}
				if (VisualEffects && (IsPlayer() || (ThePlayer != null && ThePlayer.InZone(zone2))))
				{
					if (zone != null && (zone2.ResolveZoneWorld() == zone.ResolveZoneWorld() || !IsPlayer()))
					{
						TeleportSwirl();
					}
					else
					{
						GameManager.Instance.Spacefolding = true;
						PlayWorldSound("Sounds/StatusEffects/sfx_statusEffect_spacetimeWeirdness", 1f);
					}
				}
			}
			else
			{
				flag = false;
			}
		}
		return flag;
	}

	public void StopMoving()
	{
		if (IsPlayer())
		{
			AutoAct.Interrupt();
		}
		if (Brain != null)
		{
			Brain.StopMoving();
		}
	}

	public Cell GetRandomTeleportTargetCell(int MaxDistance = 0)
	{
		Cell CC = CurrentCell;
		if (CC == null)
		{
			return null;
		}
		Zone parentZone = CC.ParentZone;
		if (parentZone == null)
		{
			return null;
		}
		List<Cell> list = (IsPlayer() ? parentZone.GetEmptyReachableCells((Cell c) => IComponent<LargerFolk_GameObject>.CheckRealityDistortionAccessibility(c)) : parentZone.GetEmptyCells((Cell c) => IComponent<LargerFolk_GameObject>.CheckRealityDistortionAccessibility(c)));
		if (MaxDistance > 0)
		{
			list = list.Where((Cell EC) => EC.PathDistanceTo(CC) <= MaxDistance).ToList();
		}
		if (list.Contains(CC))
		{
			list.Remove(CC);
		}
		return list.GetRandomElement();
	}

	public void Flameburst(ScreenBuffer Buffer)
	{
		CurrentCell?.Flameburst(Buffer);
	}

	public bool RandomTeleport(bool Swirl = false, IPart Mutation = null, LargerFolk_GameObject Device = null, LargerFolk_GameObject DeviceOperator = null, IEvent FromEvent = null, int EnergyCost = 0, int MaxDistance = 0, bool InterruptMovement = true, Cell TargetCell = null, bool Forced = false, bool IgnoreCombat = true, bool Voluntary = true, bool UsePopups = false)
	{
		if (OnWorldMap())
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (TargetCell == null)
		{
			TargetCell = GetRandomTeleportTargetCell(MaxDistance);
			if (TargetCell == null)
			{
				return false;
			}
		}
		Event @event = Event.New("InitiateRealityDistortionTransit");
		@event.SetParameter("Object", this);
		@event.SetParameter("Cell", TargetCell);
		if (Mutation != null)
		{
			@event.SetParameter("Mutation", Mutation);
			if (Mutation.ParentObject != null && Mutation.ParentObject != this && !Mutation.ParentObject.FireEvent(@event, FromEvent))
			{
				return false;
			}
		}
		if (Device != null)
		{
			@event.SetParameter("Device", Device);
			if (DeviceOperator != null)
			{
				@event.SetParameter("Operator", DeviceOperator);
			}
			if (Device != this && !Device.FireEvent(@event, FromEvent))
			{
				return false;
			}
			if (DeviceOperator != this && DeviceOperator != Device && !DeviceOperator.FireEvent(@event, FromEvent))
			{
				return false;
			}
		}
		if (!FireEvent(@event, FromEvent) || !TargetCell.FireEvent(@event, FromEvent))
		{
			return false;
		}
		ParticleBlip("&C\u000f", 10, 0L);
		if (Voluntary)
		{
			PlayWorldSound("Sounds/Abilities/sfx_ability_teleport_voluntary_out", 1f);
		}
		else
		{
			PlayWorldSound("Sounds/Abilities/sfx_ability_teleport_involuntary_out", 1f);
		}
		Cell targetCell = TargetCell;
		int? energyCost = EnergyCost;
		bool forced = Forced;
		if (!TeleportTo(targetCell, energyCost, IgnoreCombat, ignoreGravity: false, forced, UsePopups))
		{
			return false;
		}
		if (Swirl && currentCell != null && currentCell.ParentZone.IsActive())
		{
			if (currentCell.PathDistanceTo(TargetCell) > 5)
			{
				TeleportSwirl(null, "&C", Voluntary);
			}
			else
			{
				SmallTeleportSwirl(null, "&C", Voluntary);
			}
		}
		ParticleBlip("&C\u000f", 10, 0L);
		if (InterruptMovement)
		{
			StopMoving();
		}
		if (IsPlayer())
		{
			if (currentCell.X > 42 && Sidebar.State == "right")
			{
				Sidebar.SetSidebarState("left");
			}
			if (currentCell.X < 38 && Sidebar.State == "left")
			{
				Sidebar.SetSidebarState("right");
			}
		}
		return true;
	}

	public void TeleportSwirl(Cell C = null, string Color = "&C", bool Voluntary = false, string Sound = null, char Char = 'ù', bool IsOut = false)
	{
		if (C == null)
		{
			C = GetCurrentCell();
		}
		if (C == null || !C.ParentZone.IsActive())
		{
			return;
		}
		if (IsOut)
		{
			PlayWorldSound(Sound ?? (Voluntary ? "Sounds/Abilities/sfx_ability_teleport_voluntary_out" : "Sounds/Abilities/sfx_ability_teleport_involuntary_out"));
		}
		else
		{
			PlayWorldSound(Sound ?? (Voluntary ? "Sounds/Abilities/sfx_ability_teleport_voluntary_in" : "Sounds/Abilities/sfx_ability_teleport_involuntary_in"));
		}
		if (Options.UseParticleVFX && C.ParentZone != null)
		{
			Cell currentCell = GetCurrentCell();
			if (currentCell != null && currentCell.InActiveZone)
			{
				if (IsOut)
				{
					CombatJuice.playPrefabAnimation(CurrentCell?.Location, "Abilities/AbilityVFXTeleportOut", null, Render.Tile);
				}
				else
				{
					CombatJuice.playPrefabAnimation(CurrentCell?.Location, "Abilities/AbilityVFXTeleportIn", null, Render.Tile);
				}
			}
		}
		else
		{
			for (int i = 0; i < 30; i++)
			{
				XRL.The.ParticleManager.AddRadial(Color + Char, C.X, C.Y, XRL.Rules.Stat.Random(0, 7), XRL.Rules.Stat.Random(5, 10), 0.01f * (float)XRL.Rules.Stat.Random(4, 6), -0.05f * (float)XRL.Rules.Stat.Random(3, 7));
			}
		}
	}

	public void SmallTeleportSwirl(Cell C = null, string Color = "&C", bool Voluntary = false, string Sound = null, bool IsOut = false)
	{
		if (C == null)
		{
			C = GetCurrentCell();
		}
		if (C != null && C.ParentZone.IsActive())
		{
			if (IsOut)
			{
				PlayWorldSound(Sound ?? (Voluntary ? "Sounds/Abilities/sfx_ability_teleport_voluntary_out" : "Sounds/Abilities/sfx_ability_teleport_involuntary_out"));
			}
			else
			{
				PlayWorldSound(Sound ?? (Voluntary ? "Sounds/Abilities/sfx_ability_teleport_voluntary_in" : "Sounds/Abilities/sfx_ability_teleport_involuntary_in"));
			}
			for (int i = 0; i < 10; i++)
			{
				XRL.The.ParticleManager.AddRadial(Color + "ù", C.X, C.Y, XRL.Rules.Stat.Random(0, 5), XRL.Rules.Stat.Random(4, 8), 0.01f * (float)XRL.Rules.Stat.Random(3, 5), -0.05f * (float)XRL.Rules.Stat.Random(2, 6));
			}
		}
	}

	public void SpatialDistortionBlip(Cell C = null, string Color = "&C")
	{
		(C ?? GetCurrentCell())?.SpatialDistortionBlip(Color);
	}

	public void TechTeleportSwirlOut(Cell C = null, string Color = "&B", string Sound = null)
	{
		TeleportSwirl(C, Color, Voluntary: true, Sound, 'ù', IsOut: true);
	}

	public void TechTeleportSwirlIn(Cell C = null, string Color = "&C", string Sound = null)
	{
		TeleportSwirl(C, Color, Voluntary: true, Sound);
	}

	public bool DirectMoveTo(GlobalLocation targetLocation, int EnergyCost = 0, bool Forced = false, bool IgnoreCombat = false, bool IgnoreGravity = false)
	{
		if (targetLocation != null)
		{
			Zone zone = ZoneManager.instance.GetZone(targetLocation.ZoneID);
			return DirectMoveTo(zone.GetCell(targetLocation.CellX, targetLocation.CellY), EnergyCost, Forced, IgnoreCombat, IgnoreGravity);
		}
		return false;
	}

	public bool DirectMoveTo(Cell targetCell, int EnergyCost = 0, bool Forced = false, bool IgnoreCombat = false, bool IgnoreGravity = false, LargerFolk_GameObject Ignore = null)
	{
		if (Physics == null)
		{
			return false;
		}
		return Physics.ProcessTargetedMove(targetCell, "DirectMove", "BeforeDirectMove", "AfterDirectMove", EnergyCost, Forced, System: false, IgnoreCombat, IgnoreGravity, NoStack: false, UsePopups: false, null, null, Ignore);
	}

	public bool SystemLongDistanceMoveTo(Cell targetCell, int? energyCost = null, bool forced = false, bool ignoreCombat = true)
	{
		if (Physics == null)
		{
			return false;
		}
		return Physics.ProcessTargetedMove(targetCell, "SystemLongDistanceMove", "BeforeSystemLongDistanceMove", "AfterSystemLongDistanceMove", energyCost, forced, System: true, ignoreCombat);
	}

	public bool SystemMoveTo(Cell targetCell, int? energyCost = null, bool forced = false, bool ignoreCombat = true, bool ignoreGravity = false, bool noStack = false)
	{
		if (Physics == null)
		{
			return false;
		}
		return Physics.ProcessTargetedMove(targetCell, "SystemMove", "BeforeSystemMove", "AfterSystemMove", energyCost, forced, System: true, ignoreCombat, ignoreGravity, noStack);
	}

	public bool TeleportTo(Cell targetCell, int? energyCost = 0, bool ignoreCombat = true, bool ignoreGravity = false, bool forced = false, bool UsePopups = false, string leaveVerb = "disappear", string arriveVerb = "appear")
	{
		if (Physics == null)
		{
			return false;
		}
		XRL.World.Parts.Physics physics = Physics;
		bool usePopups = UsePopups;
		return physics.ProcessTargetedMove(targetCell, "Teleporting", "BeforeTeleport", "AfterTeleport", energyCost, forced, System: false, ignoreCombat, ignoreGravity, NoStack: false, usePopups, leaveVerb, arriveVerb);
	}

	public void PerformMeleeAttack(LargerFolk_GameObject target)
	{
		Combat.PerformMeleeAttack(this, target);
	}

	public Cell FastGetCurrentCell()
	{
		if (Physics == null)
		{
			return null;
		}
		if (Physics.CurrentCell != null)
		{
			return Physics.CurrentCell;
		}
		if (Physics.Equipped != null)
		{
			return Physics.Equipped.FastGetCurrentCell();
		}
		if (Physics.InInventory != null)
		{
			return Physics.InInventory.FastGetCurrentCell();
		}
		return null;
	}

	public void SyncMutationLevelAndGlimmer()
	{
		SyncMutationLevelsEvent.Send(this);
		GlimmerChangeEvent.Send(this);
	}

	public Cell GetCurrentCell()
	{
		Cell currentCell = CurrentCell;
		if (currentCell != null)
		{
			return currentCell;
		}
		GetContextEvent.Get(this, out var ObjectContext, out var CellContext);
		if (CellContext != null)
		{
			return CellContext;
		}
		return ObjectContext?.GetCurrentCell();
	}

	public Zone GetCurrentZone()
	{
		Zone zone = CurrentZone;
		if (zone == null)
		{
			Cell currentCell = GetCurrentCell();
			if (currentCell == null)
			{
				return null;
			}
			zone = currentCell.ParentZone;
		}
		return zone;
	}

	public bool Contains(LargerFolk_GameObject Object)
	{
		return ContainsEvent.Check(this, Object);
	}

	public bool ContainsBlueprint(string Blueprint)
	{
		return ContainsBlueprintEvent.Check(this, Blueprint);
	}

	public bool ContainsAnyBlueprint(List<string> Blueprints)
	{
		return ContainsAnyBlueprintEvent.Check(this, Blueprints);
	}

	public LargerFolk_GameObject FindContainedObjectByBlueprint(string Blueprint)
	{
		return ContainsBlueprintEvent.Find(this, Blueprint);
	}

	public LargerFolk_GameObject FindContainedObjectByAnyBlueprint(List<string> Blueprints)
	{
		return ContainsAnyBlueprintEvent.Find(this, Blueprints);
	}

	public bool HasTag(string TagName)
	{
		if (TagName != null)
		{
			return GetBlueprint(UseDefault: false)?.HasTag(TagName) ?? false;
		}
		return false;
	}

	public bool IsInGraveyard()
	{
		return (Flags & 4) != 0;
	}

	public bool HasHitpoints()
	{
		return Stat("Hitpoints") > 0;
	}

	public bool HasContext()
	{
		return GetContextEvent.HasAny(this);
	}

	public void GetContext(out LargerFolk_GameObject ObjectContext, out Cell CellContext, out BodyPart BodyPartContext, out int Relation, out IContextRelationManager RelationManager)
	{
		GetContextEvent.Get(this, out ObjectContext, out CellContext, out BodyPartContext, out Relation, out RelationManager);
	}

	public void GetContext(out LargerFolk_GameObject ObjectContext, out Cell CellContext, out BodyPart BodyPartContext)
	{
		GetContextEvent.Get(this, out ObjectContext, out CellContext, out BodyPartContext, out var _, out var _);
	}

	public void GetContext(out LargerFolk_GameObject ObjectContext, out Cell CellContext)
	{
		GetContextEvent.Get(this, out ObjectContext, out CellContext, out var _, out var _, out var _);
	}

	public LargerFolk_GameObject GetObjectContext()
	{
		GetContext(out var ObjectContext, out var _, out var _, out var _, out var _);
		return ObjectContext;
	}

	public LargerFolk_GameObject GetObjectContext(out BodyPart BodyPartContext)
	{
		GetContext(out var ObjectContext, out var _, out BodyPartContext, out var _, out var _);
		return ObjectContext;
	}

	public LargerFolk_GameObject GetObjectContext(out BodyPart BodyPartContext, out int Relation)
	{
		GetContext(out var ObjectContext, out var _, out BodyPartContext, out Relation, out var _);
		return ObjectContext;
	}

	public LargerFolk_GameObject GetObjectContext(out BodyPart BodyPartContext, out int Relation, out IContextRelationManager RelationManager)
	{
		GetContext(out var ObjectContext, out var _, out BodyPartContext, out Relation, out RelationManager);
		return ObjectContext;
	}

	public Cell GetCellContext()
	{
		GetContext(out var _, out var CellContext, out var _, out var _, out var _);
		return CellContext;
	}

	public Cell GetCellContext(out int Relation)
	{
		GetContext(out var _, out var CellContext, out var _, out Relation, out var _);
		return CellContext;
	}

	public Cell GetCellContext(out int Relation, out IContextRelationManager RelationManager)
	{
		GetContext(out var _, out var CellContext, out var _, out Relation, out RelationManager);
		return CellContext;
	}

	public int GetMatterPhase()
	{
		return MatterPhase.getMatterPhase(this);
	}

	public bool IsNowhere()
	{
		if (IsInGraveyard())
		{
			return true;
		}
		if (CurrentCell != null)
		{
			return false;
		}
		GetContext(out var ObjectContext, out var CellContext);
		if (ObjectContext != null)
		{
			return ObjectContext.IsNowhere();
		}
		if (CellContext != null)
		{
			return false;
		}
		return true;
	}

	public bool IsOwned()
	{
		return !string.IsNullOrEmpty(Physics?.Owner);
	}

	public void RemoveFromContext(IEvent ParentEvent = null)
	{
		RemoveFromContextEvent.Send(this, ParentEvent);
	}

	public bool TryRemoveFromContext(IEvent ParentEvent = null)
	{
		return TryRemoveFromContextEvent.Check(this, ParentEvent = null);
	}

	public string RequireID()
	{
		_ = ID;
		return ID;
	}

	[Obsolete("use IDMatch(), will be removed after Q1 2024")]
	public bool idmatch(string ID)
	{
		return IDMatch(ID);
	}

	public bool IDMatch(string TestID)
	{
		if (TestID == null)
		{
			return false;
		}
		return GetStringProperty("id") == TestID;
	}

	public bool IDMatch(int TestID)
	{
		if (TestID == 0)
		{
			return false;
		}
		return BaseID == TestID;
	}

	[Obsolete("use IDMatch(), will be removed after Q1 2024")]
	public bool idmatch(LargerFolk_GameObject Object)
	{
		return IDMatch(Object);
	}

	public bool IDMatch(LargerFolk_GameObject Object)
	{
		if (!Validate(ref Object))
		{
			return false;
		}
		string stringProperty = GetStringProperty("id");
		if (stringProperty != null)
		{
			return Object.IDMatch(stringProperty);
		}
		return false;
	}

	[Obsolete("use FindByID(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject findById(string ID)
	{
		return FindByID(ID);
	}

	public static LargerFolk_GameObject FindByID(string ID)
	{
		if (ID.IsNullOrEmpty())
		{
			return null;
		}
		XRLGame game = XRL.The.Game;
		if (game == null)
		{
			return null;
		}
		if (ID == game.lastFindId && Validate(ref game.lastFind) && game.lastFind.IDMatch(game.lastFindId))
		{
			return game.lastFind;
		}
		Zone activeZone = game.ZoneManager.ActiveZone;
		if (activeZone != null)
		{
			LargerFolk_GameObject gameObject = activeZone.FindObjectByID(ID);
			if (gameObject != null)
			{
				game.lastFindId = ID;
				game.lastFind = gameObject;
				return gameObject;
			}
		}
		foreach (Zone value in game.ZoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				LargerFolk_GameObject gameObject2 = value.FindObjectByID(ID);
				if (gameObject2 != null)
				{
					game.lastFindId = ID;
					game.lastFind = gameObject2;
					return gameObject2;
				}
			}
		}
		return null;
	}

	public static LargerFolk_GameObject FindByID(int ID)
	{
		if (ID <= 0)
		{
			return null;
		}
		XRLGame game = XRL.The.Game;
		if (game == null)
		{
			return null;
		}
		Zone activeZone = game.ZoneManager.ActiveZone;
		if (activeZone != null)
		{
			LargerFolk_GameObject gameObject = activeZone.FindObjectByID(ID);
			if (gameObject != null)
			{
				return gameObject;
			}
		}
		foreach (Zone value in game.ZoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				GameObject gameObject2 = value.FindObjectByID(ID);
				if (gameObject2 != null)
				{
					return gameObject2;
				}
			}
		}
		return null;
	}

	public bool GeneIDMatch(string TestID)
	{
		if (TestID == null)
		{
			return false;
		}
		return GetStringProperty("GeneID") == TestID;
	}

	public bool GeneIDMatch(LargerFolk_GameObject Object)
	{
		if (!Validate(ref Object))
		{
			return false;
		}
		string stringProperty = GetStringProperty("GeneID");
		if (stringProperty != null)
		{
			return Object.GeneIDMatch(stringProperty);
		}
		return false;
	}

	public void InjectGeneID(string ID)
	{
		SetStringProperty("GeneID", ID);
	}

	[Obsolete("use FindByBlueprint(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject findByBlueprint(string Name)
	{
		return FindByBlueprint(Name);
	}

	public static LargerFolk_GameObject FindByBlueprint(string Name)
	{
		if (Name.IsNullOrEmpty())
		{
			return null;
		}
		ZoneManager zoneManager = XRL.The.ZoneManager;
		if (zoneManager == null)
		{
			return null;
		}
		Zone activeZone = zoneManager.ActiveZone;
		if (activeZone != null)
		{
			LargerFolk_GameObject gameObject = activeZone.FindFirstObject(Name);
			if (gameObject != null)
			{
				return gameObject;
			}
		}
		foreach (Zone value in zoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				GameObject gameObject2 = value.FindFirstObject(Name);
				if (gameObject2 != null)
				{
					return gameObject2;
				}
			}
		}
		return null;
	}

	[Obsolete("use Find(), will be removed after Q1 2024")]
	public static LargerFolk_GameObject find(Predicate<LargerFolk_GameObject> Filter)
	{
		return Find(Filter);
	}

	public static LargerFolk_GameObject Find(Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			return null;
		}
		ZoneManager zoneManager = XRL.The.ZoneManager;
		if (zoneManager == null)
		{
			return null;
		}
		Zone activeZone = zoneManager.ActiveZone;
		if (activeZone != null)
		{
			LargerFolk_GameObject gameObject = activeZone.FindFirstObject(Filter);
			if (gameObject != null)
			{
				return gameObject;
			}
		}
		foreach (Zone value in zoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				GameObject gameObject2 = value.FindFirstObject(Filter);
				if (gameObject2 != null)
				{
					return gameObject2;
				}
			}
		}
		return null;
	}

	[Obsolete("use FindAll(), will be removed after Q1 2024")]
	public static List<LargerFolk_GameObject> findAll(Predicate<LargerFolk_GameObject> Filter)
	{
		return FindAll(Filter);
	}

	public static List<LargerFolk_GameObject> FindAll(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		if (Filter == null)
		{
			return list;
		}
		ZoneManager zoneManager = XRL.The.ZoneManager;
		if (zoneManager == null)
		{
			return null;
		}
		Zone activeZone = zoneManager.ActiveZone;
		activeZone?.FindObjects(list, Filter);
		foreach (Zone value in zoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				value.FindObjects(list, Filter);
			}
		}
		return list;
	}

	public int? Con(LargerFolk_GameObject Target = null, bool IgnoreHideCon = false)
	{
		return DifficultyEvaluation.GetDifficultyRating(this, Target);
	}

	public string GetDirectionToward(Location2D Location, bool General = false)
	{
		if (Location == null)
		{
			return "?";
		}
		Cell currentCell = GetCurrentCell();
		if (currentCell == null)
		{
			return "?";
		}
		if (!General)
		{
			return currentCell.GetDirectionFrom(Location);
		}
		return currentCell.GetGeneralDirectionFrom(Location);
	}

	public string GetDirectionToward(Cell Cell, bool General = false)
	{
		if (Cell == null)
		{
			return "?";
		}
		Cell currentCell = GetCurrentCell();
		if (currentCell == null)
		{
			return "?";
		}
		if (!General)
		{
			return currentCell.GetDirectionFromCell(Cell);
		}
		return currentCell.GetGeneralDirectionFromCell(Cell);
	}

	public string GetDirectionToward(LargerFolk_GameObject Object, bool General = false)
	{
		return GetDirectionToward(Object?.GetCurrentCell(), General);
	}

	public string DescribeDirectionToward(Location2D L, bool General = false, bool Short = false)
	{
		string directionToward = GetDirectionToward(L, General);
		if (Short)
		{
			return Directions.GetDirectionShortDescription(directionToward);
		}
		return Directions.GetDirectionDescription(directionToward);
	}

	public string DescribeDirectionToward(Cell C, bool General = false, bool Short = false)
	{
		string directionToward = GetDirectionToward(C, General);
		if (Short)
		{
			return Directions.GetDirectionShortDescription(directionToward);
		}
		return Directions.GetDirectionDescription(directionToward);
	}

	public string DescribeRelativeDirectionToward(Location2D L, bool General = false)
	{
		return Directions.GetDirectionDescription(this, GetDirectionToward(L, General));
	}

	public string DescribeRelativeDirectionToward(Cell C, bool General = false)
	{
		return Directions.GetDirectionDescription(this, GetDirectionToward(C, General));
	}

	public string DescribeDirectionToward(LargerFolk_GameObject Object, bool General = false, bool Short = false)
	{
		return DescribeDirectionToward(Object?.GetCurrentCell(), General, Short);
	}

	public string DescribeRelativeDirectionToward(LargerFolk_GameObject Object, bool General = false)
	{
		return Directions.GetDirectionDescription(this, GetDirectionToward(Object, General));
	}

	public string DescribeDirectionFrom(Location2D L, bool General = false)
	{
		return Directions.GetIncomingDirectionDescription(GetDirectionToward(L, General));
	}

	public string DescribeDirectionFrom(Cell C, bool General = false)
	{
		return Directions.GetIncomingDirectionDescription(GetDirectionToward(C, General));
	}

	public string DescribeRelativeDirectionFrom(Location2D L, bool General = false)
	{
		return Directions.GetIncomingDirectionDescription(this, GetDirectionToward(L, General));
	}

	public string DescribeRelativeDirectionFrom(Cell C, bool General = false)
	{
		return Directions.GetIncomingDirectionDescription(this, GetDirectionToward(C, General));
	}

	public string DescribeDirectionFrom(LargerFolk_GameObject Object, bool General = false)
	{
		return Directions.GetIncomingDirectionDescription(GetDirectionToward(Object, General));
	}

	public string DescribeRelativeDirectionFrom(LargerFolk_GameObject Object, bool General = false)
	{
		return Directions.GetIncomingDirectionDescription(this, GetDirectionToward(Object, General));
	}

	public int Heal(int Amount, bool Message = false, bool FloatText = false, bool RandomMinimum = false)
	{
		int num = 0;
		eHealing.SetParameter("Amount", Amount);
		if (FireEvent(eHealing))
		{
			Statistic stat = GetStat("Hitpoints");
			if (stat != null)
			{
				int num2 = eHealing.GetIntParameter("Amount");
				if (num2 <= 0 && RandomMinimum && XRL.Rules.Stat.Random(1, 1 + Amount) > 1)
				{
					num2 = 1;
				}
				if (num2 > 0)
				{
					int value = stat.Value;
					stat.Penalty -= num2;
					int value2 = stat.Value;
					if (value != value2)
					{
						num = value2 - value;
						if (Message || FloatText)
						{
							if (num > 0)
							{
								char color = ColorCoding.ConsequentialColorChar(this);
								if (Message && IsVisible())
								{
									MessageQueue.AddPlayerMessage(Does("heal", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " for " + num + " hit " + ((Amount == 1) ? "point" : "points") + ".", color);
								}
								if (FloatText)
								{
									ParticleText(num.Signed(), color, IgnoreVisibility: false, 1.5f, 24f);
								}
							}
							else
							{
								char color2 = ColorCoding.ConsequentialColorChar(null, this);
								if (Message && IsVisible())
								{
									MessageQueue.AddPlayerMessage(Does("lose", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + num + " hit " + ((num == 1) ? "point" : "points") + ".", color2);
								}
								if (FloatText)
								{
									ParticleText(num.ToString(), color2, IgnoreVisibility: false, 1.5f, 24f);
								}
							}
						}
					}
				}
			}
		}
		return num;
	}

	public double Health()
	{
		if (!Statistics.TryGetValue("Hitpoints", out var value))
		{
			return 1.0;
		}
		int value2 = value.Value;
		int baseValue = value.BaseValue;
		return (double)value2 / (double)baseValue;
	}

	public bool GoToPartyLeader()
	{
		return Brain?.GoToPartyLeader() ?? false;
	}

	public string GetPrimaryFaction(bool Base = false)
	{
		return Brain?.GetPrimaryFaction(Base);
	}

	public string GetPrimaryFactionName(bool VisibleOnly = true, bool Formatted = true, bool Base = false)
	{
		return Brain?.GetPrimaryFactionName(VisibleOnly, Formatted, Base);
	}

	public bool BelongsToFaction(string Faction)
	{
		if (Faction.IsNullOrEmpty())
		{
			return false;
		}
		if (Brain == null)
		{
			return false;
		}
		if (Brain.GetPrimaryFaction() == Faction)
		{
			return true;
		}
		return false;
	}

	public bool HasGoal(string GoalName)
	{
		return Brain?.HasGoal(GoalName) ?? false;
	}

	public bool HasGoal()
	{
		return Brain?.HasGoal() ?? false;
	}

	public bool HasGoalOtherThan(string what)
	{
		return Brain?.HasGoalOtherThan(what) ?? false;
	}

	public bool IsBusy()
	{
		return Brain?.IsBusy() ?? false;
	}

	public LargerFolk_GameObject GetHostilityTarget()
	{
		GameObject target = Target;
		if (target == null || !IsHostileTowards(target))
		{
			return null;
		}
		return target;
	}

	public void MakeActive(bool Force = false)
	{
		if (Force || Brain != null)
		{
			XRL.The.ActionManager?.AddActiveObject(this);
		}
	}

	public void MakeInactive()
	{
		XRL.The.ActionManager?.RemoveActiveObject(this);
	}

	public void BecomeCompanionOf(LargerFolk_GameObject Object, bool Trifling = false)
	{
		Brain?.BecomeCompanionOf(Object, Trifling);
	}

	public bool IsUnderSky()
	{
		return CurrentZone?.IsOutside() ?? false;
	}

	public bool IsFrozen()
	{
		return Physics?.IsFrozen() ?? false;
	}

	public bool CheckFrozen(bool Telepathic = false, bool Telekinetic = false, bool Silent = false, LargerFolk_GameObject Target = null)
	{
		if (IsFrozen() && (!Telepathic || ((Target == null) ? (!HasPart<Telepathy>()) : (!CanMakeTelepathicContactWith(Target)))) && (!Telekinetic || ((Target == null) ? (!HasPart<Telekinesis>()) : (!CanManipulateTelekinetically(Target)))))
		{
			if (!Silent && IsPlayer())
			{
				Popup.ShowFail("You are frozen solid!");
			}
			return false;
		}
		return true;
	}

	public bool IsFreezing()
	{
		return Physics?.IsFreezing() ?? false;
	}

	public bool IsAflame()
	{
		return Physics?.IsAflame() ?? false;
	}

	public bool IsVaporizing()
	{
		return Physics?.IsVaporizing() ?? false;
	}

	public bool IsMissingTongue()
	{
		if (TryGetEffect<Glotrot>(out var Effect))
		{
			return Effect.Stage >= 3;
		}
		return false;
	}

	public int GetStorableDrams(string liquidType = "water", LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null, Predicate<LargerFolk_GameObject> filter = null, bool safeOnly = true, LiquidVolume liquidVolume = null)
	{
		return GetStorableDramsEvent.GetFor(this, liquidType, skip, skipList, filter, safeOnly, liquidVolume);
	}

	public int GetAutoCollectDrams(string liquidType = "water", LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null)
	{
		return GetAutoCollectDramsEvent.GetFor(this, liquidType, skip, skipList);
	}

	public bool AnyAutoCollectDrams(string liquidType = "water", LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null)
	{
		return AnyAutoCollectDramsEvent.Check(this, liquidType, skip, skipList);
	}

	public int GetFreeDrams(string liquidType = "water", LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null, Predicate<LargerFolk_GameObject> filter = null, bool impureOkay = false)
	{
		return GetFreeDramsEvent.GetFor(this, liquidType, skip, skipList, filter, impureOkay);
	}

	public bool GiveDrams(int drams, string liquidType = "water", bool auto = false, LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null, Predicate<LargerFolk_GameObject> filter = null, List<LargerFolk_GameObject> storedIn = null, bool safeOnly = true, LiquidVolume liquidVolume = null)
	{
		return !GiveDramsEvent.Check(this, liquidType, drams, skip, skipList, filter, auto, storedIn, safeOnly, liquidVolume);
	}

	public bool UseDrams(int drams, string liquidType = "water", LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null, Predicate<LargerFolk_GameObject> filter = null, List<LargerFolk_GameObject> trackContainers = null, bool drinking = false)
	{
		return !UseDramsEvent.Check(this, liquidType, drams, skip, skipList, filter, ImpureOkay: false, trackContainers, drinking);
	}

	public bool UseImpureDrams(int drams, string liquidType = "water", LargerFolk_GameObject skip = null, List<LargerFolk_GameObject> skipList = null, Predicate<LargerFolk_GameObject> filter = null, List<LargerFolk_GameObject> trackContainers = null, bool drinking = false)
	{
		return !UseDramsEvent.Check(this, liquidType, drams, skip, skipList, filter, ImpureOkay: true, trackContainers, drinking);
	}

	public bool AllowLiquidCollection(string liquidType = "water", LargerFolk_GameObject actor = null)
	{
		return AllowLiquidCollectionEvent.Check(this, actor, liquidType);
	}

	public bool WantsLiquidCollection(string liquidType = "water", LargerFolk_GameObject actor = null)
	{
		return WantsLiquidCollectionEvent.Check(this, actor, liquidType);
	}

	public bool UseEnergy(int Amount, string Type, string Context = null, int? MoveSpeed = null, bool Passive = false)
	{
		int num = 0;
		if (IsFreezing() && !IsFrozen())
		{
			int num2 = Physics.FreezeTemperature - Physics.Temperature;
			int num3 = Physics.FreezeTemperature - Physics.BrittleTemperature;
			num -= num2 * 100 / num3;
		}
		int minAmount = 0;
		if (Type != null && Type.Contains("Movement"))
		{
			minAmount = Amount / 20;
			if (!IsFlying && HasStat("MoveSpeed"))
			{
				int num4 = MoveSpeed ?? Stat("MoveSpeed");
				if (num4 != 100)
				{
					num += 100 - (int)(100f / ((float)(100 - num4) / 100f + 1f));
				}
			}
		}
		Amount = GetEnergyCostEvent.GetFor(this, Amount, Type, num, 0, minAmount, Passive);
		if (Energy != null)
		{
			Amount = Math.Max(Amount * (900 + XRL.Rules.Stat.Random(0, 200)) / 1000, 0);
			Energy.BaseValue -= Amount;
			UseEnergyEvent.Send(this, Amount, Type, Passive);
		}
		return Amount > 0;
	}

	public void UseEnergy(int Amount)
	{
		UseEnergy(Amount, "None", null, null);
	}

	public string GetWeaponSkill()
	{
		return GetPart<MeleeWeapon>()?.Skill ?? "";
	}

	public bool WillTrade()
	{
		if (HasTagOrProperty("NoTrade"))
		{
			return false;
		}
		if (HasTagOrProperty("FugueCopy"))
		{
			return false;
		}
		if (HasTagOrProperty("Nullphase"))
		{
			return false;
		}
		return true;
	}

	public int DistanceTo(Location2D cellLocation)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone == null || currentCell.ParentZone.IsWorldMap())
		{
			return 9999999;
		}
		return DistanceTo(currentCell.ParentZone.GetCell(cellLocation));
	}

	public int DistanceTo(LargerFolk_GameObject Object)
	{
		Cell cell = Object?.CurrentCell;
		if (cell == null || cell.ParentZone == null || cell.ParentZone.IsWorldMap())
		{
			return 9999999;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone == null || currentCell.ParentZone.IsWorldMap())
		{
			return 9999999;
		}
		return cell.PathDistanceTo(currentCell);
	}

	public int DistanceTo(Cell C)
	{
		if (C.ParentZone == null || C.ParentZone.IsWorldMap())
		{
			return 9999999;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone == null || currentCell.ParentZone.IsWorldMap())
		{
			return 9999999;
		}
		return C.PathDistanceTo(currentCell);
	}

	public double RealDistanceTo(LargerFolk_GameObject Object)
	{
		if (Object == null)
		{
			return 9999999.0;
		}
		Cell currentCell = Object.CurrentCell;
		if (currentCell == null || currentCell.ParentZone == null || currentCell.ParentZone.IsWorldMap())
		{
			return 9999999.0;
		}
		Cell currentCell2 = CurrentCell;
		if (currentCell2 == null || currentCell2.ParentZone == null || currentCell2.ParentZone.IsWorldMap())
		{
			return 9999999.0;
		}
		return currentCell.RealDistanceTo(currentCell2);
	}

	public List<Tuple<Cell, char>> GetLineTo(Cell OC, bool IncludeSolid = true, bool UseTargetability = false)
	{
		if (OC == null)
		{
			return null;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return null;
		}
		if (OC.ParentZone != currentCell.ParentZone)
		{
			return null;
		}
		return currentCell.ParentZone.GetLine(currentCell.X, currentCell.Y, OC.X, OC.Y, IncludeSolid, UseTargetability ? this : null);
	}

	public List<Tuple<Cell, char>> GetLineTo(LargerFolk_GameObject Object, bool bIncludeSolid = true, bool UseTargetability = false)
	{
		return GetLineTo(Object.CurrentCell, bIncludeSolid, UseTargetability);
	}

	public List<Tuple<Cell, char>> GetLineToNLong(LargerFolk_GameObject Object, int N, bool bIncludeSolid = true, bool UseTargetability = false)
	{
		Cell currentCell = Object.CurrentCell;
		if (currentCell == null)
		{
			return null;
		}
		Cell currentCell2 = CurrentCell;
		if (currentCell2 == null)
		{
			return null;
		}
		if (currentCell.ParentZone != currentCell2.ParentZone)
		{
			return null;
		}
		return currentCell2.ParentZone.GetLine(currentCell2.X, currentCell2.Y, currentCell.X, currentCell.Y, bIncludeSolid, UseTargetability ? this : null);
	}

	public bool HasLOSTo(int x, int y, bool IncludeSolid = true, bool BlackoutStops = false, bool UseTargetability = false, bool CheckOcclusion = true, Predicate<Cell> OverrideBlocking = null)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		Zone parentZone = currentCell.ParentZone;
		GameObject useTargetability = (UseTargetability ? this : null);
		bool checkOcclusion = CheckOcclusion;
		return parentZone.CalculateLOS(currentCell, x, y, IncludeSolid, BlackoutStops, useTargetability, OverrideBlocking, 0, BlockContinue: false, checkOcclusion);
	}

	public bool HasLOSTo(Cell C, bool IncludeSolid = true, bool BlackoutStops = false, bool UseTargetability = false, bool CheckOcclusion = true, Predicate<Cell> OverrideBlocking = null)
	{
		if (C == null)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || C.ParentZone != currentCell.ParentZone)
		{
			return false;
		}
		return HasLOSTo(C.X, C.Y, IncludeSolid, BlackoutStops, UseTargetability, CheckOcclusion, OverrideBlocking);
	}

	public bool HasLOSTo(LargerFolk_GameObject Object, bool IncludeSolid = true, bool BlackoutStops = false, bool UseTargetability = false, bool CheckOcclusion = true, Predicate<Cell> OverrideBlocking = null)
	{
		if (Object == null)
		{
			return false;
		}
		return HasLOSTo(Object.CurrentCell, IncludeSolid, BlackoutStops, UseTargetability, CheckOcclusion, OverrideBlocking);
	}

	public bool HasUnobstructedLineTo(Cell C, bool BlackoutStops = false, bool UseTargetability = false)
	{
		if (C == null)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone != C.ParentZone)
		{
			return false;
		}
		return currentCell.ParentZone.HasUnobstructedLineTo(currentCell.X, currentCell.Y, C.X, C.Y, BlackoutStops, UseTargetability ? this : null);
	}

	public bool HasUnobstructedLineTo(LargerFolk_GameObject Object, bool BlackoutStops = false, bool UseTargetability = false)
	{
		return HasUnobstructedLineTo(Object.CurrentCell, BlackoutStops, UseTargetability);
	}

	public bool TryUnequip(bool Silent = false, bool SemiForced = false)
	{
		return EquippedOn()?.TryUnequip(Silent, SemiForced) ?? false;
	}

	public bool ForceUnequip(bool Silent = false)
	{
		return EquippedOn()?.ForceUnequip(Silent) ?? false;
	}

	public BodyPart EquippedOn()
	{
		return Equipped?.Body?.FindEquippedItem(this);
	}

	public BodyPart DefaultOrEquippedPart()
	{
		return Equipped?.Body?.FindDefaultOrEquippedItem(this);
	}

	public bool IsEquippedOnType(string FindType)
	{
		return Equipped?.Body?.IsEquippedOnType(this, FindType) == true;
	}

	public bool IsEquippedOnCategory(int FindCategory)
	{
		return Equipped?.Body?.IsEquippedOnCategory(this, FindCategory) == true;
	}

	public bool IsEquippedOnPrimary()
	{
		return Equipped?.HasEquippedOnPrimary(this) ?? false;
	}

	public bool HasEquippedOnPrimary(LargerFolk_GameObject Object)
	{
		return Body?.IsEquippedOnPrimary(Object) ?? false;
	}

	public void GainSP(int amount, bool message = true)
	{
		if (message && IsPlayer())
		{
			Popup.Show("You gain {{C|" + amount + "}} skill points!");
		}
		Statistics["SP"].BaseValue += amount;
	}

	public void GainEgo(int amount, bool message = true)
	{
		if (message && IsPlayer())
		{
			Popup.Show("Your Ego is increased by {{G|" + amount + "}}!");
		}
		GetStat("Ego").BaseValue += amount;
	}

	public void LoseEgo(int amount, bool message = true)
	{
		if (message && IsPlayer())
		{
			Popup.Show("Your Ego is decreased by {{R|" + amount + "}}!");
		}
		GetStat("Ego").BaseValue -= amount;
	}

	public void GainIntelligence(int amount, bool message = true)
	{
		if (message && IsPlayer())
		{
			Popup.Show("Your Intelligence is increased by {{G|" + amount + "}}!");
		}
		GetStat("Intelligence").BaseValue += amount;
	}

	public void GainWillpower(int amount, bool message = true)
	{
		if (message && IsPlayer())
		{
			Popup.Show("Your Willpower is increased by {{G|" + amount + "}}!");
		}
		GetStat("Willpower").BaseValue += amount;
	}

	public LargerFolk_GameObject GetShield(Predicate<LargerFolk_GameObject> Filter = null, LargerFolk_GameObject Attacker = null)
	{
		return Body?.GetShield(Filter, Attacker);
	}

	public LargerFolk_GameObject GetShieldWithHighestAV(Predicate<LargerFolk_GameObject> Filter = null, LargerFolk_GameObject Attacker = null)
	{
		return Body?.GetShieldWithHighestAV(Filter, Attacker);
	}

	public LargerFolk_GameObject GetWeaponOfType(string Type, bool PreferPrimary = false)
	{
		return Body?.GetWeaponOfType(Type, NeedPrimary: false, PreferPrimary);
	}

	public LargerFolk_GameObject GetPrimaryWeaponOfType(string Type)
	{
		return Body?.GetPrimaryWeaponOfType(Type);
	}

	public LargerFolk_GameObject GetPrimaryWeaponOfType(string Type, bool AcceptFirstHandForNonHandPrimary)
	{
		return Body?.GetPrimaryWeaponOfType(Type, AcceptFirstHandForNonHandPrimary);
	}

	public LargerFolk_GameObject GetWeapon(Predicate<LargerFolk_GameObject> Filter = null)
	{
		return Body?.GetWeapon(Filter);
	}

	public bool HasWeaponOfType(string Type, bool NeedPrimary = false)
	{
		return Body?.HasWeaponOfType(Type, NeedPrimary) ?? false;
	}

	public bool HasPrimaryWeaponOfType(string Type)
	{
		return Body?.HasPrimaryWeaponOfType(Type) ?? false;
	}

	public bool HasWeapon(Predicate<LargerFolk_GameObject> Filter = null)
	{
		return Body?.HasWeapon(Filter) ?? false;
	}

	public void ClearShieldBlocks()
	{
		Body?.ClearShieldBlocks();
	}

	public bool IsImplantedInCategory(int FindCategory)
	{
		return Equipped?.Body?.IsImplantedInCategory(this, FindCategory) == true;
	}

	public LargerFolk_GameObject ReplaceWith(LargerFolk_GameObject NewObject)
	{
		SplitFromStack();
		ReplaceInContextEvent.Send(this, NewObject);
		Obliterate();
		return NewObject;
	}

	public LargerFolk_GameObject ReplaceWith(string NewObject)
	{
		return ReplaceWith(Create(NewObject));
	}

	public string GetSoundTag(string Tag, string Default = null)
	{
		return GetPropertyOrTag(Tag, Default);
	}

	public void PlayWorldSoundTag(string Tag, string Default = null, Cell Source = null, float Volume = 0.5f)
	{
		string text = GetTagOrStringProperty(Tag).Coalesce(Default);
		if (!text.IsNullOrEmpty())
		{
			if (Source == null)
			{
				Source = GetCurrentCell();
			}
			Source?.PlayWorldSound(text, Volume);
		}
	}

	public void PlayCombatSoundTag(string Tag, string Default = null, Cell Source = null, float Volume = 0.5f)
	{
		string text = GetTagOrStringProperty(Tag).Coalesce(Default);
		if (!text.IsNullOrEmpty())
		{
			if (Source == null)
			{
				Source = GetCurrentCell();
			}
			Source?.PlayWorldSound(text, Volume, 0f, Combat: true);
		}
	}

	public bool Obliterate(string Reason = null, bool Silent = false, string ThirdPersonReason = null)
	{
		return Destroy(Reason, Silent, Obliterate: true, ThirdPersonReason);
	}

	public bool Destroy(string Reason = null, bool Silent = false, bool Obliterate = false, string ThirdPersonReason = null)
	{
		if (IsInGraveyard())
		{
			return true;
		}
		if (!BeforeDestroyObjectEvent.Check(this, Obliterate, Silent, Reason, ThirdPersonReason))
		{
			return false;
		}
		if (IsPlayer())
		{
			if (HasEffect<Dominated>())
			{
				MetricsManager.LogInfo("Player dominating something when it was destroyed");
				XRLCore.Core.RenderBase();
				Achievement.WINKED_OUT.Unlock();
				if (CheckpointingSystem.ShowDeathMessage("Your mind winks out of existence."))
				{
					return true;
				}
				if (Options.AllowReallydie && Popup.ShowYesNo("DEBUG: Do you really want to die?", "Sounds/UI/ui_notification", AllowEscape: true, DialogResult.No) != 0)
				{
					RemoveEffect<Dominated>();
				}
				else
				{
					XRLCore.Core.Game.DeathReason = "Your mind winked out of existence.";
				}
			}
			else
			{
				MetricsManager.LogInfo("PlayerDestroyed (probably alright but just in case)", Environment.StackTrace);
				XRLCore.Core.RenderBase();
				if (CheckpointingSystem.ShowDeathMessage("You die! (good job)"))
				{
					return true;
				}
				if (Options.AllowReallydie && Popup.ShowYesNo("DEBUG: Do you really want to die?", "Sounds/UI/ui_notification", AllowEscape: true, DialogResult.No) != 0)
				{
					RestorePristineHealth();
					return false;
				}
				XRLCore.Core.Game.DeathReason = Reason ?? ("You were " + (Obliterate ? "obliterated" : "destroyed"));
			}
			if (IsPlayer())
			{
				XRLCore.Core.Game.Running = false;
				return true;
			}
		}
		else if (Brain != null && XRL.The.Player != null && Brain.PartyLeader == XRL.The.Player && !IsTrifling)
		{
			string propertyOrTag = GetPropertyOrTag("CustomDeathVerb", "died");
			string value = null;
			if (!HasTagOrProperty("CustomDeathVerb"))
			{
				if (!ThirdPersonReason.IsNullOrEmpty())
				{
					value = ThirdPersonReason.Replace("@@", "");
					value = Regex.Replace(value, "##.*?##", "");
					string oldValue = "by " + ThePlayer.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: false, Reflexive: false, null);
					value = value.Replace(oldValue, "by you");
				}
				else
				{
					value = GameText.RoughConvertSecondPersonToThirdPerson(Reason, this);
				}
			}
			StringBuilder stringBuilder = Event.NewStringBuilder();
			stringBuilder.Append("Your companion, ").Append(HasProperName ? BaseDisplayName : Grammar.A(BaseDisplayName)).Append(", ")
				.Append(propertyOrTag)
				.Append('.');
			if (!value.IsNullOrEmpty())
			{
				stringBuilder.Append(' ').Append(value);
			}
			if (HasTagOrProperty("NoFollowerDeathPopup"))
			{
				MessageQueue.AddPlayerMessage(stringBuilder.ToString());
			}
			else
			{
				Popup.Show(stringBuilder.ToString());
			}
		}
		if (Energy != null)
		{
			Energy.BaseValue = 0;
		}
		OnDestroyObjectEvent.Send(this, Obliterate, Silent, Reason, ThirdPersonReason);
		if (this == Sidebar.CurrentTarget)
		{
			Sidebar.CurrentTarget = null;
		}
		Physics?.TeardownForDestroy(MoveToGraveyard: true, Silent);
		return true;
	}

	public LargerFolk_GameObject DeepCopy(bool CopyEffects = false, bool CopyID = false, Func<GameObject, GameObject> MapInv = null)
	{
		LargerFolk_GameObject gameObject = Get();
		try
		{
			FireEvent(CopyEffects ? "BeforeDeepCopyWithEffects" : "BeforeDeepCopyWithoutEffects");
			gameObject.DeepCopyInventoryObjectMap = new Dictionary<GameObject, GameObject>();
			gameObject.Blueprint = Blueprint;
			gameObject.GenderName = GenderName;
			gameObject.PronounSetName = PronounSetName;
			gameObject.Flags = Flags;
			if (CopyID)
			{
				gameObject._BaseID = _BaseID;
			}
			foreach (string key in Property.Keys)
			{
				if (!(key == "id") || CopyID)
				{
					gameObject.Property.Add(key, Property[key]);
				}
			}
			foreach (string key2 in IntProperty.Keys)
			{
				gameObject.IntProperty.Add(key2, IntProperty[key2]);
			}
			foreach (string key3 in Statistics.Keys)
			{
				Statistic statistic = new Statistic(Statistics[key3]);
				statistic.Owner = gameObject;
				gameObject.Statistics.Add(key3, statistic);
			}
			if (CopyEffects)
			{
				foreach (Effect effect in Effects)
				{
					if (effect != null)
					{
						gameObject.Effects.Add(effect.DeepCopy(gameObject, MapInv));
					}
				}
			}
			else
			{
				foreach (Effect effect2 in Effects)
				{
					if (effect2 == null)
					{
						continue;
					}
					if (effect2.allowCopyOnNoEffectDeepCopy())
					{
						gameObject.Effects.Add(effect2.DeepCopy(gameObject, MapInv));
						continue;
					}
					foreach (KeyValuePair<string, Statistic> statistic2 in gameObject.Statistics)
					{
						if (statistic2.Value.Shifts == null || effect2._StatShifter == null || effect2._StatShifter.ActiveShifts == null)
						{
							continue;
						}
						foreach (KeyValuePair<string, Dictionary<string, Guid>> activeShift in effect2._StatShifter.ActiveShifts)
						{
							foreach (KeyValuePair<string, Guid> item in activeShift.Value)
							{
								statistic2.Value.RemoveShift(item.Value);
							}
						}
					}
				}
			}
			for (int i = 0; i < PartsList.Count; i++)
			{
				IPart part = PartsList[i].DeepCopy(gameObject, MapInv);
				if (part != null)
				{
					gameObject.AddPartInternals(part, DoRegistration: false, Initial: false, Creation: true);
				}
				else
				{
					if (!PartsList[i].HasStatShifts())
					{
						continue;
					}
					foreach (KeyValuePair<string, Statistic> statistic3 in gameObject.Statistics)
					{
						foreach (KeyValuePair<string, Dictionary<string, Guid>> activeShift2 in PartsList[i].StatShifter.ActiveShifts)
						{
							foreach (KeyValuePair<string, Guid> item2 in activeShift2.Value)
							{
								statistic3.Value.RemoveShift(item2.Value);
							}
						}
					}
				}
			}
			gameObject.Energy = gameObject.Statistics.GetValue("Energy");
			if (RegisteredPartEvents != null)
			{
				gameObject.RegisteredPartEvents = new Dictionary<string, List<IPart>>();
				foreach (string key4 in RegisteredPartEvents.Keys)
				{
					gameObject.RegisteredPartEvents.Add(key4, new List<IPart>());
					foreach (IPart item3 in RegisteredPartEvents[key4])
					{
						if (item3.ParentObject == this)
						{
							gameObject.RegisteredPartEvents[key4].Add(gameObject.GetPart(item3.Name));
						}
						else if (item3.ParentObject != null && gameObject.DeepCopyInventoryObjectMap.ContainsKey(item3.ParentObject))
						{
							gameObject.RegisteredPartEvents[key4].Add(gameObject.DeepCopyInventoryObjectMap[item3.ParentObject].GetPart(item3.Name));
						}
					}
				}
			}
			else
			{
				gameObject.RegisteredPartEvents = null;
			}
			gameObject.FinalizeCopy(this, CopyEffects, CopyID);
			if (gameObject.PartsList != null && !CopyID && ID != gameObject.ID)
			{
				foreach (IPart parts in gameObject.PartsList)
				{
					if (parts != null && parts.HasStatShifts() && parts.StatShifter.ActiveShifts.ContainsKey(ID))
					{
						if (!parts.StatShifter.ActiveShifts.ContainsKey(gameObject.ID))
						{
							parts.StatShifter.ActiveShifts.Add(gameObject.ID, new Dictionary<string, Guid>());
						}
						try
						{
							parts.StatShifter.ActiveShifts[gameObject.ID].AddRange(parts.StatShifter.ActiveShifts[ID]);
							parts.StatShifter.ActiveShifts.Remove(ID);
						}
						catch (Exception x)
						{
							MetricsManager.LogException("Clone PartsList", x);
						}
					}
				}
			}
			List<LargerFolk_GameObject> list = gameObject?.GetInventoryAndEquipmentAndDefaultEquipment();
			if (list != null && !CopyID && ID != gameObject.ID)
			{
				foreach (LargerFolk_GameObject item4 in list)
				{
					if (item4?.PartsList == null)
					{
						continue;
					}
					foreach (IPart parts2 in item4.PartsList)
					{
						if (parts2 != null && parts2.HasStatShifts() && parts2.StatShifter.ActiveShifts.ContainsKey(ID))
						{
							if (!parts2.StatShifter.ActiveShifts.ContainsKey(gameObject.ID))
							{
								parts2.StatShifter.ActiveShifts.Add(gameObject.ID, new Dictionary<string, Guid>());
							}
							try
							{
								parts2.StatShifter.ActiveShifts[gameObject.ID].AddRange(parts2.StatShifter.ActiveShifts[ID]);
								parts2.StatShifter.ActiveShifts.Remove(ID);
							}
							catch (Exception x2)
							{
								MetricsManager.LogException("Clone Inventory", x2);
							}
						}
					}
				}
			}
			if (gameObject.Effects != null && !CopyID && ID != gameObject.ID)
			{
				foreach (Effect effect3 in gameObject.Effects)
				{
					if (effect3 != null && effect3.HasStatShifts() && effect3.StatShifter.ActiveShifts.ContainsKey(ID))
					{
						if (!effect3.StatShifter.ActiveShifts.ContainsKey(gameObject.ID))
						{
							effect3.StatShifter.ActiveShifts.Add(gameObject.ID, new Dictionary<string, Guid>());
						}
						try
						{
							effect3.StatShifter.ActiveShifts[gameObject.ID].AddRange(effect3.StatShifter.ActiveShifts[ID]);
							effect3.StatShifter.ActiveShifts.Remove(ID);
						}
						catch (Exception x3)
						{
							MetricsManager.LogException("Clone Effects", x3);
						}
					}
				}
			}
			gameObject.DeepCopyInventoryObjectMap = null;
			gameObject.ResetNameCache();
			return gameObject;
		}
		finally
		{
			FireEvent(CopyEffects ? "AfterDeepCopyWithEffects" : "AfterDeepCopyWithoutEffects");
		}
	}

	public void FinalizeCopy(LargerFolk_GameObject Source, bool CopyEffects, bool CopyID, Func<GameObject, GameObject> MapInv = null)
	{
		List<IPart> list = new List<IPart>(PartsList.Count + (8 - PartsList.Count % 8));
		list.Clear();
		list.AddRange(PartsList);
		foreach (IPart item in list)
		{
			if (PartsList.Contains(item))
			{
				item.FinalizeCopyEarly(Source, CopyEffects, CopyID, MapInv);
			}
		}
		list.Clear();
		list.AddRange(PartsList);
		foreach (IPart item2 in list)
		{
			if (PartsList.Contains(item2))
			{
				item2.FinalizeCopy(Source, CopyEffects, CopyID, MapInv);
			}
		}
		list.Clear();
		list.AddRange(PartsList);
		foreach (IPart item3 in list)
		{
			if (PartsList.Contains(item3))
			{
				item3.FinalizeCopyLate(Source, CopyEffects, CopyID, MapInv);
			}
		}
	}

	public void WasUnstackedFrom(LargerFolk_GameObject Object)
	{
		if (Effects == null)
		{
			return;
		}
		int i = 0;
		for (int count = Effects.Count; i < count; i++)
		{
			Effect effect = Effects[i];
			effect.WasUnstackedFrom(Object);
			if (count != Effects.Count)
			{
				count = Effects.Count;
				if (i < count && Effects[i] != effect)
				{
					i--;
				}
			}
		}
	}

	public bool StripContents(bool KeepNatural = false, bool Silent = false)
	{
		StripContentsEvent E = StripContentsEvent.FromPool(this, KeepNatural, Silent);
		bool result = HandleEvent(E);
		PooledEvent<StripContentsEvent>.ResetTo(ref E);
		return result;
	}

	public GameObjectBlueprint GetBlueprint(bool UseDefault = true)
	{
		if (_BlueprintCache != null || GameObjectFactory.Factory.Blueprints.TryGetValue(Blueprint, out _BlueprintCache))
		{
			return _BlueprintCache;
		}
		if (!UseDefault)
		{
			return null;
		}
		MetricsManager.LogError(new Exception("GameObject::GetBlueprint() Unknown Blueprint " + Blueprint));
		return GameObjectFactory.Factory.Blueprints["Object"];
	}

	public void SetBlueprint(GameObjectBlueprint Blueprint)
	{
		this.Blueprint = Blueprint.Name;
		_BlueprintCache = Blueprint;
	}

	public void CombatJuiceWait(float t)
	{
		int num = (int)(t * 1000f / 10f);
		if (lastWaitTurn != XRL.The.Game.Turns)
		{
			Keyboard.ClearInput();
			lastWaitTurn = XRL.The.Game.Turns;
		}
		for (int i = 0; i < num; i++)
		{
			if (Keyboard.kbhit())
			{
				break;
			}
			Thread.Sleep(10);
		}
	}

	public ActivatedAbilities RequireAbilities()
	{
		if (Abilities == null)
		{
			AddPart(new ActivatedAbilities());
		}
		return Abilities;
	}

	public void SetAlliedLeader<T>(LargerFolk_GameObject Object) where T : IAllyReason, new()
	{
		Brain?.SetAlliedLeader<T>(Object);
	}

	public void TakeAllegiance<T>(LargerFolk_GameObject Object) where T : IAllyReason, new()
	{
		Brain?.TakeAllegiance<T>(Object);
	}

	public void TakeBaseAllegiance(LargerFolk_GameObject Object)
	{
		Brain?.TakeBaseAllegiance(Object);
	}

	public void TakeDemeanor(LargerFolk_GameObject Object)
	{
		Brain?.TakeDemeanor(Object);
	}

	public void CopyTarget(LargerFolk_GameObject Object)
	{
		if (Brain != null)
		{
			Brain.Target = Object?.Brain?.Target;
		}
	}

	public void CopyLeader(LargerFolk_GameObject Object)
	{
		if (Brain != null)
		{
			Brain.PartyLeader = Object?.Brain?.PartyLeader;
		}
	}

	public bool SupportsFollower(LargerFolk_GameObject Object)
	{
		return Brain?.PartyMembers?.ContainsKey(Object.BaseID) == true;
	}

	public bool SupportsFollower(LargerFolk_GameObject Object, int Mask)
	{
		if (Brain == null)
		{
			return false;
		}
		if (!Brain.PartyMembers.TryGetValue(Object.BaseID, out var value))
		{
			return false;
		}
		return value.Flags.HasBit(Mask);
	}

	public Brain.AllegianceLevel GetAllegianceLevel(string Faction)
	{
		return Brain?.GetAllegianceLevel(Faction) ?? Brain.AllegianceLevel.None;
	}

	public bool IsMemberOfFaction(string Faction)
	{
		return GetAllegianceLevel(Faction) != Brain.AllegianceLevel.None;
	}

	public bool TakeOnAttitudesOf(LargerFolk_GameObject Object, bool CopyLeader = false, bool CopyTarget = false)
	{
		return Brain?.TakeOnAttitudesOf(Object, CopyLeader, CopyTarget) ?? false;
	}

	public bool Owns(string Owner)
	{
		if (Owner.IsNullOrEmpty())
		{
			return false;
		}
		return GetAllegianceLevel(Owner) == Brain.AllegianceLevel.Member;
	}

	public bool Owns(LargerFolk_GameObject Object)
	{
		return Owns(Object?.Owner);
	}

	public bool IsNatural()
	{
		if (!HasPropertyOrTag("Natural"))
		{
			return HasPropertyOrTag("NaturalGear");
		}
		return true;
	}

	private string GetDirectionFromCellXY(int X, int Y, bool showCenter = false)
	{
		switch (Y)
		{
		case 0:
			switch (X)
			{
			case 0:
				return "NW";
			case 1:
				return "N";
			case 2:
				return "NE";
			}
			break;
		case 2:
			switch (X)
			{
			case 0:
				return "SW";
			case 1:
				return "S";
			case 2:
				return "SE";
			}
			break;
		default:
			switch (X)
			{
			case 0:
				return "W";
			case 2:
				return "E";
			}
			break;
		}
		if (!showCenter)
		{
			return null;
		}
		return "C";
	}

	public void PullDown(bool AllowAlternate = false)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null || !currentCell.OnWorldMap() || !IsPlayer())
		{
			return;
		}
		if (HasTagOrProperty("DisallowAlternatePullDown"))
		{
			AllowAlternate = false;
		}
		XRLGame game = XRLCore.Core.Game;
		GameObject firstObjectWithPart = currentCell.GetFirstObjectWithPart(typeof(TerrainNotes));
		string zoneWorld = game.ZoneManager.ActiveZone.GetZoneWorld();
		string stringGameState = XRLCore.Core.Game.GetStringGameState("LastLocationOnSurface");
		int x = currentCell.X;
		int y = currentCell.Y;
		string text = null;
		JournalMapNote journalMapNote = null;
		Point3D landingLocation = game.ZoneManager.GetLandingLocation(zoneWorld, x, y);
		int num = landingLocation.x;
		int num2 = landingLocation.y;
		int z = landingLocation.z;
		if (!BeforeTravelDownEvent.Check(this, zoneWorld, currentCell, firstObjectWithPart, landingLocation))
		{
			return;
		}
		if (AllowAlternate)
		{
			List<string> list = new List<string>();
			List<char> list2 = new List<char>();
			List<PullDownChoice> list3 = new List<PullDownChoice>();
			char c = 'a';
			if (!stringGameState.IsNullOrEmpty())
			{
				string item = "Current location";
				Cell cell = Cell.FromAddress(stringGameState);
				if (cell != null && ZoneID.Parse(cell.ParentZone?.ZoneID, out var _, out var _, out var ZoneX, out var ZoneY))
				{
					GetDirectionFromCellXY(ZoneX, ZoneY, showCenter: true);
					list.Add(item);
					list2.Add((c <= 'z') ? c++ : ' ');
					list3.Add(new PullDownChoice
					{
						location = stringGameState,
						X = ZoneX,
						Y = ZoneY
					});
				}
				if (list.Count == 0)
				{
					list.Add(item);
					list2.Add((c <= 'z') ? c++ : ' ');
					list3.Add(new PullDownChoice
					{
						location = stringGameState,
						X = num,
						Y = num2
					});
				}
			}
			list.Add((num == 1 && num2 == 1) ? "Center" : "Arrival location");
			list2.Add(c++);
			list3.Add(new PullDownChoice
			{
				X = num,
				Y = num2
			});
			if (firstObjectWithPart != null)
			{
				TerrainNotes part = firstObjectWithPart.GetPart<TerrainNotes>();
				if (part != null && part.notes != null)
				{
					foreach (JournalMapNote note in part.notes)
					{
						if (note.ZoneZ != 10)
						{
							continue;
						}
						bool flag = false;
						int i = 0;
						for (int count = list3.Count; i < count; i++)
						{
							PullDownChoice pullDownChoice = list3[i];
							if (pullDownChoice.location == null && pullDownChoice.X == note.ZoneX && pullDownChoice.Y == note.ZoneY)
							{
								List<string> list4 = list;
								int index = i;
								list4[index] = list4[index] + ", " + note.GetShortText();
								flag = true;
								break;
							}
						}
						if (!flag)
						{
							list.Add(note.GetShortText());
							list2.Add(c++);
							list3.Add(new PullDownChoice
							{
								X = note.ZoneX,
								Y = note.ZoneY
							});
						}
					}
				}
			}
			if (list3.Count > 1)
			{
				int j = 0;
				for (int count2 = list3.Count; j < count2; j++)
				{
					PullDownChoice pullDownChoice2 = list3[j];
					string directionFromCellXY = GetDirectionFromCellXY(pullDownChoice2.X, pullDownChoice2.Y);
					if (!directionFromCellXY.IsNullOrEmpty())
					{
						List<string> list4 = list;
						int index = j;
						list4[index] = list4[index] + " (" + directionFromCellXY + ")";
					}
					else
					{
						list[j] += " (C)";
					}
				}
				int num3 = Popup.PickOption("Select a destination", null, "", "Sounds/UI/ui_notification", list.ToArray(), list2.ToArray(), null, null, null, null, null, 1, 60, 0, -1, AllowEscape: true);
				if (num3 < 0)
				{
					return;
				}
				text = list3[num3].location;
				num = list3[num3].X;
				num2 = list3[num3].Y;
			}
			else if (list3.Count == 1)
			{
				text = list3[0].location;
				num = list3[0].X;
				num2 = list3[0].Y;
			}
		}
		if (text != null)
		{
			Cell cell2 = Cell.FromAddress(stringGameState);
			if (cell2 != null)
			{
				PlayWorldOrUISound("sfx_worldMap_exit", null);
				DirectMoveTo(cell2, 0, Forced: false, IgnoreCombat: true);
				return;
			}
		}
		if (journalMapNote != null)
		{
			num = journalMapNote.ZoneX;
			num2 = journalMapNote.ZoneY;
		}
		Zone zone = XRL.The.ZoneManager.GetZone(zoneWorld, x, y, num, num2, z);
		Cell pullDownLocation = zone.GetPullDownLocation(this);
		if (pullDownLocation == null)
		{
			MetricsManager.LogError("failed to get pulldown location from " + zone.ZoneID);
		}
		else if (stringGameState.IsNullOrEmpty())
		{
			PlayWorldOrUISound("sfx_worldMap_exit", null);
			SystemMoveTo(pullDownLocation, 0);
		}
		else
		{
			PlayWorldOrUISound("sfx_worldMap_exit", null);
			SystemLongDistanceMoveTo(pullDownLocation, 0);
		}
		zone.CheckWeather();
	}

	public void FinalizeStats()
	{
		Energy = Statistics.GetValue("Energy");
		foreach (Statistic value4 in Statistics.Values)
		{
			if (!(value4.sValue != ""))
			{
				continue;
			}
			if (value4.sValue == "*XP")
			{
				float num = Statistics["Level"].Value;
				num /= 2f;
				switch (GetPropertyOrTag("Role", "Minion"))
				{
				case "Minion":
					value4.BaseValue = (int)(num * 20f);
					break;
				case "Leader":
					value4.BaseValue = (int)(num * 100f);
					break;
				case "Hero":
					value4.BaseValue = (int)(num * 200f);
					break;
				default:
					value4.BaseValue = (int)(num * 50f);
					break;
				}
				continue;
			}
			if (GetPropertyOrTag("Role", "NPC") == "Minion" && (value4.Name == "Strength" || value4.Name == "Agility" || value4.Name == "Toughness" || value4.Name == "Willpower" || value4.Name == "Intelligence" || value4.Name == "Ego"))
			{
				value4.Boost--;
			}
			int num2 = 0;
			int num3 = 0;
			if (Statistics.TryGetValue("Level", out var value))
			{
				num3 = value.Value / 5 + 1;
			}
			if (value4.sValue.Contains(","))
			{
				string[] array = value4.sValue.Split(',');
				for (int i = 0; i < array.Length; i++)
				{
					if (array[i].Contains("("))
					{
						if (array[i].Contains("(t)"))
						{
							array[i] = array[i].Replace("(t)", num3.ToString());
						}
						if (array[i].Contains("(t-1)"))
						{
							array[i] = array[i].Replace("(t-1)", (num3 - 1).ToString());
						}
						if (array[i].Contains("(t+1)"))
						{
							array[i] = array[i].Replace("(t+1)", (num3 + 1).ToString());
						}
						array[i] = array[i].Replace("(v)", value4.BaseValue.ToString());
					}
				}
				for (int j = 0; j < array.Length; j++)
				{
					num2 += array[j].RollCached();
				}
			}
			else
			{
				string text = value4.sValue;
				if (text.Contains("("))
				{
					if (text.Contains("(t)"))
					{
						text = text.Replace("(t)", num3.ToString());
					}
					if (text.Contains("(t-1)"))
					{
						text = text.Replace("(t-1)", (num3 - 1).ToString());
					}
					if (text.Contains("(t+1)"))
					{
						text = text.Replace("(t+1)", (num3 + 1).ToString());
					}
					text = text.Replace("(v)", value4.BaseValue.ToString());
				}
				num2 += text.RollCached();
			}
			value4.BaseValue = num2;
			if (value4.Boost > 0)
			{
				value4.BaseValue += (int)Math.Ceiling((float)num2 * 0.25f * (float)value4.Boost);
			}
			else
			{
				value4.BaseValue += (int)Math.Ceiling((float)num2 * 0.2f * (float)value4.Boost);
			}
		}
		if (Statistics.TryGetValue("XP", out var value2) && Statistics.TryGetValue("Level", out var value3))
		{
			value2.BaseValue = Leveler.GetXPForLevel(value3.Value);
		}
	}

	public bool HasLongProperty(string Name)
	{
		if (Name != null && Property.TryGetValue(Name, out var value))
		{
			try
			{
				Convert.ToInt64(value);
				return true;
			}
			catch
			{
			}
		}
		return false;
	}

	public long GetLongProperty(string Name, long Default = 0L)
	{
		if (Name != null && Property.TryGetValue(Name, out var value))
		{
			try
			{
				return Convert.ToInt64(value);
			}
			catch
			{
			}
		}
		return Default;
	}

	public string GetStringProperty(string Name, string Default = null)
	{
		if (Property.TryGetValue(Name, out var value))
		{
			return value;
		}
		return Default;
	}

	public void SetStringProperty(string Name, string Value, bool RemoveIfNull = false)
	{
		if (Name != null)
		{
			if (RemoveIfNull && Value == null)
			{
				Property.Remove(Name);
			}
			else
			{
				Property[Name] = Value;
			}
		}
	}

	public void RemoveStringProperty(string Name)
	{
		if (Name != null)
		{
			Property.Remove(Name);
		}
	}

	public void DeleteStringProperty(string sProperty)
	{
		RemoveStringProperty(sProperty);
	}

	public bool TryGetStringProperty(string Name, out string Result)
	{
		return Property.TryGetValue(Name, out Result);
	}

	public int GetIntProperty(string Name, int Default = 0)
	{
		if (Name == null)
		{
			return Default;
		}
		if (IntProperty.TryGetValue(Name, out var value))
		{
			return value;
		}
		return Default;
	}

	public int? GetIntPropertyIfSet(string Name)
	{
		if (Name != null && IntProperty.TryGetValue(Name, out var value))
		{
			return value;
		}
		return null;
	}

	public bool TryGetIntProperty(string Name, out int Result)
	{
		return IntProperty.TryGetValue(Name, out Result);
	}

	public void SetLongProperty(string sProperty, long Value)
	{
		if (!Property.ContainsKey(sProperty))
		{
			Property.Add(sProperty, Value.ToString());
		}
		else
		{
			Property[sProperty] = Value.ToString();
		}
	}

	public bool canPathTo(Cell TC, bool Global = false)
	{
		if (TC == null || TC.ParentZone == null)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone == null)
		{
			return false;
		}
		return new FindPath(currentCell.ParentZone.ZoneID, currentCell.X, currentCell.Y, TC.ParentZone.ZoneID, TC.X, TC.Y, Global, PathUnlimited: false, this).Usable;
	}

	public LargerFolk_GameObject SetIntProperty(string Name, int Value, bool RemoveIfZero = false)
	{
		if (!RemoveIfZero || Value != 0)
		{
			IntProperty[Name] = Value;
		}
		else
		{
			IntProperty.Remove(Name);
		}
		return this;
	}

	public int ModIntProperty(string Name, int Value, bool RemoveIfZero = false)
	{
		if (!IntProperty.TryGetValue(Name, out var value))
		{
			if (!RemoveIfZero || Value != 0)
			{
				IntProperty.Add(Name, Value);
			}
			return Value;
		}
		int num = value + Value;
		if (!RemoveIfZero || num != 0)
		{
			IntProperty[Name] = num;
		}
		else
		{
			IntProperty.Remove(Name);
		}
		return num;
	}

	public void RemoveIntProperty(string Name)
	{
		if (Name != null && _IntProperty != null)
		{
			_IntProperty.Remove(Name);
		}
	}

	public void RemoveProperty(string Name)
	{
		RemoveStringProperty(Name);
		RemoveIntProperty(Name);
	}

	public int GetStatValue(string Stat, int DefaultValue = 0)
	{
		if (Statistics != null && Statistics.TryGetValue(Stat, out var value))
		{
			return value.Value;
		}
		return DefaultValue;
	}

	public bool CanGainMP()
	{
		return Statistics.ContainsKey("MP");
	}

	public bool GainMP(int amount)
	{
		if (Statistics.TryGetValue("MP", out var value))
		{
			value.BaseValue += amount;
			FireEvent(Event.New("GainedMP", "Amount", amount));
			return true;
		}
		return false;
	}

	public bool UseMP(int amount, string context = "default")
	{
		if (Statistics.TryGetValue("MP", out var value))
		{
			value.Penalty += amount;
			FireEvent(Event.New("UsedMP", "Amount", amount, "Context", context));
			return true;
		}
		return false;
	}

	public bool HasStat(string Name)
	{
		if (Statistics != null)
		{
			return Statistics.ContainsKey(Name);
		}
		return false;
	}

	public Statistic GetStat(string Name)
	{
		if (Name.IsNullOrEmpty())
		{
			return null;
		}
		if (Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			return value;
		}
		return null;
	}

	public int Stat(string Name, int Default = 0)
	{
		if (Name.IsNullOrEmpty() || Statistics == null)
		{
			return Default;
		}
		if (Statistics.TryGetValue(Name, out var value))
		{
			return value.Value;
		}
		return Default;
	}

	public int BaseStat(string Name, int Default = 0)
	{
		if (Name.IsNullOrEmpty() || Statistics == null)
		{
			return Default;
		}
		if (Statistics.TryGetValue(Name, out var value))
		{
			return value.BaseValue;
		}
		return Default;
	}

	public int StatMod(string Name, int Default = 0)
	{
		if (Name.IsNullOrEmpty() || Statistics == null)
		{
			return Default;
		}
		if (Name.IndexOf(',') != -1)
		{
			int num = int.MinValue;
			bool flag = false;
			foreach (string item in Name.CachedCommaExpansion())
			{
				if (Statistics.TryGetValue(item, out var value))
				{
					flag = true;
					int modifier = value.Modifier;
					if (modifier > num)
					{
						num = modifier;
					}
				}
			}
			if (!flag)
			{
				return Default;
			}
			return num;
		}
		if (Statistics.TryGetValue(Name, out var value2))
		{
			return value2.Modifier;
		}
		return Default;
	}

	public void AddStatBonus(string Name, int Amount)
	{
		if (!Name.IsNullOrEmpty() && Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			value.Bonus += Amount;
		}
	}

	public void AddStatPenalty(string Name, int Amount)
	{
		if (!Name.IsNullOrEmpty() && Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			value.Penalty += Amount;
		}
	}

	public void AddBaseStat(string Name, int Amount)
	{
		if (!Name.IsNullOrEmpty() && Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			value.BaseValue += Amount;
		}
	}

	public void BoostStat(string Name, int Amount)
	{
		if (!Name.IsNullOrEmpty() && Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			value.BoostStat(Amount);
		}
	}

	public void BoostStat(string Name, double Amount)
	{
		if (!Name.IsNullOrEmpty() && Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			value.BoostStat(Amount);
		}
	}

	public void MultiplyStat(string Name, int Factor)
	{
		if (!Name.IsNullOrEmpty() && Statistics != null && Statistics.TryGetValue(Name, out var value))
		{
			value.BaseValue *= Factor;
		}
	}

	[Obsolete("You may want to switch to using the new StatShifter API")]
	public bool ApplyStatShift(string Name, int Amount)
	{
		if (Name.IsNullOrEmpty() || Statistics == null)
		{
			return false;
		}
		if (!Statistics.TryGetValue(Name, out var value))
		{
			return false;
		}
		if (Amount > 0)
		{
			value.Bonus += Amount;
		}
		else if (Amount < 0)
		{
			value.Penalty += -Amount;
		}
		return true;
	}

	[Obsolete("You may want to switch to using the new StatShifter API")]
	public bool UnapplyStatShift(string Name, int Amount)
	{
		if (Name.IsNullOrEmpty())
		{
			return false;
		}
		if (!Statistics.TryGetValue(Name, out var value))
		{
			return false;
		}
		if (Amount > 0)
		{
			value.Bonus -= Amount;
		}
		else if (Amount < 0)
		{
			value.Penalty -= -Amount;
		}
		return true;
	}

	public void ShowActiveEffects()
	{
		ScreenBuffer scrapBuffer = ScreenBuffer.GetScrapBuffer1(bLoadFromCurrent: true);
		StringBuilder stringBuilder = new StringBuilder();
		int num = 0;
		foreach (Effect effect in Effects)
		{
			if (effect.GetDescription() != null)
			{
				if (num != 0)
				{
					stringBuilder.AppendLine();
				}
				stringBuilder.AppendLine("{{Y|");
				stringBuilder.AppendLine(effect.GetDescription());
				stringBuilder.Append("}}  ");
				stringBuilder.AppendLine(Campfire.ProcessEffectDescription(effect.GetDetails(), this).Replace("\n", "\n  "));
				num++;
			}
		}
		if (num <= 0)
		{
			if (IsPlayer())
			{
				BookUI.ShowBook("No active effects.", "&WActive Effects&Y - " + DisplayName);
			}
			else
			{
				BookUI.ShowBook("No active effects.", "&WActive Effects&Y - " + DisplayName);
			}
		}
		else
		{
			BookUI.ShowBook(stringBuilder.ToString(), "&WActive Effects&Y - " + DisplayName);
		}
		scrapBuffer.Draw();
	}

	public List<LargerFolk_GameObject> GetEquippedObjects()
	{
		return Body?.GetEquippedObjects();
	}

	public List<LargerFolk_GameObject> GetEquippedObjectsReadonly()
	{
		return Body?.GetEquippedObjectsReadonly();
	}

	public void GetEquippedObjects(List<LargerFolk_GameObject> result)
	{
		Body?.GetEquippedObjects(result);
	}

	public bool HasInstalledCybernetics(string Blueprint = null, Predicate<LargerFolk_GameObject> Filter = null)
	{
		return Body?.HasInstalledCybernetics(Blueprint, Filter) ?? false;
	}

	public List<LargerFolk_GameObject> GetInstalledCybernetics()
	{
		return Body?.GetInstalledCybernetics();
	}

	public List<LargerFolk_GameObject> GetInstalledCyberneticsReadonly()
	{
		return Body?.GetInstalledCyberneticsReadonly();
	}

	public void GetInstalledCybernetics(List<LargerFolk_GameObject> result)
	{
		Body?.GetInstalledCybernetics(result);
	}

	public List<LargerFolk_GameObject> GetEquippedObjectsAndInstalledCybernetics()
	{
		return Body?.GetEquippedObjectsAndInstalledCybernetics();
	}

	public List<LargerFolk_GameObject> GetEquippedObjectsAndInstalledCyberneticsReadonly()
	{
		return Body?.GetEquippedObjectsAndInstalledCyberneticsReadonly();
	}

	public void GetEquippedObjectsAndInstalledCybernetics(List<LargerFolk_GameObject> result)
	{
		Body?.GetEquippedObjectsAndInstalledCybernetics(result);
	}

	public List<LargerFolk_GameObject> GetWholeInventory()
	{
		List<LargerFolk_GameObject> list = new List<LargerFolk_GameObject>();
		Inventory?.GetObjects(list);
		Body body = Body;
		if (body != null)
		{
			body.GetEquippedObjects(list);
			body.GetInstalledCybernetics(list);
		}
		return list;
	}

	public List<LargerFolk_GameObject> GetWholeInventoryReadonly()
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		Inventory?.GetObjects(list);
		Body body = Body;
		if (body != null)
		{
			body.GetEquippedObjects(list);
			body.GetInstalledCybernetics(list);
		}
		return list;
	}

	public List<LargerFolk_GameObject> GetInventory()
	{
		return Inventory?.GetObjects() ?? new List<LargerFolk_GameObject>();
	}

	public void GetInventory(List<LargerFolk_GameObject> Store)
	{
		Inventory?.GetObjects(Store);
	}

	public void GetInventoryDirect(List<LargerFolk_GameObject> Store)
	{
		Inventory?.GetObjectsDirect(Store);
	}

	public List<LargerFolk_GameObject> GetInventory(Predicate<LargerFolk_GameObject> Filter)
	{
		return Inventory?.GetObjects(Filter) ?? new List<LargerFolk_GameObject>();
	}

	public List<LargerFolk_GameObject> GetInventoryDirect(Predicate<LargerFolk_GameObject> Filter)
	{
		return Inventory?.GetObjectsDirect(Filter) ?? new List<LargerFolk_GameObject>();
	}

	public List<LargerFolk_GameObject> GetInventoryAndEquipmentAndDefaultEquipment()
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjects();
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects();
		int capacity = (list?.Count ?? 0) + (list2?.Count ?? 0);
		List<LargerFolk_GameObject> result = new List<LargerFolk_GameObject>(capacity);
		if (list != null)
		{
			result.AddRange(list);
		}
		if (list2 != null)
		{
			result.AddRange(list2);
		}
		Body?.ForeachDefaultBehavior(delegate(LargerFolk_GameObject d)
		{
			if (d != null)
			{
				result.Add(d);
			}
		});
		return result;
	}

	public List<LargerFolk_GameObject> GetInventoryAndEquipment()
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjects();
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects();
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public void GetInventoryAndEquipment(List<LargerFolk_GameObject> Store)
	{
		Body?.GetEquippedObjects(Store);
		Inventory?.GetObjects(Store);
	}

	public List<LargerFolk_GameObject> GetInventoryAndEquipment(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = (HasPart<Inventory>() ? Inventory.GetObjects(Filter) : null);
		List<LargerFolk_GameObject> list2 = (HasPart<Body>() ? Body.GetEquippedObjects(Filter) : null);
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public List<LargerFolk_GameObject> GetInventoryAndEquipment(List<LargerFolk_GameObject> Store, Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = (HasPart<Inventory>() ? Inventory.GetObjects(Filter) : null);
		List<LargerFolk_GameObject> list2 = (HasPart<Body>() ? Body.GetEquippedObjects(Filter) : null);
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public List<LargerFolk_GameObject> GetInventoryAndEquipmentReadonly()
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryAndEquipment(list);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryAndEquipmentReadonly(Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			return GetInventoryAndEquipmentReadonly();
		}
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryAndEquipment(list, Filter);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectAndEquipment()
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjectsDirect();
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects();
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectAndEquipmentAndAdjacentCells(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjectsDirect(Filter);
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects(Filter);
		int capacity = (list?.Count ?? 0) + (list2?.Count ?? 0);
		List<LargerFolk_GameObject> result = new List<LargerFolk_GameObject>(capacity);
		if (list != null)
		{
			result.AddRange(list);
		}
		if (list2 != null)
		{
			result.AddRange(list2);
		}
		CurrentCell?.ForeachLocalAdjacentCellAndSelf(delegate(Cell c)
		{
			if (c != null)
			{
				result.AddRange(c.GetObjects(Filter));
			}
		});
		return result;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectAndEquipment(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjectsDirect(Filter);
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects(Filter);
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public void GetInventoryDirectAndEquipment(List<LargerFolk_GameObject> Store)
	{
		Body?.GetEquippedObjects(Store);
		Inventory?.GetObjectsDirect(Store);
	}

	public void GetInventoryDirectAndEquipment(List<LargerFolk_GameObject> Store, Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			GetInventoryDirectAndEquipment(Store);
			return;
		}
		Body?.GetEquippedObjects(Store, Filter);
		Inventory?.GetObjectsDirect(Store, Filter);
	}

	public List<LargerFolk_GameObject> GetInventoryDirectAndEquipmentReadonly()
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryDirectAndEquipment(list);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectAndEquipmentReadonly(Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			return GetInventoryDirectAndEquipmentReadonly();
		}
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryDirectAndEquipment(list, Filter);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryEquipmentAndCybernetics()
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjects();
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects();
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public void GetInventoryEquipmentAndCybernetics(List<LargerFolk_GameObject> Store)
	{
		Body?.GetEquippedObjects(Store);
		Inventory?.GetObjects(Store);
	}

	public List<LargerFolk_GameObject> GetInventoryEquipmentAndCybernetics(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = (HasPart<Inventory>() ? Inventory.GetObjects(Filter) : null);
		List<LargerFolk_GameObject> list2 = (HasPart<Body>() ? Body.GetEquippedObjects(Filter) : null);
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public List<LargerFolk_GameObject> GetInventoryEquipmentAndCybernetics(List<LargerFolk_GameObject> Store, Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = (HasPart<Inventory>() ? Inventory.GetObjects(Filter) : null);
		List<LargerFolk_GameObject> list2 = (HasPart<Body>() ? Body.GetEquippedObjects(Filter) : null);
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public List<LargerFolk_GameObject> GetInventoryEquipmentAndCyberneticsReadonly()
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryEquipmentAndCybernetics(list);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryEquipmentAndCyberneticsReadonly(Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			return GetInventoryEquipmentAndCyberneticsReadonly();
		}
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryEquipmentAndCybernetics(list, Filter);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectEquipmentAndCybernetics()
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjectsDirect();
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects();
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectEquipmentAndCybernetics(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = Inventory?.GetObjectsDirect(Filter);
		List<LargerFolk_GameObject> list2 = Body?.GetEquippedObjects(Filter);
		List<LargerFolk_GameObject> list3 = new List<LargerFolk_GameObject>((list?.Count ?? 0) + (list2?.Count ?? 0));
		if (list != null)
		{
			list3.AddRange(list);
		}
		if (list2 != null)
		{
			list3.AddRange(list2);
		}
		return list3;
	}

	public void GetInventoryDirectEquipmentAndCybernetics(List<LargerFolk_GameObject> Store)
	{
		Body?.GetEquippedObjects(Store);
		Inventory?.GetObjectsDirect(Store);
	}

	public void GetInventoryDirectEquipmentAndCybernetics(List<LargerFolk_GameObject> Store, Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			GetInventoryDirectEquipmentAndCybernetics(Store);
			return;
		}
		Body?.GetEquippedObjects(Store, Filter);
		Inventory?.GetObjectsDirect(Store, Filter);
	}

	public List<LargerFolk_GameObject> GetInventoryDirectEquipmentAndCyberneticsReadonly()
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryDirectEquipmentAndCybernetics(list);
		return list;
	}

	public List<LargerFolk_GameObject> GetInventoryDirectEquipmentAndCyberneticsReadonly(Predicate<LargerFolk_GameObject> Filter)
	{
		if (Filter == null)
		{
			return GetInventoryDirectEquipmentAndCyberneticsReadonly();
		}
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetInventoryDirectEquipmentAndCybernetics(list, Filter);
		return list;
	}

	public void ForeachEquippedObject(Action<LargerFolk_GameObject> Proc)
	{
		Body?.ForeachEquippedObject(Proc);
	}

	public void SafeForeachEquippedObject(Action<LargerFolk_GameObject> Proc)
	{
		Body?.SafeForeachEquippedObject(Proc);
	}

	public void ForeachInstalledCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Body?.ForeachInstalledCybernetics(Proc);
	}

	public void SafeForeachInstalledCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Body?.SafeForeachInstalledCybernetics(Proc);
	}

	public void ForeachEquipmentAndCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Body body = Body;
		if (body != null)
		{
			body.ForeachEquippedObject(Proc);
			body.ForeachInstalledCybernetics(Proc);
		}
	}

	public void SafeForeachEquipmentAndCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Body body = Body;
		if (body != null)
		{
			body.SafeForeachEquippedObject(Proc);
			body.SafeForeachInstalledCybernetics(Proc);
		}
	}

	public void ForeachInventoryAndEquipment(Action<LargerFolk_GameObject> Proc)
	{
		Inventory?.ForeachObject(Proc);
		Body?.ForeachEquippedObject(Proc);
	}

	public void SafeForeachInventoryAndEquipment(Action<LargerFolk_GameObject> Proc)
	{
		Inventory?.SafeForeachObject(Proc);
		Body?.SafeForeachEquippedObject(Proc);
	}

	public void ForeachInventoryEquipmentAndCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Inventory?.ForeachObject(Proc);
		Body body = Body;
		if (body != null)
		{
			body.ForeachEquippedObject(Proc);
			body.ForeachInstalledCybernetics(Proc);
		}
	}

	public void SafeForeachInventoryEquipmentAndCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Inventory?.SafeForeachObject(Proc);
		Body body = Body;
		if (body != null)
		{
			body.SafeForeachEquippedObject(Proc);
			body.SafeForeachInstalledCybernetics(Proc);
		}
	}

	public void ForeachInventoryEquipmentDefaultBehaviorAndCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Inventory?.ForeachObject(Proc);
		Body body = Body;
		if (body != null)
		{
			body.ForeachEquippedObject(Proc);
			body.ForeachDefaultBehavior(Proc);
			body.ForeachInstalledCybernetics(Proc);
		}
	}

	public void SafeForeachInventoryEquipmentDefaultBehaviorAndCybernetics(Action<LargerFolk_GameObject> Proc)
	{
		Inventory?.SafeForeachObject(Proc);
		Body body = Body;
		if (body != null)
		{
			body.SafeForeachEquippedObject(Proc);
			body.SafeForeachDefaultBehavior(Proc);
			body.SafeForeachInstalledCybernetics(Proc);
		}
	}

	public bool EquipObject(LargerFolk_GameObject Object, BodyPart Part, bool Silent = false, int? EnergyCost = null)
	{
		Event @event = Event.New("CommandEquipObject", "Object", Object, "BodyPart", Part);
		if (EnergyCost.HasValue)
		{
			@event.SetParameter("EnergyCost", EnergyCost.Value);
		}
		if (Silent)
		{
			@event.SetSilent(Silent);
		}
		return FireEvent(@event);
	}

	public bool EquipObject(LargerFolk_GameObject Object, string Slot, bool Silent = false, int? EnergyCost = null)
	{
		Body body = Body;
		if (body == null)
		{
			Debug.LogError("Object with blueprint " + Blueprint + " had no body to equip on");
			return false;
		}
		BodyPart firstPart = body.GetFirstPart(Slot);
		if (body == null)
		{
			Debug.LogError("Object with blueprint " + Blueprint + " had no " + Slot + " body part to equip on");
			return false;
		}
		return EquipObject(Object, firstPart, Silent, null);
	}

	public bool ForceEquipObject(LargerFolk_GameObject Object, BodyPart Part, bool Silent = false, int? EnergyCost = null)
	{
		Event @event = Event.New("CommandForceEquipObject");
		@event.SetParameter("Object", Object);
		@event.SetParameter("BodyPart", Part);
		if (EnergyCost.HasValue)
		{
			@event.SetParameter("EnergyCost", EnergyCost.Value);
		}
		if (Silent)
		{
			@event.SetSilent(Silent);
		}
		return FireEvent(@event);
	}

	public bool ForceEquipObject(LargerFolk_GameObject Object, string Slot, bool Silent = false, int? EnergyCost = null)
	{
		Body body = Body;
		if (body == null)
		{
			Debug.LogError("Object with blueprint " + Blueprint + " had no body to equip on");
			return false;
		}
		BodyPart firstPart = body.GetFirstPart(Slot);
		if (body == null)
		{
			Debug.LogError("Object with blueprint " + Blueprint + " had no " + Slot + " body part to equip on");
			return false;
		}
		return ForceEquipObject(Object, firstPart, Silent, EnergyCost);
	}

	public bool IsNonStackableFromParts()
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (!PartsList[i].SameAs(PartsList[i]))
			{
				return true;
			}
		}
		return false;
	}

	public bool IsStackable()
	{
		if (HasIntProperty("NeverStack"))
		{
			return false;
		}
		if (IsNonStackableFromParts())
		{
			return false;
		}
		return true;
	}

	public bool PartsPreventGeneratingStacked()
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (!PartsList[i].CanGenerateStacked())
			{
				return true;
			}
		}
		return false;
	}

	public bool CanGenerateStacked()
	{
		if (HasIntProperty("NeverStack"))
		{
			return false;
		}
		if (HasTag("AlwaysStack"))
		{
			return true;
		}
		if (PartsPreventGeneratingStacked())
		{
			return false;
		}
		string tag = GetTag("Mods");
		if (!tag.IsNullOrEmpty() && tag != "None")
		{
			return false;
		}
		return true;
	}

	public void TakePopulation(string Population)
	{
		foreach (PopulationResult item in PopulationManager.Generate(Population))
		{
			TakeObject(item.Blueprint, item.Number, NoStack: false, Silent: false, 0);
		}
	}

	public void ReceivePopulation(string Population)
	{
		foreach (PopulationResult item in PopulationManager.Generate(Population))
		{
			ReceiveObject(item.Blueprint, item.Number);
		}
	}

	public int TakeObjectsFromPopulation(string Table, int Number, Dictionary<string, string> Variables = null, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> Tracking = null)
	{
		Dictionary<string, int> dictionary;
		if (TakeObjectsFromTableGenerationInUse)
		{
			dictionary = new Dictionary<string, int>();
		}
		else
		{
			TakeObjectsFromTableGenerationInUse = true;
			dictionary = TakeObjectsFromTableGeneration;
			dictionary.Clear();
		}
		for (int i = 0; i < Number; i++)
		{
			string blueprint = PopulationManager.RollOneFrom(Table, Variables).Blueprint;
			if (!blueprint.IsNullOrEmpty())
			{
				if (dictionary.ContainsKey(blueprint))
				{
					dictionary[blueprint]++;
				}
				else
				{
					dictionary.Add(blueprint, 1);
				}
			}
		}
		int num = 0;
		foreach (KeyValuePair<string, int> item in dictionary)
		{
			int num2 = num;
			string key = item.Key;
			int value = item.Value;
			int bonusModChance = BonusModChance;
			string autoMod = AutoMod;
			num = num2 + TakeObject(key, value, NoStack, Silent, EnergyCost, Context, bonusModChance, SetModNumber, autoMod, Tracking, BeforeObjectCreated, AfterObjectCreated);
		}
		if (dictionary == TakeObjectsFromTableGeneration)
		{
			dictionary.Clear();
			TakeObjectsFromTableGenerationInUse = false;
		}
		return num;
	}

	public bool TakeObjectFromPopulation(string Table, Dictionary<string, string> Variables = null, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> Tracking = null)
	{
		string blueprint = PopulationManager.RollOneFrom(Table, Variables).Blueprint;
		return TakeObject(blueprint, NoStack, Silent, EnergyCost, BonusModChance, SetModNumber, AutoMod, Context, Tracking, BeforeObjectCreated, AfterObjectCreated);
	}

	public int TakeObject(List<LargerFolk_GameObject> List, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, string Context = null, List<LargerFolk_GameObject> Tracking = null)
	{
		int num = 0;
		foreach (LargerFolk_GameObject item in List)
		{
			if (TakeObject(item, NoStack, Silent, EnergyCost, Context, Tracking))
			{
				num++;
			}
		}
		return num;
	}

	public int TakeObject(string Blueprint, int Number, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, string Context = null, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, List<LargerFolk_GameObject> Tracking = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null)
	{
		if (Number <= 0)
		{
			return 0;
		}
		LargerFolk_GameObject gameObject = Create(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context);
		if (Number > 1 && !NoStack && gameObject.CanGenerateStacked() && gameObject.Stacker != null && gameObject.Stacker.StackCount == 1)
		{
			gameObject.Stacker.StackCount = Number;
			if (!TakeObject(gameObject, NoStack: false, Silent, EnergyCost, Context, Tracking))
			{
				return 0;
			}
			return Number;
		}
		int num = 0;
		for (int i = 0; i < Number; i++)
		{
			if (TakeObject(Blueprint, NoStack, Silent, EnergyCost, BonusModChance, SetModNumber, AutoMod, Context, Tracking, BeforeObjectCreated, AfterObjectCreated))
			{
				num++;
			}
		}
		return num;
	}

	public bool TakeObject(string Blueprint, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, string Context = null, List<LargerFolk_GameObject> Tracking = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null)
	{
		return TakeObject(Create(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context), NoStack, Silent, EnergyCost, Context, Tracking);
	}

	public bool TakeObject(string Blueprint, out LargerFolk_GameObject Object, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, string Context = null, List<LargerFolk_GameObject> Tracking = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null)
	{
		Object = Create(Blueprint, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context);
		return TakeObject(Object, NoStack, Silent, EnergyCost, Context, Tracking);
	}

	public bool TakeObject(LargerFolk_GameObject Object, bool NoStack = false, bool Silent = false, int? EnergyCost = 0, string Context = null, List<LargerFolk_GameObject> Tracking = null)
	{
		Event.PinCurrentPool();
		Event @event;
		if (!EnergyCost.HasValue)
		{
			@event = (Silent ? eCommandTakeObjectSilent : eCommandTakeObject);
		}
		else
		{
			@event = (Silent ? eCommandTakeObjectSilentWithEnergyCost : eCommandTakeObjectWithEnergyCost);
			@event.SetParameter("EnergyCost", EnergyCost.Value);
		}
		@event.SetParameter("Object", Object);
		@event.SetParameter("Context", Context);
		@event.SetFlag("NoStack", NoStack);
		bool num = FireEvent(@event);
		Event.ResetToPin();
		if (num)
		{
			Tracking?.Add(Object);
		}
		return num;
	}

	public int ReceiveObjectsFromPopulation(string Table, int Number, Dictionary<string, string> Variables = null, bool NoStack = false, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> Tracking = null)
	{
		return TakeObjectsFromPopulation(Table, Number, Variables, NoStack, Silent: true, 0, 0, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context, Tracking);
	}

	public bool ReceiveObjectFromPopulation(string Table, Dictionary<string, string> Variables = null, bool NoStack = false, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null, List<LargerFolk_GameObject> Tracking = null)
	{
		return TakeObjectsFromPopulation(Table, 1, Variables, NoStack, Silent: true, 0, BonusModChance, SetModNumber, AutoMod, BeforeObjectCreated, AfterObjectCreated, Context, Tracking) > 0;
	}

	public bool ReceiveObject(LargerFolk_GameObject Object, bool NoStack = false, string Context = null)
	{
		return TakeObject(Object, NoStack, Silent: true, 0, Context);
	}

	public bool ReceiveObject(string Blueprint, bool NoStack = false, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null)
	{
		return TakeObject(Blueprint, NoStack, Silent: true, 0, BonusModChance, SetModNumber, AutoMod, Context, null, BeforeObjectCreated, AfterObjectCreated);
	}

	public int ReceiveObject(string Blueprint, int Number, bool NoStack = false, int BonusModChance = 0, int SetModNumber = 0, string AutoMod = null, Action<LargerFolk_GameObject> BeforeObjectCreated = null, Action<LargerFolk_GameObject> AfterObjectCreated = null, string Context = null)
	{
		return TakeObject(Blueprint, Number, NoStack, Silent: true, 0, Context, BonusModChance, SetModNumber, AutoMod, null, BeforeObjectCreated, AfterObjectCreated);
	}

	public int ReceiveObject(List<LargerFolk_GameObject> List, bool NoStack = false, string Context = null)
	{
		int num = 0;
		foreach (LargerFolk_GameObject item in List)
		{
			if (TakeObject(item, NoStack, Silent: true, 0, Context))
			{
				num++;
			}
		}
		return num;
	}

	public bool ForceApplyEffect(Effect E, LargerFolk_GameObject Owner = null)
	{
		if (!ForceApplyEffectEvent.Check(this, E.ClassName, E))
		{
			return ApplyEffect(E);
		}
		ApplyEffectEvent.Check(this, E.ClassName, E, Owner);
		if (!E.CanApplyToStack() && !HasTag("AlwaysStack"))
		{
			SplitStack(1, null, NoRemove: true);
		}
		E.Object = this;
		if (E.Apply(this))
		{
			Effects.Add(E);
			E.ApplyRegistrar(this);
			E.Applied(this);
			EffectForceAppliedEvent.Send(this, E.ClassName, E);
			EffectAppliedEvent.Send(this, E.ClassName, E);
			CheckStack();
			return true;
		}
		CheckStack();
		return false;
	}

	public bool RenderTile(ConsoleChar Char)
	{
		if (_Effects != null)
		{
			for (int i = 0; i < _Effects.Count; i++)
			{
				if (!_Effects[i].RenderTile(Char))
				{
					return false;
				}
			}
		}
		for (int j = 0; j < PartsList.Count; j++)
		{
			if (!PartsList[j].RenderTile(Char))
			{
				return false;
			}
		}
		return true;
	}

	public RenderEvent RenderForUI(bool AsIfKnown = false)
	{
		if (Render == null)
		{
			return null;
		}
		if (_contextRender == null)
		{
			_contextRender = new RenderEvent();
		}
		_contextRender.Reset();
		_contextRender.RenderString = Render.RenderString;
		if (!Render.TileColor.IsNullOrEmpty() && Options.UseTiles)
		{
			_contextRender.ColorString = Render.TileColor;
		}
		else
		{
			_contextRender.ColorString = Render.ColorString;
		}
		_contextRender.DetailColor = Render.DetailColor;
		_contextRender.BackgroundString = Render.GetBackgroundColor();
		_contextRender.HighestLayer = Render.RenderLayer;
		_contextRender.Tile = Render.Tile;
		_contextRender.HFlip = Render.getHFlip();
		_contextRender.VFlip = Render.getVFlip();
		_contextRender.WantsToPaint = false;
		_contextRender.AsIfKnown = AsIfKnown;
		ComponentRender(_contextRender);
		FinalRender(_contextRender, Alt: false);
		if (_contextRender.BackdropBleedthrough)
		{
			Cell cellContext = GetCellContext();
			if (cellContext != null)
			{
				_contextRender.x = cellContext.X;
				_contextRender.y = cellContext.Y;
			}
		}
		return _contextRender;
	}

	public void Paint(ScreenBuffer Buffer)
	{
		if (_Effects != null)
		{
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				_Effects[i].OnPaint(Buffer);
			}
		}
		int j = 0;
		for (int count2 = PartsList.Count; j < count2; j++)
		{
			PartsList[j].OnPaint(Buffer);
		}
	}

	public bool RenderSound(ConsoleChar Char, ConsoleChar[,] Buffer)
	{
		if (_Effects != null)
		{
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (!_Effects[i].RenderSound(Char))
				{
					return false;
				}
			}
		}
		int j = 0;
		for (int count2 = PartsList.Count; j < count2; j++)
		{
			if (!PartsList[j].RenderSound(Char, Buffer))
			{
				return false;
			}
		}
		return true;
	}

	public bool ComponentRender(RenderEvent E)
	{
		if (_Effects != null && _Effects.Count > 0)
		{
			Effect[] array = _Effects.GetArray();
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (!array[i].Render(E))
				{
					return false;
				}
			}
		}
		IPart[] array2 = PartsList.GetArray();
		int j = 0;
		for (int count2 = PartsList.Count; j < count2; j++)
		{
			if (!array2[j].Render(E))
			{
				return false;
			}
		}
		if (E.ColorsVisible && IsPlayerControlled() && GetIntProperty("NoStatusColor") <= 0)
		{
			if (Options.AlwaysHPColor)
			{
				E.ApplyColors(GetHPColor(), 10000);
			}
			else if (Options.HPColor)
			{
				GetHPColorAndPriority(out var Color, out var Priority);
				E.ApplyColors(Color, Priority);
			}
		}
		return true;
	}

	public bool OverlayRender(RenderEvent E)
	{
		if (_Effects != null)
		{
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (!_Effects[i].OverlayRender(E))
				{
					return false;
				}
			}
		}
		int j = 0;
		for (int count2 = PartsList.Count; j < count2; j++)
		{
			if (!PartsList[j].OverlayRender(E))
			{
				return false;
			}
		}
		return true;
	}

	public bool FinalRender(RenderEvent E, bool Alt)
	{
		if (_Effects != null)
		{
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (!_Effects[i].FinalRender(E, Alt))
				{
					return false;
				}
			}
		}
		int j = 0;
		for (int count2 = PartsList.Count; j < count2; j++)
		{
			if (!PartsList[j].FinalRender(E, Alt))
			{
				return false;
			}
		}
		return true;
	}

	public bool TakeDamage(ref int Amount, string Attributes = null, string DeathReason = null, string ThirdPersonDeathReason = null, LargerFolk_GameObject Owner = null, LargerFolk_GameObject Attacker = null, LargerFolk_GameObject Source = null, LargerFolk_GameObject Perspective = null, LargerFolk_GameObject DescribeAsFrom = null, string Message = "from %t attack.", bool Accidental = false, bool Environmental = false, bool Indirect = false, bool ShowUninvolved = false, bool IgnoreVisibility = false, bool ShowForInanimate = false, bool SilentIfNoDamage = false, bool NoSetTarget = false, bool UsePopups = false, int Phase = 5, string ShowDamageType = null)
	{
		if (Phase == 0 && Attacker != null)
		{
			Phase = Attacker.GetPhase();
		}
		Damage damage = new Damage(Amount);
		damage.AddAttributes(Attributes);
		if (Accidental)
		{
			damage.AddAttribute("Accidental");
		}
		if (Environmental)
		{
			damage.AddAttribute("Environmental");
		}
		Event @event = Event.New("TakeDamage");
		@event.SetParameter("Damage", damage);
		@event.SetParameter("Owner", Owner ?? Attacker);
		@event.SetParameter("Attacker", Attacker);
		@event.SetParameter("Source", Source);
		@event.SetParameter("Perspective", Perspective);
		@event.SetParameter("DescribeAsFrom", DescribeAsFrom);
		@event.SetParameter("Phase", Phase);
		if (!Message.IsNullOrEmpty())
		{
			@event.SetParameter("Message", Message);
		}
		if (!DeathReason.IsNullOrEmpty())
		{
			@event.SetParameter("DeathReason", DeathReason);
		}
		if (!ThirdPersonDeathReason.IsNullOrEmpty())
		{
			@event.SetParameter("ThirdPersonDeathReason", ThirdPersonDeathReason);
		}
		if (ShowDamageType != null)
		{
			@event.SetParameter("ShowDamageType", ShowDamageType);
		}
		if (Indirect)
		{
			@event.SetFlag("Indirect", State: true);
		}
		if (ShowForInanimate)
		{
			@event.SetFlag("ShowForInanimate", State: true);
		}
		if (ShowUninvolved)
		{
			@event.SetFlag("ShowUninvolved", State: true);
		}
		if (IgnoreVisibility)
		{
			@event.SetFlag("IgnoreVisibility", State: true);
		}
		if (SilentIfNoDamage)
		{
			@event.SetFlag("SilentIfNoDamage", State: true);
		}
		if (NoSetTarget)
		{
			@event.SetFlag("NoSetTarget", State: true);
		}
		if (UsePopups)
		{
			@event.SetFlag("UsePopups", State: true);
		}
		bool num = FireEvent(@event);
		Amount = damage.Amount;
		if (num && Amount > 0)
		{
			damage.PlaySound(this ?? Owner ?? Attacker);
		}
		return num;
	}

	public bool TakeDamage(int Amount, string Message, string Attributes = null, string DeathReason = null, string ThirdPersonDeathReason = null, LargerFolk_GameObject Owner = null, LargerFolk_GameObject Attacker = null, LargerFolk_GameObject Source = null, LargerFolk_GameObject Perspective = null, LargerFolk_GameObject DescribeAsFrom = null, bool Accidental = false, bool Environmental = false, bool Indirect = false, bool ShowUninvolved = false, bool IgnoreVisibility = false, bool ShowForInanimate = false, bool SilentIfNoDamage = false, bool NoSetTarget = false, bool UsePopups = false, int Phase = 5, string ShowDamageType = null)
	{
		return TakeDamage(ref Amount, Attributes, DeathReason, ThirdPersonDeathReason, Owner, Attacker, Source, Perspective, DescribeAsFrom, Message, Accidental, Environmental, Indirect, ShowUninvolved, IgnoreVisibility, ShowForInanimate, SilentIfNoDamage, NoSetTarget, UsePopups, Phase, ShowDamageType);
	}

	public bool TakeDamage(int Amount, StringBuilder Message, string Attributes = null, string DeathReason = null, string ThirdPersonDeathReason = null, LargerFolk_GameObject Owner = null, LargerFolk_GameObject Attacker = null, LargerFolk_GameObject Source = null, LargerFolk_GameObject Perspective = null, bool Accidental = false, bool Environmental = false, bool Indirect = false, bool ShowUninvolved = false, bool IgnoreVisibility = false, bool ShowForInanimate = false, bool SilentIfNoDamage = false, bool UsePopups = false, int Phase = 5, string ShowDamageType = null)
	{
		if (Message != null)
		{
			return TakeDamage(ref Amount, Attributes, DeathReason, ThirdPersonDeathReason, Owner, Attacker, Source, Perspective, null, Message.ToString(), Accidental, Environmental, Indirect, ShowUninvolved, IgnoreVisibility, ShowForInanimate, SilentIfNoDamage, NoSetTarget: false, UsePopups, Phase, ShowDamageType);
		}
		return TakeDamage(ref Amount, Attributes, DeathReason, ThirdPersonDeathReason, Owner, Attacker, Source, null, null, "from %t attack.", Accidental, Environmental, Indirect, ShowUninvolved, IgnoreVisibility, ShowForInanimate, SilentIfNoDamage, NoSetTarget: false, UsePopups, Phase, ShowDamageType);
	}

	public bool TakeDamage(int DamageAmount, LargerFolk_GameObject FromAttacker, string ShowMessage)
	{
		return TakeDamage(DamageAmount, ShowMessage, null, null, null, null, FromAttacker);
	}

	public bool ApplyEffect(Effect E, LargerFolk_GameObject Owner = null)
	{
		if (HasTag("NoEffects") && GetIntProperty("ForceEffects") == 0)
		{
			return false;
		}
		if (ApplyEffectEvent.Check(this, E.ClassName, E, Owner))
		{
			if (!E.CanApplyToStack() && !HasTag("AlwaysStack"))
			{
				SplitStack(1, null, NoRemove: true);
			}
			E.Object = this;
			PlayWorldSound(E.ApplySound);
			if (E.Apply(this))
			{
				Effects.Add(E);
				E.ApplyRegistrar(this);
				E.Applied(this);
				EffectAppliedEvent.Send(this, E.ClassName, E);
				CheckStack();
				return true;
			}
			CheckStack();
		}
		return false;
	}

	public bool CheckStack()
	{
		return Stacker?.Check() ?? false;
	}

	public Effect RemoveEffectAt(int Index, bool NeedStackCheck = true)
	{
		Effect effect = _Effects.TakeAt(Index);
		PlayWorldSound(effect.RemoveSound);
		effect.Remove(this);
		effect.ApplyUnregistrar(this);
		effect.Object = null;
		EffectRemovedEvent.Send(this, effect.ClassName, effect);
		if (NeedStackCheck)
		{
			CheckStack();
		}
		return effect;
	}

	public bool RemoveEffect(Effect E, bool NeedStackCheck = true)
	{
		if (E == null || _Effects == null)
		{
			return false;
		}
		int num = Array.IndexOf(_Effects.GetArray(), E, 0, _Effects.Count);
		if (num == -1)
		{
			return false;
		}
		RemoveEffectAt(num, NeedStackCheck);
		return true;
	}

	public bool RemoveEffect(Type EffectType)
	{
		if (_Effects != null)
		{
			Effect[] array = _Effects.GetArray();
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if ((object)array[i].GetType() == EffectType)
				{
					RemoveEffectAt(i);
					return true;
				}
			}
		}
		return false;
	}

	public bool RemoveEffect<T>()
	{
		if (_Effects != null)
		{
			Effect[] array = _Effects.GetArray();
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if ((object)array[i].GetType() == typeof(T))
				{
					RemoveEffectAt(i);
					return true;
				}
			}
		}
		return false;
	}

	public bool RemoveEffect(Predicate<Effect> Filter)
	{
		if (_Effects != null)
		{
			Effect[] array = _Effects.GetArray();
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (Filter(array[i]))
				{
					RemoveEffectAt(i);
					return true;
				}
			}
		}
		return false;
	}

	public bool RemoveEffect(Type EffectType, Predicate<Effect> Filter)
	{
		if (_Effects != null)
		{
			Effect[] array = _Effects.GetArray();
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if ((object)array[i].GetType() == EffectType && Filter(array[i]))
				{
					RemoveEffectAt(i);
					return true;
				}
			}
		}
		return false;
	}

	public bool RemoveEffectDescendedFrom<T>()
	{
		if (_Effects != null)
		{
			Effect[] array = _Effects.GetArray();
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (array[i] is T)
				{
					RemoveEffectAt(i);
					return true;
				}
			}
		}
		return false;
	}

	public int RemoveAllEffects(bool NeedStackCheck = true)
	{
		if (_Effects == null)
		{
			return 0;
		}
		int num = 0;
		for (int num2 = _Effects.Count - 1; num2 >= 0; num2--)
		{
			RemoveEffectAt(num2, NeedStackCheck: false);
			num++;
		}
		if (num > 0 && NeedStackCheck)
		{
			CheckStack();
		}
		return num;
	}

	public int RemoveAllEffects<T>(bool NeedStackCheck = true)
	{
		if (_Effects == null)
		{
			return 0;
		}
		int num = 0;
		Effect[] array = _Effects.GetArray();
		for (int num2 = _Effects.Count - 1; num2 >= 0; num2--)
		{
			if ((object)array[num2].GetType() == typeof(T))
			{
				RemoveEffectAt(num2, NeedStackCheck: false);
				num++;
			}
		}
		if (num > 0 && NeedStackCheck)
		{
			CheckStack();
		}
		return num;
	}

	public int RemoveEffectsOfType(int Mask, Predicate<Effect> Filter = null, bool NeedStackCheck = true)
	{
		int num = 0;
		if (_Effects != null)
		{
			for (int num2 = _Effects.Count - 1; num2 >= 0; num2--)
			{
				if (_Effects[num2].IsOfTypes(Mask) && (Filter == null || Filter(_Effects[num2])))
				{
					RemoveEffectAt(num2, NeedStackCheck: false);
					num++;
				}
			}
		}
		if (num > 0 && NeedStackCheck)
		{
			CheckStack();
		}
		return num;
	}

	public int RemoveEffectsOfPartialType(int Mask, Predicate<Effect> Filter = null, bool NeedStackCheck = true)
	{
		int num = 0;
		if (_Effects != null)
		{
			for (int num2 = _Effects.Count - 1; num2 >= 0; num2--)
			{
				if (_Effects[num2].IsOfType(Mask) && (Filter == null || Filter(_Effects[num2])))
				{
					RemoveEffectAt(num2, NeedStackCheck: false);
					num++;
				}
			}
		}
		if (num > 0 && NeedStackCheck)
		{
			CheckStack();
		}
		return num;
	}

	public LargerFolk_GameObject FindObjectInInventory(string Blueprint)
	{
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject item in inventory.GetObjectsDirect())
			{
				if (item.Blueprint == Blueprint)
				{
					return item;
				}
			}
		}
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item2 in body.LoopParts())
			{
				if (item2.Equipped != null && item2.Equipped.Blueprint == Blueprint)
				{
					return item2.Equipped;
				}
			}
		}
		return null;
	}

	public LargerFolk_GameObject FindObjectInInventory(Predicate<LargerFolk_GameObject> Filter)
	{
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject item in inventory.GetObjectsDirect())
			{
				if (Filter == null || Filter(item))
				{
					return item;
				}
			}
		}
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item2 in body.LoopParts())
			{
				if (item2.Equipped != null && (Filter == null || Filter(item2.Equipped)))
				{
					return item2.Equipped;
				}
			}
		}
		return null;
	}

	public List<LargerFolk_GameObject> FindObjectsInInventory(string Blueprint)
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject item in inventory.GetObjectsDirect())
			{
				if (item.Blueprint == Blueprint)
				{
					list.Add(item);
				}
			}
		}
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item2 in body.LoopParts())
			{
				if (item2.Equipped != null && item2.Equipped.Blueprint == Blueprint)
				{
					list.Add(item2.Equipped);
				}
			}
		}
		return list;
	}

	public List<LargerFolk_GameObject> FindObjectsInInventory(Predicate<LargerFolk_GameObject> Filter)
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject item in inventory.GetObjectsDirect())
			{
				if (Filter == null || Filter(item))
				{
					list.Add(item);
				}
			}
		}
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item2 in body.LoopParts())
			{
				if (item2.Equipped != null && (Filter == null || Filter(item2.Equipped)))
				{
					list.Add(item2.Equipped);
				}
			}
		}
		return list;
	}

	public bool HasObjectInInventory(Func<GameObject, bool> test, int n = 1)
	{
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject item in inventory.GetObjectsDirect())
			{
				if (test(item))
				{
					n = ((item.Stacker == null) ? (n - 1) : (n - item.Stacker.Number));
				}
				if (n <= 0)
				{
					return true;
				}
			}
		}
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item2 in body.LoopParts())
			{
				if (item2.Equipped != null && test(item2.Equipped))
				{
					Stacker stacker = item2.Equipped.Stacker;
					n = ((stacker == null) ? (n - 1) : (n - stacker.Number));
				}
				if (n <= 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasObjectInInventory(string Blueprint, int n = 1)
	{
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject item in inventory.GetObjectsDirect())
			{
				if (item.Blueprint == Blueprint)
				{
					Stacker stacker = item.Stacker;
					n = ((stacker == null) ? (n - 1) : (n - stacker.Number));
				}
				if (n <= 0)
				{
					return true;
				}
			}
		}
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item2 in body.LoopParts())
			{
				if (item2.Equipped != null && item2.Equipped.Blueprint == Blueprint)
				{
					Stacker stacker2 = item2.Equipped.Stacker;
					n = ((stacker2 == null) ? (n - 1) : (n - stacker2.Number));
				}
				if (n <= 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasObjectWithPartInDirection(string part, string direction)
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell == null)
		{
			return false;
		}
		return currentCell.GetCellFromDirection(direction)?.HasObjectWithPart(part) ?? false;
	}

	public bool HasObjectEquippedOrDefault(string Blueprint, int n = 1)
	{
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item in body.LoopParts())
			{
				if (item.Equipped != null && item.Equipped.Blueprint == Blueprint && item.Equipped.IsEquippedProperly())
				{
					Stacker stacker = item.Equipped.Stacker;
					n = ((stacker == null) ? (n - 1) : (n - stacker.Number));
				}
				if (item.DefaultBehavior != null && item.DefaultBehavior.Blueprint == Blueprint)
				{
					Stacker stacker2 = item.DefaultBehavior.Stacker;
					n = ((stacker2 == null) ? (n - 1) : (n - stacker2.Number));
				}
				if (n <= 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasObjectEquipped(string Blueprint, int n = 1)
	{
		Body body = Body;
		if (body != null)
		{
			foreach (BodyPart item in body.LoopParts())
			{
				if (item.Equipped != null && item.Equipped.Blueprint == Blueprint && item.Equipped.IsEquippedProperly())
				{
					Stacker stacker = item.Equipped.Stacker;
					n = ((stacker == null) ? (n - 1) : (n - stacker.Number));
				}
				if (n <= 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public void UseObject(Predicate<LargerFolk_GameObject> test)
	{
		LargerFolk_GameObject gameObject = Inventory?.FindObject(test);
		if (gameObject != null)
		{
			gameObject.Destroy();
		}
		else
		{
			(Body?.FindObject(test))?.Destroy();
		}
	}

	public void UseObject(string Blueprint)
	{
		LargerFolk_GameObject gameObject = Inventory?.FindObjectByBlueprint(Blueprint);
		if (gameObject != null)
		{
			gameObject.Destroy();
		}
		else
		{
			(Body?.FindObjectByBlueprint(Blueprint))?.Destroy();
		}
	}

	public double GetWeight()
	{
		return Physics?.GetWeight() ?? 0.0;
	}

	public int GetWeightTimes(double Factor)
	{
		return Physics?.GetWeightTimes(Factor) ?? 0;
	}

	public double GetIntrinsicWeight()
	{
		return Physics?.GetIntrinsicWeight() ?? 0.0;
	}

	public int GetIntrinsicWeightTimes(double Factor)
	{
		return Physics?.GetIntrinsicWeightTimes(Factor) ?? 0;
	}

	public int GetCarriedWeight()
	{
		if (CarriedWeightCache != -1)
		{
			return CarriedWeightCache;
		}
		return CarriedWeightCache = GetCarriedWeightEvent.GetFor(this);
	}

	public int GetMaxCarriedWeight()
	{
		if (MaxCarriedWeightCache != -1)
		{
			return MaxCarriedWeightCache;
		}
		return MaxCarriedWeightCache = GetMaxCarriedWeightEvent.GetFor(this, Stat("Strength") * RuleSettings.MAXIMUM_CARRIED_WEIGHT_PER_STRENGTH);
	}

	public int GetElectricalConductivity(out LargerFolk_GameObject ReductionObject, out string ReductionReason, LargerFolk_GameObject Source = null, int Phase = 0)
	{
		ReductionObject = null;
		ReductionReason = null;
		return Physics?.GetElectricalConductivity(out ReductionObject, out ReductionReason, Source, Phase) ?? 0;
	}

	public int GetElectricalConductivity(LargerFolk_GameObject Source = null, int Phase = 0)
	{
		GameObject ReductionObject;
		string ReductionReason;
		return GetElectricalConductivity(out ReductionObject, out ReductionReason, Source, Phase);
	}

	public string GetCachedDisplayNameForSort()
	{
		return _CachedDisplayNameForSort ?? (_CachedDisplayNameForSort = GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: true, Short: false, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null));
	}

	public void ResetNameCache()
	{
		_CachedDisplayNameForSort = null;
	}

	public string GetDisplayName(out bool AdjunctNounActive, int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool ColorOnly = false, bool Visible = true, bool WithoutTitles = false, bool ForSort = false, bool Short = false, bool BaseOnly = false, bool WithIndefiniteArticle = false, bool WithDefiniteArticle = false, string DefaultDefiniteArticle = null, bool IndicateHidden = false, bool Capitalize = false, bool SecondPerson = false, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = false, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false, bool IncludeImplantPrefix = true)
	{
		AdjunctNounActive = false;
		if (Short)
		{
			Cutoff = 1040;
		}
		string text;
		if (SecondPerson && IsPlayer() && Grammar.AllowSecondPerson)
		{
			text = ((!Reflexive) ? (Capitalize ? "You" : "you") : ((!GetPlurality(AsIfKnown)) ? (Capitalize ? "Yourself" : "yourself") : (Capitalize ? "Yourselves" : "yourselves")));
		}
		else
		{
			AdjunctNounActive = IncludeAdjunctNoun ?? (WithIndefiniteArticle && !IsMassNoun(AsIfKnown));
			text = GetDisplayNameEvent.GetFor(this, Base ?? DisplayNameBase, Cutoff, Context, AsIfKnown, Single, NoConfusion, NoColor || Stripped, ColorOnly, Visible, BaseOnly, AdjunctNounActive, WithoutTitles, ForSort, Reference);
			if (Stripped)
			{
				text = text.Strip();
			}
			if (IndicateHidden && IsHidden)
			{
				text = "hidden " + text;
				if (WithDefiniteArticle)
				{
					WithDefiniteArticle = false;
					WithIndefiniteArticle = true;
				}
			}
			if (AdjunctNounActive)
			{
				GetAdjunctNoun(out var Noun, out var Post, AsIfKnown);
				if (!Noun.IsNullOrEmpty())
				{
					if (Post)
					{
						text = text + " " + Noun;
						AdjunctNounActive = false;
					}
					else
					{
						text = Noun + " of " + text;
					}
				}
				else
				{
					AdjunctNounActive = false;
				}
			}
			if (AsPossessed)
			{
				if (AsPossessedBy == null)
				{
					GameObject holder = Holder;
					if (holder != null && holder.IsCreature)
					{
						AsPossessedBy = holder;
					}
				}
				if (AsPossessedBy != null)
				{
					WithIndefiniteArticle = false;
					WithDefiniteArticle = true;
					if (SecondPerson && AsPossessedBy.IsPlayer())
					{
						DefaultDefiniteArticle = "your";
					}
					else
					{
						LargerFolk_GameObject gameObject = AsPossessedBy;
						bool reference = Reference;
						DefaultDefiniteArticle = Grammar.MakePossessive(gameObject.GetDisplayName(int.MaxValue, null, Context, AsIfKnown, Single: false, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible, WithoutTitles: true, ForSort, Short: true, BaseOnly: false, WithIndefiniteArticle: false, Visible, null, IndicateHidden, Capitalize: false, SecondPerson: false, Reflexive: false, null, AsPossessed: false, null, reference));
					}
				}
			}
			if (WithIndefiniteArticle)
			{
				text = IndefiniteArticle(Capitalize, text, AsIfKnown, AdjunctNounActive) + text;
				Capitalize = false;
			}
			if (WithDefiniteArticle)
			{
				text = DefiniteArticle(Capitalize, text, DefaultDefiniteArticle, AsIfKnown, AdjunctNounActive) + text;
				Capitalize = false;
			}
			if (Capitalize)
			{
				text = text.Capitalize();
			}
		}
		return text;
	}

	public string GetDisplayName(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool ColorOnly = false, bool Visible = true, bool WithoutTitles = false, bool ForSort = false, bool Short = false, bool BaseOnly = false, bool WithIndefiniteArticle = false, bool WithDefiniteArticle = false, string DefaultDefiniteArticle = null, bool IndicateHidden = false, bool Capitalize = false, bool SecondPerson = false, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = false, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false, bool IncludeImplantPrefix = true)
	{
		bool AdjunctNounActive;
		return GetDisplayName(out AdjunctNounActive, Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly, Visible, WithoutTitles, ForSort, Short, BaseOnly, WithIndefiniteArticle, WithDefiniteArticle, DefaultDefiniteArticle, IndicateHidden, Capitalize, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference, IncludeImplantPrefix);
	}

	public string GetReferenceDisplayName(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool NoColor = false, bool Stripped = false, bool ColorOnly = false, bool WithoutTitles = false, bool Short = false, bool BaseOnly = false, bool WithIndefiniteArticle = false, bool WithDefiniteArticle = false, string DefaultDefiniteArticle = null, bool Capitalize = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown: true, Single: true, NoConfusion: true, NoColor, Stripped, ColorOnly, Visible: false, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle, WithDefiniteArticle, DefaultDefiniteArticle, IndicateHidden: false, Capitalize, SecondPerson: false, Reflexive: false, (WithIndefiniteArticle || WithDefiniteArticle) && HasPart<CyberneticsBaseItem>(), AsPossessed: false, null, Reference: true);
	}

	public string an(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = false, bool Short = true, bool BaseOnly = false, bool IndicateHidden = false, bool SecondPerson = true, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = false, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle: true, WithDefiniteArticle: false, null, IndicateHidden, Capitalize: false, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
	}

	public string An(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, bool IndicateHidden = false, bool SecondPerson = true, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = false, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle: true, WithDefiniteArticle: false, null, IndicateHidden, Capitalize: true, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
	}

	public string t(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, string DefaultDefiniteArticle = null, bool IndicateHidden = false, bool SecondPerson = true, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = true, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle: false, WithDefiniteArticle: true, DefaultDefiniteArticle, IndicateHidden, Capitalize: false, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
	}

	public string T(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, string DefaultDefiniteArticle = null, bool IndicateHidden = false, bool SecondPerson = true, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = true, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle: false, WithDefiniteArticle: true, DefaultDefiniteArticle, IndicateHidden, Capitalize: true, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
	}

	public string one(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, bool WithIndefiniteArticle = false, string DefaultDefiniteArticle = null, bool IndicateHidden = true, bool SecondPerson = true, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = false, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle, !WithIndefiniteArticle, DefaultDefiniteArticle, IndicateHidden, Capitalize: false, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
	}

	public string One(int Cutoff = int.MaxValue, string Base = null, string Context = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, bool WithIndefiniteArticle = false, string DefaultDefiniteArticle = null, bool IndicateHidden = true, bool SecondPerson = true, bool Reflexive = false, bool? IncludeAdjunctNoun = null, bool AsPossessed = false, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		return GetDisplayName(Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle, !WithIndefiniteArticle, DefaultDefiniteArticle, IndicateHidden, Capitalize: true, SecondPerson, Reflexive, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
	}

	public string does(string Verb, int Cutoff = int.MaxValue, string Base = null, string Context = null, string Adverb = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, bool WithIndefiniteArticle = false, string DefaultDefiniteArticle = null, bool IndicateHidden = false, bool Pronoun = false, bool SecondPerson = true, bool? IncludeAdjunctNoun = null, bool AsPossessed = true, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		bool AdjunctNounActive = false;
		object obj;
		if (Pronoun)
		{
			obj = ((SecondPerson && Grammar.AllowSecondPerson) ? it : GetPronounProvider().Subjective);
		}
		else
		{
			bool withDefiniteArticle = !WithIndefiniteArticle;
			obj = GetDisplayName(out AdjunctNounActive, Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle, withDefiniteArticle, DefaultDefiniteArticle, IndicateHidden, Capitalize: false, SecondPerson, Reflexive: false, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
		}
		string text = (string)obj;
		string verb = GetVerb(Verb, PrependSpace: true, Pronoun, AdjunctNounActive, SecondPerson, AsIfKnown);
		if (text.Contains(","))
		{
			if (!Adverb.IsNullOrEmpty())
			{
				return text + ", " + Adverb + verb;
			}
			return text + "," + verb;
		}
		if (!Adverb.IsNullOrEmpty())
		{
			return text + " " + Adverb + verb;
		}
		return text + verb;
	}

	public string Does(string Verb, int Cutoff = int.MaxValue, string Base = null, string Context = null, string Adverb = null, bool AsIfKnown = false, bool Single = false, bool NoConfusion = false, bool NoColor = false, bool Stripped = false, bool WithoutTitles = true, bool Short = true, bool BaseOnly = false, bool WithIndefiniteArticle = false, string DefaultDefiniteArticle = null, bool IndicateHidden = false, bool Pronoun = false, bool SecondPerson = true, bool? IncludeAdjunctNoun = null, bool AsPossessed = true, LargerFolk_GameObject AsPossessedBy = null, bool Reference = false)
	{
		bool AdjunctNounActive = false;
		object obj;
		if (Pronoun)
		{
			obj = ((SecondPerson && Grammar.AllowSecondPerson) ? It : GetPronounProvider().CapitalizedSubjective);
		}
		else
		{
			bool withDefiniteArticle = !WithIndefiniteArticle;
			obj = GetDisplayName(out AdjunctNounActive, Cutoff, Base, Context, AsIfKnown, Single, NoConfusion, NoColor, Stripped, ColorOnly: false, Visible: true, WithoutTitles, ForSort: false, Short, BaseOnly, WithIndefiniteArticle, withDefiniteArticle, DefaultDefiniteArticle, IndicateHidden, Capitalize: true, SecondPerson, Reflexive: false, IncludeAdjunctNoun, AsPossessed, AsPossessedBy, Reference);
		}
		string text = (string)obj;
		string verb = GetVerb(Verb, PrependSpace: true, Pronoun, AdjunctNounActive, SecondPerson, AsIfKnown);
		if (text.Contains(","))
		{
			if (!Adverb.IsNullOrEmpty())
			{
				return text + ", " + Adverb + verb;
			}
			return text + "," + verb;
		}
		if (!Adverb.IsNullOrEmpty())
		{
			return text + " " + Adverb + verb;
		}
		return text + verb;
	}

	public bool LooksLikeOneOfGroup()
	{
		if (Count > 1)
		{
			return true;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		string shortDisplayName = ShortDisplayName;
		int i = 0;
		for (int count = currentCell.Objects.Count; i < count; i++)
		{
			if (currentCell.Objects[i] != this && currentCell.Objects[i].ShortDisplayName == shortDisplayName)
			{
				return true;
			}
		}
		if (IsCreature)
		{
			foreach (Cell localAdjacentCell in currentCell.GetLocalAdjacentCells())
			{
				int j = 0;
				for (int count2 = localAdjacentCell.Objects.Count; j < count2; j++)
				{
					if (localAdjacentCell.Objects[j] != this && localAdjacentCell.Objects[j].ShortDisplayName == shortDisplayName)
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	public Gender GetGender(bool AsIfKnown = false)
	{
		if (GenderName == null)
		{
			if (!IsOriginalPlayerBody())
			{
				GenderName = GetPropertyOrTag("Gender");
				if (GenderName.IsNullOrEmpty())
				{
					string propertyOrTag = GetPropertyOrTag("RandomGender");
					if (!propertyOrTag.IsNullOrEmpty())
					{
						GenderName = propertyOrTag.Split(',').GetRandomElement();
					}
					GenderName = Gender.CheckSpecial(GenderName);
				}
			}
			if (GenderName == null)
			{
				string text = ((Brain == null) ? "neuter" : "nonspecific");
				GenderName = (Gender.Exists(text) ? text : Gender.GetAllGenericPersonalSingular()[0].Name);
			}
		}
		return Gender.Get(GetGenderEvent.GetFor(this, GenderName, AsIfKnown));
	}

	public void SetGender(Gender Spec)
	{
		GenderName = Spec.Name;
	}

	public void SetGender(string Name)
	{
		SetGender(Gender.Get(Gender.CheckSpecial(Name)));
	}

	public PronounSet GetPronounSet()
	{
		if (PronounSetName == "")
		{
			return null;
		}
		if (PronounSetName == null)
		{
			PronounSetName = GetPropertyOrTag("PronounSet");
			if (PronounSetName.IsNullOrEmpty())
			{
				string propertyOrTag = GetPropertyOrTag("RandomPronounSet");
				if (!propertyOrTag.IsNullOrEmpty())
				{
					string propertyOrTag2 = GetPropertyOrTag("RandomPronounSetChance");
					if (propertyOrTag2.IsNullOrEmpty() || Convert.ToInt32(propertyOrTag2).in100())
					{
						PronounSetName = propertyOrTag.Split(',').GetRandomElement();
					}
					PronounSetName = PronounSet.CheckSpecial(PronounSetName);
				}
				if (PronounSetName == null)
				{
					PronounSetName = "";
					return null;
				}
			}
		}
		return PronounSet.Get(PronounSetName);
	}

	public void SetPronounSet(PronounSet Spec)
	{
		PronounSetName = Spec?.Name;
		SetPronounSetKnown(Value: false);
	}

	public void SetPronounSet(string Name)
	{
		SetPronounSet(PronounSet.Get(PronounSet.CheckSpecial(Name)));
	}

	public void ClearPronounSet()
	{
		PronounSetName = null;
		SetPronounSetKnown(Value: false);
	}

	public bool IsPronounSetKnown()
	{
		if (Flags.HasBit(1))
		{
			return true;
		}
		if (!PronounSet.EnableConversationalExchange)
		{
			return true;
		}
		if (IsPlayer())
		{
			return true;
		}
		if (WasPlayer())
		{
			return true;
		}
		if (HasCopyRelationship(ThePlayer))
		{
			return true;
		}
		if (XRL.The.Player == null)
		{
			return true;
		}
		if (XRL.The.Player.HasSkill("Customs_Tactful"))
		{
			return true;
		}
		return false;
	}

	public PronounSet GetPronounSetIfKnown()
	{
		if (!IsPronounSetKnown())
		{
			return null;
		}
		return GetPronounSet();
	}

	public IPronounProvider GetPronounProvider(bool AsIfKnown = false)
	{
		IPronounProvider pronounSetIfKnown = GetPronounSetIfKnown();
		return pronounSetIfKnown ?? GetGender(AsIfKnown);
	}

	public string Its_(LargerFolk_GameObject Object)
	{
		if (Object.HasProperName)
		{
			return Object.ShortDisplayName.Capitalize();
		}
		return Its + " " + Object.ShortDisplayName;
	}

	public string its_(LargerFolk_GameObject Object, bool IncludeAdjunctNoun = false)
	{
		return Object.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: true, its, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, IncludeAdjunctNoun);
	}

	public void its_(LargerFolk_GameObject Object, StringBuilder AppendTo, bool IncludeAdjunctNoun = false)
	{
		AppendTo?.Append(Object.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: true, its, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, IncludeAdjunctNoun));
	}

	public string Poss(LargerFolk_GameObject Object, bool Definite = true, bool? IncludeAdjunctNoun = null)
	{
		if (IsPlayer() && Grammar.AllowSecondPerson)
		{
			return Object.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: true, "Your", IndicateHidden: false, Capitalize: true, SecondPerson: false, Reflexive: false, IncludeAdjunctNoun);
		}
		bool withDefiniteArticle = Definite;
		return Object.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: true, Grammar.MakePossessive(GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, !Definite, withDefiniteArticle, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null)), IndicateHidden: false, Capitalize: true, SecondPerson: false, Reflexive: false, IncludeAdjunctNoun);
	}

	public string Poss(string text, bool Definite = true)
	{
		if (IsPlayer() && Grammar.AllowSecondPerson)
		{
			return "Your " + text;
		}
		bool withDefiniteArticle = Definite;
		return Grammar.MakePossessive(GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, !Definite, withDefiniteArticle, null, IndicateHidden: false, Capitalize: true, SecondPerson: false, Reflexive: false, null)) + " " + text;
	}

	public string poss(LargerFolk_GameObject Object, bool Definite = true, bool? IncludeAdjunctNoun = null)
	{
		if (IsPlayer() && Grammar.AllowSecondPerson)
		{
			return Object.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: true, "your", IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, IncludeAdjunctNoun);
		}
		bool withDefiniteArticle = Definite;
		return Object.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: true, Grammar.MakePossessive(GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, !Definite, withDefiniteArticle, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null)), IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, IncludeAdjunctNoun);
	}

	public string poss(string text, bool Definite = true)
	{
		if (IsPlayer() && Grammar.AllowSecondPerson)
		{
			return "your " + text;
		}
		bool withDefiniteArticle = Definite;
		return Grammar.MakePossessive(GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, !Definite, withDefiniteArticle, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null)) + " " + text;
	}

	public bool IsMassNoun(bool AsIfKnown = false)
	{
		if (!AsIfKnown && TryGetPart<Examiner>(out var Part))
		{
			GameObject activeSample = Part.GetActiveSample();
			if (activeSample != null)
			{
				return activeSample.IsMassNoun();
			}
		}
		return GetxTag("Grammar", "massNoun") == "true";
	}

	public string IndefiniteArticle(bool Capital = false, string Word = null, bool AsIfKnown = false, bool UsingAdjunctNoun = false)
	{
		if (!AsIfKnown && TryGetPart<Examiner>(out var Part))
		{
			GameObject activeSample = Part.GetActiveSample();
			if (activeSample != null)
			{
				return activeSample.IndefiniteArticle(Capital, Word, AsIfKnown: false, UsingAdjunctNoun);
			}
		}
		string propertyOrTag = GetPropertyOrTag("IndefiniteArticle");
		if (!propertyOrTag.IsNullOrEmpty())
		{
			return (Capital ? propertyOrTag.Capitalize() : propertyOrTag) + " ";
		}
		if (!UsingAdjunctNoun && HasProperName)
		{
			return "";
		}
		if (!UsingAdjunctNoun)
		{
			string propertyOrTag2 = GetPropertyOrTag("OverrideIArticle", GetxTag("Grammar", "iArticle"));
			if (!propertyOrTag2.IsNullOrEmpty())
			{
				return (Capital ? propertyOrTag2.Capitalize() : propertyOrTag2) + " ";
			}
			if (IsMassNoun(AsIfKnown) || GetPlurality(AsIfKnown))
			{
				if (!Capital)
				{
					return "some ";
				}
				return "Some ";
			}
		}
		if (Word == null)
		{
			Word = ShortDisplayName;
		}
		if (!Grammar.IndefiniteArticleShouldBeAn(Word))
		{
			if (!Capital)
			{
				return "a ";
			}
			return "A ";
		}
		if (!Capital)
		{
			return "an ";
		}
		return "An ";
	}

	public void IndefiniteArticle(StringBuilder SB, bool Capital = false, string Word = null, bool AsIfKnown = false, bool UsingAdjunctNoun = false)
	{
		if (!AsIfKnown && TryGetPart<Examiner>(out var Part))
		{
			GameObject activeSample = Part.GetActiveSample();
			if (activeSample != null)
			{
				activeSample.IndefiniteArticle(SB, Capital, Word, AsIfKnown: false, UsingAdjunctNoun);
				return;
			}
		}
		string propertyOrTag = GetPropertyOrTag("IndefiniteArticle");
		if (!propertyOrTag.IsNullOrEmpty())
		{
			SB.Append(Capital ? propertyOrTag.Capitalize() : propertyOrTag).Append(' ');
		}
		else
		{
			if (!UsingAdjunctNoun && HasProperName)
			{
				return;
			}
			if (!UsingAdjunctNoun)
			{
				string text = GetxTag("Grammar", "iArticle");
				if (HasPropertyOrTag("OverrideIArticle"))
				{
					text = GetPropertyOrTag("OverrideIArticle");
				}
				if (!text.IsNullOrEmpty())
				{
					SB.Append(Capital ? text.Capitalize() : text).Append(' ');
					return;
				}
				if (IsMassNoun(AsIfKnown) || GetPlurality(AsIfKnown))
				{
					SB.Append(Capital ? "Some " : "some ");
					return;
				}
			}
			if (Word == null)
			{
				Word = ShortDisplayName;
			}
			SB.Append((!Grammar.IndefiniteArticleShouldBeAn(Word)) ? (Capital ? "A " : "a ") : (Capital ? "An " : "an "));
		}
	}

	public string DefiniteArticle(bool Capital = false, string Word = null, string UseAsDefault = null, bool AsIfKnown = false, bool UsingAdjunctNoun = false)
	{
		if (!AsIfKnown && TryGetPart<Examiner>(out var Part))
		{
			GameObject activeSample = Part.GetActiveSample();
			if (activeSample != null)
			{
				return activeSample.DefiniteArticle(Capital, Word, UseAsDefault, AsIfKnown: false, UsingAdjunctNoun);
			}
		}
		string propertyOrTag = GetPropertyOrTag("DefiniteArticle");
		if (!propertyOrTag.IsNullOrEmpty())
		{
			return (Capital ? propertyOrTag.Capitalize() : propertyOrTag) + " ";
		}
		if (!UsingAdjunctNoun && HasProperName)
		{
			return "";
		}
		if (!UsingAdjunctNoun)
		{
			string text = GetxTag("Grammar", "dArticle");
			if (!text.IsNullOrEmpty())
			{
				return (Capital ? text.Capitalize() : text) + " ";
			}
		}
		if (UseAsDefault != null)
		{
			if (UseAsDefault == "")
			{
				return "";
			}
			return (Capital ? UseAsDefault.Capitalize() : UseAsDefault) + " ";
		}
		if (!Capital)
		{
			return "the ";
		}
		return "The ";
	}

	public void DefiniteArticle(StringBuilder SB, bool Capital = false, string Word = null, string UseAsDefault = null, bool AsIfKnown = false, bool UsingAdjunctNoun = false)
	{
		if (!AsIfKnown && TryGetPart<Examiner>(out var Part))
		{
			GameObject activeSample = Part.GetActiveSample();
			if (activeSample != null)
			{
				activeSample.DefiniteArticle(SB, Capital, Word, UseAsDefault);
				return;
			}
		}
		string propertyOrTag = GetPropertyOrTag("DefiniteArticle");
		if (!propertyOrTag.IsNullOrEmpty())
		{
			SB.Append(Capital ? propertyOrTag.Capitalize() : propertyOrTag).Append(' ');
		}
		else
		{
			if (!UsingAdjunctNoun && HasProperName)
			{
				return;
			}
			if (!UsingAdjunctNoun)
			{
				string text = GetxTag("Grammar", "dArticle");
				if (!text.IsNullOrEmpty())
				{
					SB.Append(Capital ? text.Capitalize() : text).Append(' ');
					return;
				}
			}
			if (UseAsDefault != null)
			{
				if (UseAsDefault != "")
				{
					SB.Append(Capital ? UseAsDefault.Capitalize() : UseAsDefault).Append(' ');
				}
			}
			else
			{
				SB.Append(Capital ? "The " : "the ");
			}
		}
	}

	public bool GetPlurality(bool AsIfKnown = false)
	{
		return GetPronounProvider(AsIfKnown).Plural;
	}

	public bool GetPseudoPlurality(bool AsIfKnown = false)
	{
		return GetPronounProvider(AsIfKnown).PseudoPlural;
	}

	public string getSingularSemantic(string name, string defaultResult)
	{
		return Semantics.GetSingularSemantic(name, this, defaultResult);
	}

	public string getPluralSemantic(string name, string defaultResult)
	{
		return Semantics.GetPluralSemantic(name, this, defaultResult);
	}

	public bool Twiddle(Action After, bool Distant, bool MouseClick = false)
	{
		bool Done = false;
		EquipmentAPI.TwiddleObject(this, ref Done, After, Distant, TelekineticOnly: false, MouseClick);
		return Done;
	}

	public bool Twiddle(Action After, bool MouseClick = false)
	{
		bool distant = ((CurrentCell != null) ? ThePlayer.DistanceTo(this) : 0) > 1 || ThePlayer.IsFrozen();
		return Twiddle(After, distant, MouseClick);
	}

	public bool Twiddle(bool MouseClick = false)
	{
		return Twiddle(null, MouseClick);
	}

	public bool TelekineticTwiddle(Action After = null)
	{
		bool Done = false;
		EquipmentAPI.TwiddleObject(this, ref Done, After, Distant: true, TelekineticOnly: true);
		return Done;
	}

	public string GetVerb(string Verb, bool PrependSpace = true, bool PronounAntecedent = false, bool AdjunctAntecedent = false, bool SecondPerson = true, bool AsIfKnown = false)
	{
		if (!AdjunctAntecedent)
		{
			if ((SecondPerson && IsPlayer() && Grammar.AllowSecondPerson) || GetPlurality(AsIfKnown))
			{
				if (!PrependSpace)
				{
					return Verb;
				}
				return " " + Verb;
			}
			if (PronounAntecedent && GetPseudoPlurality(AsIfKnown))
			{
				if (!PrependSpace)
				{
					return Verb;
				}
				return " " + Verb;
			}
		}
		return Grammar.ThirdPerson(Verb, PrependSpace);
	}

	public bool isFurniture()
	{
		return HasTag("Furniture");
	}

	public void RegisterEvent(IEventHandler Handler, int EventID, int Order = 0, bool Serialize = false)
	{
		if (RegisteredEvents == null)
		{
			RegisteredEvents = EventRegistry.Get();
		}
		RegisteredEvents.Register(Handler, EventID, Order, Serialize);
	}

	public void UnregisterEvent(IEventHandler Handler, int EventID)
	{
		RegisteredEvents?.Unregister(Handler, EventID);
	}

	public bool HasRegisteredEvent(string Event)
	{
		switch (Event)
		{
		case "TakeDamage":
			return true;
		case "BeforeDeathRemoval":
			return true;
		case "CommandAutoEquipObject":
			return true;
		case "Regenera":
			return true;
		default:
			if (RegisteredPartEvents != null && RegisteredPartEvents.ContainsKey(Event))
			{
				return true;
			}
			if (RegisteredEffectEvents != null && RegisteredEffectEvents.ContainsKey(Event))
			{
				return true;
			}
			return false;
		}
	}

	public bool HasRegisteredEvent(int EventID)
	{
		if (RegisteredEvents != null)
		{
			return RegisteredEvents.ContainsKey(EventID);
		}
		return false;
	}

	public bool HasRegisteredEventDirect(string Event)
	{
		if (RegisteredPartEvents != null && RegisteredPartEvents.ContainsKey(Event))
		{
			return true;
		}
		if (RegisteredEffectEvents != null && RegisteredEffectEvents.ContainsKey(Event))
		{
			return true;
		}
		return false;
	}

	public bool HasRegisteredEventFrom(string Event, IPart P)
	{
		if (RegisteredPartEvents != null && RegisteredPartEvents.ContainsKey(Event) && RegisteredPartEvents[Event].Contains(P))
		{
			return true;
		}
		return false;
	}

	public bool HasRegisteredEventFrom(string Event, Effect E)
	{
		if (RegisteredEffectEvents != null && RegisteredEffectEvents.ContainsKey(Event) && RegisteredEffectEvents[Event].Contains(E))
		{
			return true;
		}
		return false;
	}

	public void RegisterEffectEvent(Effect Effect, string Event)
	{
		if (RegisteredEffectEvents == null)
		{
			RegisteredEffectEvents = new Dictionary<string, List<Effect>>();
		}
		if (!RegisteredEffectEvents.TryGetValue(Event, out var value))
		{
			value = (RegisteredEffectEvents[Event] = new List<Effect>());
		}
		value.Add(Effect);
	}

	public void UnregisterEffectEvent(Effect Ef, string Event)
	{
		if (RegisteredEffectEvents != null && RegisteredEffectEvents.TryGetValue(Event, out var value))
		{
			for (int num = value.IndexOf(Ef); num >= 0; num = value.IndexOf(Ef))
			{
				value.RemoveAt(num);
			}
			if (value.Count == 0)
			{
				RegisteredEffectEvents.Remove(Event);
			}
		}
	}

	public void RegisterPartEvent(IPart Ef, string Event)
	{
		if (Event == null)
		{
			MetricsManager.LogEditorError("Registering null event at " + Environment.StackTrace.ToString());
			return;
		}
		if (RegisteredPartEvents == null)
		{
			RegisteredPartEvents = new Dictionary<string, List<IPart>>();
		}
		if (!RegisteredPartEvents.TryGetValue(Event, out var value))
		{
			value = new List<IPart>();
			RegisteredPartEvents.Add(Event, value);
		}
		if (!value.Contains(Ef))
		{
			value.Add(Ef);
		}
	}

	public void UnregisterPartEvent(IPart Part, string Event)
	{
		if (RegisteredPartEvents == null)
		{
			return;
		}
		List<IPart> value;
		if (Event == null)
		{
			MetricsManager.LogEditorError("Unregistering null event at " + Environment.StackTrace.ToString());
		}
		else if (RegisteredPartEvents.TryGetValue(Event, out value))
		{
			for (int num = value.IndexOf(Part); num >= 0; num = value.IndexOf(Part))
			{
				value.RemoveAt(num);
			}
			if (value.Count == 0)
			{
				RegisteredPartEvents.Remove(Event);
			}
		}
	}

	public bool HasOtherRegisteredEvent(string Event, IPart Part)
	{
		if (Event == "TakeDamage" && Part != Physics)
		{
			return true;
		}
		if (Event == "BeforeDeathRemoval" && !(Part is Body))
		{
			return true;
		}
		if (Event == "CommandAutoEquipObject")
		{
			return true;
		}
		if (Event == "Regenera")
		{
			return true;
		}
		if (RegisteredPartEvents != null && RegisteredPartEvents.TryGetValue(Event, out var value))
		{
			foreach (IPart item in value)
			{
				if (item != Part)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasOtherRegisteredEvent(string Event, Effect fx)
	{
		switch (Event)
		{
		case "TakeDamage":
			return true;
		case "BeforeDeathRemoval":
			return true;
		case "CommandAutoEquipObject":
			return true;
		case "Regenera":
			return true;
		default:
		{
			if (RegisteredEffectEvents != null && RegisteredEffectEvents.TryGetValue(Event, out var value))
			{
				foreach (Effect item in value)
				{
					if (item != fx)
					{
						return true;
					}
				}
			}
			return false;
		}
		}
	}

	public bool FireEvent(string ID)
	{
		if (!HasRegisteredEvent(ID))
		{
			return true;
		}
		return FireEvent(Event.New(ID));
	}

	public bool FireEvent(string ID, IEvent ParentEvent)
	{
		if (!HasRegisteredEvent(ID))
		{
			return true;
		}
		return FireEvent(Event.New(ID), ParentEvent);
	}

	public bool FireEvent(string ID, Event ParentEvent)
	{
		if (!HasRegisteredEvent(ID))
		{
			return true;
		}
		return FireEvent(Event.New(ID), ParentEvent);
	}

	public bool FireEvent(Event E, IEvent ParentEvent)
	{
		bool result = FireEvent(E);
		ParentEvent?.ProcessChildEvent(E);
		return result;
	}

	public bool FireEvent(Event E, Event ParentEvent)
	{
		bool result = FireEvent(E);
		ParentEvent?.ProcessChildEvent(E);
		return result;
	}

	public bool FireEventDirect(Event E)
	{
		for (int i = 0; i < Effects.Count; i++)
		{
			if (!Effects[i].FireEvent(E))
			{
				return false;
			}
		}
		for (int j = 0; j < PartsCascade; j++)
		{
			if (!PartsList[j].FireEvent(E))
			{
				return false;
			}
		}
		return true;
	}

	public bool FireRegisteredEvent(Event E)
	{
		if (RegisteredEffectEvents != null && RegisteredEffectEvents.TryGetValue(E.ID, out var value))
		{
			int i = 0;
			for (int count = value.Count; i < count; i++)
			{
				Effect effect = value[i];
				if (!effect.FireEvent(E))
				{
					return false;
				}
				if (value.Count != count)
				{
					count = value.Count;
					if (i < count && value[i] != effect)
					{
						i--;
					}
				}
			}
		}
		if (RegisteredPartEvents != null && RegisteredPartEvents.TryGetValue(E.ID, out var value2))
		{
			int j = 0;
			for (int count2 = value2.Count; j < count2; j++)
			{
				IPart part = value2[j];
				if (!part.FireEvent(E))
				{
					return false;
				}
				if (value2.Count != count2)
				{
					count2 = value2.Count;
					if (j < count2 && value2[j] != part)
					{
						j--;
					}
				}
			}
		}
		return true;
	}

	public bool BroadcastEvent(Event E)
	{
		if (PartsList != null)
		{
			int i = 0;
			for (int num = PartsCascade; i < num; i++)
			{
				if (!PartsList[i].FireEvent(E))
				{
					return false;
				}
				if (PartsCascade < num)
				{
					int num2 = num - PartsCascade;
					i -= num2;
					num -= num2;
				}
			}
		}
		return true;
	}

	public bool LocalEvent(Event E)
	{
		if (!FireEvent(E))
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell != null)
		{
			int i = 0;
			for (int count = currentCell.Objects.Count; i < count; i++)
			{
				LargerFolk_GameObject gameObject = currentCell.Objects[i];
				if (gameObject != this && !gameObject.FireEvent(E))
				{
					return false;
				}
				if (currentCell.Objects.Count != count)
				{
					count = currentCell.Objects.Count;
					if (i < count && currentCell.Objects[i] != gameObject)
					{
						i--;
					}
				}
			}
		}
		return true;
	}

	public bool LocalEvent(string Name)
	{
		return LocalEvent(Event.New(Name));
	}

	public bool ExtendedLocalEvent(Event E)
	{
		if (!FireEvent(E))
		{
			return false;
		}
		if (CurrentCell != null)
		{
			foreach (LargerFolk_GameObject @object in CurrentCell.Objects)
			{
				if (@object != this && !@object.FireEvent(E))
				{
					return false;
				}
			}
			foreach (Cell localAdjacentCell in CurrentCell.GetLocalAdjacentCells())
			{
				foreach (LargerFolk_GameObject object2 in localAdjacentCell.Objects)
				{
					if (!object2.FireEvent(E))
					{
						return false;
					}
				}
			}
		}
		return true;
	}

	public bool ExtendedLocalEvent(string Name)
	{
		return ExtendedLocalEvent(Event.New(Name));
	}

	public bool FireEventOnBodyparts(Event E)
	{
		return Body?.FireEventOnBodyparts(E) ?? true;
	}

	public bool FireEvent(Event E)
	{
		if (E.ID == "BeforeDeathRemoval")
		{
			Body body = Body;
			if (body != null && !body.FireEvent(E))
			{
				return false;
			}
		}
		else if (E.ID == "TakeDamage")
		{
			if (Physics != null && !Physics.ProcessTakeDamage(E))
			{
				return false;
			}
		}
		else if (E.ID == "CommandAutoEquipObject")
		{
			if (!AutoEquip(E.GetGameObjectParameter("Object")))
			{
				return false;
			}
		}
		else if (E.ID == "Regenera")
		{
			int mask = 9244;
			int num = 100663296;
			if (E.GetIntParameter("Level") < 5)
			{
				num |= 0x1000000;
			}
			TargetEffects.Clear();
			int i = 0;
			for (int count = Effects.Count; i < count; i++)
			{
				Effect effect = Effects[i];
				if (effect.IsOfType(mask) && effect.IsOfTypes(num))
				{
					TargetEffects.Add(effect);
				}
			}
			Effect randomElement = TargetEffects.GetRandomElement();
			if (randomElement != null)
			{
				if (IsPlayer())
				{
					GameObject gameObjectParameter = E.GetGameObjectParameter("Source");
					string text = null;
					if (gameObjectParameter != null)
					{
						text = gameObjectParameter.Does("cure", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " you of";
					}
					else
					{
						text = E.GetStringParameter("SourceDescription");
						if (text != null)
						{
							ConsoleLib.Console.ColorUtility.CapitalizeExceptFormatting(text);
						}
					}
					if (text == null)
					{
						text = "Your regenerative metabolism cures you of";
					}
					string text2 = text;
					text2 = ((!(randomElement.DisplayName == randomElement.ClassName)) ? (text2 + " " + randomElement.DisplayName + ".") : (text2 + " a malady."));
					MessageQueue.AddPlayerMessage(text2);
				}
				RemoveEffect(randomElement);
			}
			TargetEffects.Clear();
		}
		if (RegisteredEffectEvents != null && RegisteredEffectEvents.TryGetValue(E.ID, out var value))
		{
			for (int j = 0; j < value.Count; j++)
			{
				if (!value[j].FireEvent(E))
				{
					return false;
				}
			}
		}
		if (RegisteredPartEvents != null && RegisteredPartEvents.TryGetValue(E.ID, out var value2))
		{
			for (int k = 0; k < value2.Count; k++)
			{
				int count2 = value2.Count;
				if (!value2[k].FireEvent(E))
				{
					return false;
				}
				if (value2.Count < count2)
				{
					k--;
				}
			}
		}
		return true;
	}

	public void CompanionDirectionEnergyCost(LargerFolk_GameObject GO, int EnergyCost, string Action)
	{
		if (CanMakeTelepathicContactWith(GO))
		{
			EnergyCost /= 10;
			Action = "Mental Direct Companion " + Action;
		}
		else
		{
			Action = "Direct Companion " + Action;
		}
		UseEnergy(EnergyCost, Action, null, null);
	}

	public int GetTier()
	{
		string tag = GetTag("Tier");
		if (!tag.IsNullOrEmpty())
		{
			try
			{
				return Convert.ToInt32(tag);
			}
			catch
			{
			}
		}
		return (Stat("Level") - 1) / 5 + 1;
	}

	public int GetTechTier()
	{
		string tag = GetTag("TechTier");
		if (!tag.IsNullOrEmpty())
		{
			try
			{
				return Convert.ToInt32(tag);
			}
			catch
			{
			}
		}
		return GetTier();
	}

	public bool CleanEffects()
	{
		bool flag = false;
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				Effect effect = effects[i];
				if (effect.Duration <= 0)
				{
					effect.Expired();
					RemoveEffect(effect, NeedStackCheck: false);
					i = -1;
					count = effects.Count;
					flag = true;
				}
			}
		}
		if (flag)
		{
			CheckStack();
		}
		return flag;
	}

	public bool AnyEffects()
	{
		if (_Effects != null)
		{
			return _Effects.Count > 0;
		}
		return false;
	}

	public int GetPhase()
	{
		return Phase.getPhase(this);
	}

	public bool PhaseMatches(int VsPhase)
	{
		return Phase.phaseMatches(this, VsPhase);
	}

	public bool PhaseMatches(LargerFolk_GameObject GO)
	{
		return Phase.phaseMatches(this, GO);
	}

	public bool FlightMatches(LargerFolk_GameObject GO)
	{
		if (GO == null)
		{
			return true;
		}
		return GO.IsFlying == IsFlying;
	}

	public bool PhaseAndFlightMatches(LargerFolk_GameObject GO)
	{
		if (GO == null)
		{
			return true;
		}
		if (PhaseMatches(GO))
		{
			return FlightMatches(GO);
		}
		return false;
	}

	public bool FlightCanReach(LargerFolk_GameObject GO)
	{
		if (GO == null)
		{
			return true;
		}
		if (!GO.IsFlying)
		{
			return true;
		}
		if (IsFlying)
		{
			return true;
		}
		return false;
	}

	public bool HasEffect(string EffectType)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				Effect effect = effects[i];
				if (effect.Duration > 0 && EffectType == effect.ClassName)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffect(Type EffectType)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == EffectType && effects[i].Duration > 0)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffect(Predicate<Effect> filter)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (filter(effects[i]))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffect(Type EffectType, Predicate<Effect> filter)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].GetType() == EffectType && filter(effects[i]))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffect<T>() where T : Effect
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == typeof(T))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffect<T>(Predicate<T> Filter) where T : Effect
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == typeof(T) && effects[i] is T obj && Filter(obj))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffectDescendedFrom<T>() where T : class
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i] is T)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffectOtherThan(Type EffectType, Effect Skip)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i] != Skip && effects[i].GetType() == EffectType)
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasEffectOtherThan(Predicate<Effect> Filter, Effect Skip)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i] != Skip && (Filter == null || Filter(effects[i])))
				{
					return true;
				}
			}
		}
		return false;
	}

	public IEnumerable<T> YieldEffects<T>() where T : Effect
	{
		if (_Effects == null || _Effects.Count == 0)
		{
			yield break;
		}
		using ScopeDisposedList<Effect> list = _Effects.GetScopeDisposedCopy();
		int i = 0;
		for (int j = list.Count; i < j; i++)
		{
			if ((object)list[i]?.GetType() == typeof(T))
			{
				yield return (T)list[i];
			}
		}
	}

	public IEnumerable<T> YieldEffects<T>(Predicate<T> Filter) where T : Effect
	{
		if (_Effects == null || _Effects.Count == 0)
		{
			yield break;
		}
		using ScopeDisposedList<Effect> list = _Effects.GetScopeDisposedCopy();
		int i = 0;
		for (int j = list.Count; i < j; i++)
		{
			if ((object)list[i]?.GetType() == typeof(T) && list[i] is T val && Filter(val))
			{
				yield return val;
			}
		}
	}

	public IEnumerable<Effect> YieldEffects(Predicate<Effect> Filter)
	{
		if (_Effects == null || _Effects.Count == 0)
		{
			yield break;
		}
		using ScopeDisposedList<Effect> list = _Effects.GetScopeDisposedCopy();
		int i = 0;
		for (int j = list.Count; i < j; i++)
		{
			if (list[i] != null && Filter(list[i]))
			{
				yield return list[i];
			}
		}
	}

	public IEnumerable<T> YieldEffectsDescendedFrom<T>() where T : class
	{
		if (_Effects == null || _Effects.Count == 0)
		{
			yield break;
		}
		using ScopeDisposedList<Effect> list = _Effects.GetScopeDisposedCopy();
		int i = 0;
		for (int j = list.Count; i < j; i++)
		{
			if (list[i] is T val)
			{
				yield return val;
			}
		}
	}

	public IEnumerable<T> YieldEffectsDescendedFrom<T>(Predicate<T> Filter) where T : class
	{
		if (_Effects == null || _Effects.Count == 0)
		{
			yield break;
		}
		using ScopeDisposedList<Effect> list = _Effects.GetScopeDisposedCopy();
		int i = 0;
		for (int j = list.Count; i < j; i++)
		{
			if (list[i] is T val && Filter(val))
			{
				yield return val;
			}
		}
	}

	public int GetEffectCount()
	{
		return _Effects?.Count ?? 0;
	}

	public int GetEffectCount(Type EffectType)
	{
		int num = 0;
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].GetType() == EffectType)
				{
					num++;
				}
			}
		}
		return num;
	}

	public int GetEffectCount(Type EffectType, Predicate<Effect> Filter)
	{
		if (Filter == null)
		{
			return GetEffectCount(EffectType);
		}
		int num = 0;
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].GetType() == EffectType && Filter(effects[i]))
				{
					num++;
				}
			}
		}
		return num;
	}

	public int GetEffectCount(Predicate<Effect> Filter)
	{
		if (Filter == null)
		{
			return GetEffectCount();
		}
		int num = 0;
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (Filter(effects[i]))
				{
					num++;
				}
			}
		}
		return num;
	}

	public Effect GetEffect(Guid ID)
	{
		if (ID == Guid.Empty)
		{
			return null;
		}
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].ID == ID)
				{
					return effects[i];
				}
			}
		}
		return null;
	}

	public Effect GetEffect(Type Type)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == Type)
				{
					return effects[i];
				}
			}
		}
		return null;
	}

	public Effect GetEffect(Type Type, Predicate<Effect> Predicate)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				Effect effect = effects[i];
				if ((object)effect.GetType() == Type && Predicate(effect))
				{
					return effect;
				}
			}
		}
		return null;
	}

	public T GetEffect<T>() where T : Effect
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == typeof(T))
				{
					return (T)effects[i];
				}
			}
		}
		return null;
	}

	public T GetEffect<T>(Predicate<T> Filter) where T : Effect
	{
		if (Filter == null)
		{
			return GetEffect<T>();
		}
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == typeof(T))
				{
					T val = (T)effects[i];
					if (Filter(val))
					{
						return val;
					}
				}
			}
		}
		return null;
	}

	public T GetEffectDescendedFrom<T>() where T : class
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i] is T result)
				{
					return result;
				}
			}
		}
		return null;
	}

	public Effect GetEffect(Predicate<Effect> Filter)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			if (Filter == null)
			{
				if (effects.Count > 0)
				{
					return effects[0];
				}
			}
			else
			{
				int i = 0;
				for (int count = effects.Count; i < count; i++)
				{
					if (Filter(effects[i]))
					{
						return effects[i];
					}
				}
			}
		}
		return null;
	}

	public bool HasEffectOfType(int Mask, Predicate<Effect> Filter = null)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].IsOfTypes(Mask) && (Filter == null || Filter(effects[i])))
				{
					return true;
				}
			}
		}
		return false;
	}

	public Effect GetEffectOfType(int Mask, Predicate<Effect> Filter = null)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].IsOfTypes(Mask) && (Filter == null || Filter(effects[i])))
				{
					return effects[i];
				}
			}
		}
		return null;
	}

	public bool HasEffectOfPartialType(int Mask, Predicate<Effect> Filter = null)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].IsOfType(Mask) && (Filter == null || Filter(effects[i])))
				{
					return true;
				}
			}
		}
		return false;
	}

	public Effect GetEffectOfPartialType(int Mask, Predicate<Effect> Filter = null)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if (effects[i].IsOfType(Mask) && (Filter == null || Filter(effects[i])))
				{
					return effects[i];
				}
			}
		}
		return null;
	}

	public bool TryGetEffect<T>(out T Effect) where T : Effect
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				if ((object)effects[i].GetType() == typeof(T))
				{
					Effect = effects[i] as T;
					return true;
				}
			}
		}
		Effect = null;
		return false;
	}

	public void ForeachEffect(Action<Effect> Proc)
	{
		EffectRack effects = _Effects;
		if (effects != null)
		{
			int i = 0;
			for (int count = effects.Count; i < count; i++)
			{
				Proc(effects[i]);
			}
		}
	}

	public void GetWantEventHandlers(int ID, int Cascade, Rack<IEventHandler> Result)
	{
		int i = 0;
		for (int partsCascade = PartsCascade; i < partsCascade; i++)
		{
			IPart part = PartsList[i];
			if (part.WantEvent(ID, Cascade))
			{
				Result.Add(part);
			}
		}
		EffectRack effects = _Effects;
		if (effects == null)
		{
			return;
		}
		int j = 0;
		for (int count = effects.Count; j < count; j++)
		{
			Effect effect = effects[j];
			if (effect.WantEvent(ID, Cascade))
			{
				Result.Add(effect);
			}
		}
	}

	public bool IsWaterPuddle()
	{
		LiquidVolume liquidVolume = LiquidVolume;
		if (liquidVolume != null && liquidVolume.MaxVolume < 0)
		{
			return liquidVolume.IsWater();
		}
		return false;
	}

	public bool IsFreshWaterPuddle()
	{
		LiquidVolume liquidVolume = LiquidVolume;
		if (liquidVolume != null && liquidVolume.MaxVolume < 0)
		{
			return liquidVolume.IsFreshWater();
		}
		return false;
	}

	public bool ContainsFreshWater()
	{
		LiquidVolume liquidVolume = LiquidVolume;
		if (liquidVolume != null && liquidVolume.MaxVolume >= 0)
		{
			return liquidVolume.IsFreshWater();
		}
		return false;
	}

	public bool IsTakeable()
	{
		if (Takeable)
		{
			return FireEvent("CanBeTaken");
		}
		return false;
	}

	public int GetHPPercent()
	{
		int result = 100;
		int num = baseHitpoints;
		if (num != 0)
		{
			result = hitpoints * 100 / num;
		}
		return result;
	}

	public string GetHPColor()
	{
		int hPPercent = GetHPPercent();
		if (hPPercent < 15)
		{
			return "&r";
		}
		if (hPPercent < 33)
		{
			return "&R";
		}
		if (hPPercent < 66)
		{
			return "&W";
		}
		if (hPPercent < 100)
		{
			return "&G";
		}
		return "&Y";
	}

	public void GetHPColorAndPriority(out string Color, out int Priority)
	{
		int hPPercent = GetHPPercent();
		if (hPPercent < 15)
		{
			Color = "&r";
			Priority = 400;
		}
		else if (hPPercent < 33)
		{
			Color = "&R";
			Priority = 300;
		}
		else if (hPPercent < 66)
		{
			Color = "&W";
			Priority = 200;
		}
		else if (hPPercent < 100)
		{
			Color = "&G";
			Priority = 75;
		}
		else
		{
			Color = "&Y";
			Priority = 5;
		}
	}

	public bool ShouldAutoexploreAsChest()
	{
		Inventory inventory = Inventory;
		if (inventory == null)
		{
			return false;
		}
		if (Brain != null)
		{
			return false;
		}
		if (!HasPart<Container>())
		{
			return false;
		}
		if (HasIntProperty("Autoexplored"))
		{
			return false;
		}
		if (!Owner.IsNullOrEmpty())
		{
			return false;
		}
		if (inventory.Objects.Count == 0)
		{
			return false;
		}
		if (!Understood())
		{
			return false;
		}
		if (FungalVisionary.VisionLevel <= 0 && HasPart<FungalVision>())
		{
			return false;
		}
		return true;
	}

	public bool CanAutoget(bool takeableOnly = true)
	{
		if (Physics == null)
		{
			return false;
		}
		if (Physics.Owner != null)
		{
			return false;
		}
		if (!Physics.IsReal)
		{
			return false;
		}
		if (IsTemporary)
		{
			return false;
		}
		if (FungalVisionary.VisionLevel <= 0 && HasPart<FungalVision>())
		{
			return false;
		}
		if (!PhaseMatches(XRL.The.Player))
		{
			return false;
		}
		if (IsHidden)
		{
			return false;
		}
		if (takeableOnly && !IsTakeable())
		{
			return false;
		}
		if (HasTagOrProperty("NoAutoget"))
		{
			return false;
		}
		if (HasIntProperty("DroppedByPlayer"))
		{
			return false;
		}
		return true;
	}

	public bool ShouldAutoget()
	{
		if (!CanAutoget())
		{
			return false;
		}
		if (Options.AutogetSpecialItems && IsSpecialItem())
		{
			return true;
		}
		if (GetInventoryCategory() switch
		{
			"Trade Goods" => Options.AutogetTradeGoods, 
			"Food" => Options.AutogetFood, 
			"Books" => Options.AutogetBooks, 
			_ => false, 
		})
		{
			return true;
		}
		bool flag = false;
		double num = 0.0;
		if (Options.AutogetFreshWater && ContainsFreshWater())
		{
			if (!flag)
			{
				num = GetWeight();
				flag = true;
			}
			if (num <= 1.0)
			{
				return true;
			}
		}
		if (Options.AutogetZeroWeight)
		{
			if (!flag)
			{
				num = GetWeight();
				flag = true;
			}
			if (Math.Floor(num) <= 0.0)
			{
				return true;
			}
		}
		if (Options.AutogetNuggets && HasTagOrProperty("Nugget"))
		{
			return true;
		}
		if (Options.AutogetScrap && TinkeringHelpers.ConsiderScrap(this, ThePlayer))
		{
			return true;
		}
		return false;
	}

	public bool ShouldTakeAll()
	{
		if (!IsTakeable())
		{
			return false;
		}
		if (GetInventoryCategory() == "Corpses" && !Options.TakeallCorpses)
		{
			return false;
		}
		return true;
	}

	public bool HasPropertyOrTag(string Name)
	{
		if (!HasProperty(Name))
		{
			return HasTag(Name);
		}
		return true;
	}

	public bool HasIntProperty(string Name)
	{
		if (IntProperty != null && Name != null)
		{
			return IntProperty.ContainsKey(Name);
		}
		return false;
	}

	public bool HasProperty(string Name)
	{
		if (Name == null)
		{
			return false;
		}
		if (Property != null && Property.ContainsKey(Name))
		{
			return true;
		}
		if (IntProperty != null && IntProperty.ContainsKey(Name))
		{
			return true;
		}
		return false;
	}

	public bool HasStringProperty(string Name)
	{
		if (Property != null && Name != null)
		{
			return Property.ContainsKey(Name);
		}
		return false;
	}

	public bool IsInvisibile()
	{
		if (HasPart<Invisibility>())
		{
			return true;
		}
		return false;
	}

	public bool IsEsper()
	{
		if (HasPart<Esper>())
		{
			return true;
		}
		if (Property.TryGetValue("MutationLevel", out var value) && value != null && value.Contains("Esper"))
		{
			return true;
		}
		return false;
	}

	public bool IsImportant()
	{
		int intProperty = GetIntProperty("Important");
		if (intProperty >= 1)
		{
			return true;
		}
		if (intProperty <= -1)
		{
			return false;
		}
		if (HasTagOrProperty("Important"))
		{
			return true;
		}
		if (HasTagOrProperty("QuestItem"))
		{
			return true;
		}
		if (HasPart<StairsUp>())
		{
			return true;
		}
		if (HasPart<StairsDown>())
		{
			return true;
		}
		if (HasTagOrProperty("Storied"))
		{
			return true;
		}
		return false;
	}

	public bool IsMarkedImportantByPlayer()
	{
		return GetIntProperty("Important") == 2;
	}

	public void SetImportant(bool flag, bool force = false, bool player = false)
	{
		if (flag)
		{
			if (force || GetIntProperty("Important") >= 0)
			{
				SetIntProperty("Important", (!player) ? 1 : 2);
			}
		}
		else if (force)
		{
			SetIntProperty("Important", player ? (-2) : (-1));
		}
		else
		{
			RemoveIntProperty("Important");
		}
	}

	public bool ShouldConfirmUseImportant(LargerFolk_GameObject Actor = null)
	{
		if (!IsImportant())
		{
			return false;
		}
		if (Actor != null && !Actor.IsPlayer())
		{
			return false;
		}
		return true;
	}

	public async Task<bool> ConfirmUseImportantAsync(LargerFolk_GameObject Actor = null, string Verb = "use", string Extra = null, int Amount = -1)
	{
		if (!ShouldConfirmUseImportant(Actor))
		{
			return false;
		}
		Extra = ((!Extra.IsNullOrEmpty()) ? (" " + Extra) : "");
		if (Amount == -1)
		{
			Amount = Count;
		}
		if (Amount > 1 && !IsPlural)
		{
			if (await Popup.ShowYesNoAsync(T(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null).Pluralize() + " are important. Are you sure you want to " + Verb + " them" + Extra + "?") != 0)
			{
				return false;
			}
		}
		else if (await Popup.ShowYesNoAsync(T(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + Is + " important. Are you sure you want to " + Verb + " " + them + Extra + "?") != 0)
		{
			return false;
		}
		return true;
	}

	public bool ConfirmUseImportant(LargerFolk_GameObject Actor = null, string Verb = "use", string Extra = null, int Amount = -1)
	{
		if (!ShouldConfirmUseImportant(Actor))
		{
			return true;
		}
		Extra = ((!Extra.IsNullOrEmpty()) ? (" " + Extra) : "");
		if (Amount == -1)
		{
			Amount = Count;
		}
		if (Amount > 1 && !IsPlural)
		{
			if (Popup.ShowYesNo(T(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null).Pluralize() + " are important. Are you sure you want to " + Verb + " them" + Extra + "?") != 0)
			{
				return false;
			}
		}
		else if (Popup.ShowYesNo(T(int.MaxValue, null, null, AsIfKnown: false, Single: true, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + Is + " important. Are you sure you want to " + Verb + " " + them + Extra + "?") != 0)
		{
			return false;
		}
		return true;
	}

	public bool IsChimera()
	{
		if (HasPart<Chimera>())
		{
			return true;
		}
		if (Property.TryGetValue("MutationLevel", out var value) && value != null && value.Contains("Chimera"))
		{
			return true;
		}
		return false;
	}

	public bool IsWall()
	{
		return GetBlueprint().IsWall();
	}

	public bool IsDoor()
	{
		return HasPart<Door>();
	}

	public bool IsDiggable()
	{
		return HasTagOrProperty("Diggable");
	}

	public bool IsSpawnBlocker()
	{
		if (!HasPart<SpawnBlocker>())
		{
			return HasTagOrProperty("SpawnBlocker");
		}
		return true;
	}

	public bool IsHero()
	{
		return HasPart<GivesRep>();
	}

	public bool HasPart(string Name)
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i].Name == Name)
			{
				return true;
			}
		}
		return false;
	}

	public bool HasPart(Type type)
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)PartsList[i].GetType() == type)
			{
				return true;
			}
		}
		return false;
	}

	public bool HasPart<T>() where T : IPart
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)PartsList[i].GetType() == typeof(T))
			{
				return true;
			}
		}
		return false;
	}

	public bool AnyInstalledCybernetics()
	{
		return Body?.AnyInstalledCybernetics() ?? false;
	}

	public bool AnyInstalledCybernetics(Predicate<LargerFolk_GameObject> Filter)
	{
		return Body?.AnyInstalledCybernetics(Filter) ?? false;
	}

	public bool UnequipAndRemove()
	{
		bool flag = true;
		if (Equipped != null)
		{
			flag = EquipmentAPI.UnequipObject(this);
		}
		if (flag)
		{
			InInventory?.Inventory?.RemoveObject(this);
		}
		return flag;
	}

	public bool ForceUnequipAndRemove(bool Silent = false)
	{
		bool flag = true;
		if (Equipped != null)
		{
			flag = EquipmentAPI.ForceUnequipObject(this, Silent);
		}
		if (flag)
		{
			InInventory?.Inventory?.RemoveObject(this);
		}
		return flag;
	}

	public void ForceUnequipRemoveAndRemoveContents(bool Silent = false, bool ExcludeNatural = true)
	{
		Cell currentCell = GetCurrentCell();
		LargerFolk_GameObject gameObject = null;
		if (Equipped != null)
		{
			gameObject = Equipped;
			EquipmentAPI.ForceUnequipObject(this, Silent);
		}
		if (InInventory != null)
		{
			gameObject = InInventory;
			InInventory.Inventory.RemoveObject(this);
		}
		if (gameObject != null)
		{
			using (ScopeDisposedList<LargerFolk_GameObject> scopeDisposedList = ScopeDisposedList<LargerFolk_GameObject>.GetFromPool())
			{
				GetContents(scopeDisposedList);
				foreach (LargerFolk_GameObject item in scopeDisposedList)
				{
					if (!ExcludeNatural || !item.HasTag("NaturalGear"))
					{
						item.RemoveFromContext();
						GameObject gameObject2 = gameObject;
						int? energyCost = 0;
						gameObject2.TakeObject(item, NoStack: false, Silent, energyCost);
					}
				}
				return;
			}
		}
		if (currentCell == null)
		{
			return;
		}
		using ScopeDisposedList<LargerFolk_GameObject> scopeDisposedList2 = ScopeDisposedList<LargerFolk_GameObject>.GetFromPool();
		GetContents(scopeDisposedList2);
		foreach (LargerFolk_GameObject item2 in scopeDisposedList2)
		{
			if (!ExcludeNatural || !item2.HasTag("NaturalGear"))
			{
				item2.RemoveFromContext();
				currentCell.AddObject(item2);
			}
		}
	}

	public void RemoveContents(bool Silent = false, bool ExcludeNatural = true)
	{
		GetContext(out var ObjectContext, out var CellContext);
		if (ObjectContext == null && CellContext == null)
		{
			return;
		}
		using ScopeDisposedList<LargerFolk_GameObject> scopeDisposedList = ScopeDisposedList<LargerFolk_GameObject>.GetFromPool();
		GetContents(scopeDisposedList);
		foreach (LargerFolk_GameObject item in scopeDisposedList)
		{
			if (!ExcludeNatural || !item.HasTag("NaturalGear"))
			{
				item.RemoveFromContext();
				if (ObjectContext != null)
				{
					LargerFolk_GameObject gameObject = ObjectContext;
					int? energyCost = 0;
					gameObject.TakeObject(item, NoStack: false, Silent, energyCost);
				}
				else
				{
					CellContext.AddObject(item);
				}
			}
		}
	}

	public bool Unimplant(bool MoveToInventory = false, List<BodyPart> Parts = null)
	{
		GameObject implantee = Implantee;
		if (implantee == null)
		{
			return false;
		}
		Body body = implantee.Body;
		if (body == null)
		{
			return false;
		}
		int num = 0;
		BodyPart bodyPart;
		while ((bodyPart = body.FindCybernetics(this)) != null)
		{
			Parts?.Add(bodyPart);
			if (++num >= 100)
			{
				Debug.LogError("infinite looping trying to unimplant " + DebugName);
				break;
			}
			bodyPart.Unimplant(MoveToInventory);
		}
		body?.RegenerateDefaultEquipment();
		return true;
	}

	public IList<LargerFolk_GameObject> GetContents(IList<LargerFolk_GameObject> listToFill = null)
	{
		return GetContentsEvent.GetFor(this, listToFill);
	}

	public LargerFolk_GameObject HasItemWithBlueprint(string bp)
	{
		GameObject result = null;
		Inventory inventory = Inventory;
		Body body = Body;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject @object in inventory.Objects)
			{
				if (@object.Blueprint == bp)
				{
					return @object;
				}
			}
		}
		if (body != null)
		{
			foreach (LargerFolk_GameObject equippedObject in body.GetEquippedObjects())
			{
				if (!equippedObject.IsNatural() && equippedObject.Physics.IsReal && equippedObject.Blueprint == bp)
				{
					return equippedObject;
				}
			}
		}
		return result;
	}

	public LargerFolk_GameObject HasItemWithTag(string tag)
	{
		GameObject result = null;
		Inventory inventory = Inventory;
		Body body = Body;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject @object in inventory.Objects)
			{
				if (@object.HasTag(tag))
				{
					return @object;
				}
			}
		}
		if (body != null)
		{
			foreach (LargerFolk_GameObject equippedObject in body.GetEquippedObjects())
			{
				if (!equippedObject.IsNatural() && equippedObject.Physics.IsReal && equippedObject.HasTag(tag))
				{
					return equippedObject;
				}
			}
		}
		return result;
	}

	public LargerFolk_GameObject GetMostValuableItem()
	{
		double num = double.MinValue;
		GameObject result = null;
		Inventory inventory = Inventory;
		Body body = Body;
		if (inventory != null)
		{
			foreach (LargerFolk_GameObject @object in inventory.Objects)
			{
				if (!@object.IsNatural() && @object.Physics.IsReal)
				{
					double value = @object.Value;
					if (@object.HasPart<Commerce>())
					{
						value = @object.GetPart<Commerce>().Value;
					}
					if (value > num)
					{
						num = @object.Value;
						result = @object;
					}
				}
			}
		}
		if (body != null)
		{
			foreach (LargerFolk_GameObject equippedObject in body.GetEquippedObjects())
			{
				if (!equippedObject.IsNatural() && equippedObject.Physics.IsReal && equippedObject.Value > num)
				{
					num = equippedObject.Value;
					result = equippedObject;
				}
			}
		}
		return result;
	}

	public BaseSkill AddSkill(string Class, LargerFolk_GameObject Source = null, string Context = null)
	{
		Type @class = ModManager.ResolveType("XRL.World.Parts.Skill." + Class);
		return AddSkill(@class, Source, Context);
	}

	public BaseSkill AddSkill(Type Class, LargerFolk_GameObject Source = null, string Context = null)
	{
		if (TryGetPart<XRL.World.Parts.Skills>(out var Part))
		{
			BaseSkill baseSkill = Activator.CreateInstance(Class) as BaseSkill;
			if (Part.AddSkill(baseSkill, Source, Context))
			{
				return baseSkill;
			}
		}
		return null;
	}

	public T AddSkill<T>(LargerFolk_GameObject Source = null, string Context = null) where T : BaseSkill, new()
	{
		if (TryGetPart<XRL.World.Parts.Skills>(out var Part))
		{
			T val = new T();
			if (Part.AddSkill(val, Source, Context))
			{
				return val;
			}
		}
		return null;
	}

	public T RequireSkill<T>(LargerFolk_GameObject Source = null, string Context = null) where T : BaseSkill, new()
	{
		if (TryGetPart<T>(out var Part))
		{
			return Part;
		}
		return AddSkill<T>(Source, Context);
	}

	public void RemoveSkill(string Class)
	{
		XRL.World.Parts.Skills part = GetPart<XRL.World.Parts.Skills>();
		if (part != null)
		{
			part.RemoveSkill(GetPart(Class) as BaseSkill);
			RemovePart(Class);
		}
	}

	public bool RemoveSkill<T>() where T : BaseSkill
	{
		if (TryGetPart<T>(out var Part))
		{
			BaseSkill baseSkill = Part;
			if (baseSkill != null && TryGetPart<XRL.World.Parts.Skills>(out var Part2))
			{
				Part2.RemoveSkill(baseSkill);
				RemovePart(Part);
				return true;
			}
		}
		return false;
	}

	public bool HasSkill(string Name)
	{
		return HasPart(Name);
	}

	public bool HasTagOrStringProperty(string Name)
	{
		if (!HasStringProperty(Name))
		{
			return HasTag(Name);
		}
		return true;
	}

	public string GetTagOrStringProperty(string Name, string Default = null)
	{
		return GetStringProperty(Name) ?? GetTag(Name) ?? Default;
	}

	public string GetTagOrStringProperty_RandomSplit(string Name, string Default = null, char Delimiter = ',')
	{
		return GetTagOrStringProperty(Name, Default).Split(Delimiter).GetRandomElement();
	}

	public string GetTag(string Tag, string Default = null)
	{
		return GetBlueprint().GetTag(Tag, Default);
	}

	public bool HasTagOrProperty(string Name)
	{
		if (!HasTag(Name))
		{
			return HasProperty(Name);
		}
		return true;
	}

	public bool HasTagOrIntProperty(string Name)
	{
		if (!HasTag(Name))
		{
			return HasIntProperty(Name);
		}
		return true;
	}

	public string GetPropertyOrTag(string Name, string Default = null)
	{
		if (Name == null)
		{
			return Default;
		}
		if (HasStringProperty(Name))
		{
			return GetStringProperty(Name, Default);
		}
		if (HasIntProperty(Name))
		{
			return GetIntProperty(Name).ToString();
		}
		return GetBlueprint().GetTag(Name, Default);
	}

	public string GetxTag(string Tag, string Value, string Default = null)
	{
		return GetBlueprint().GetxTag(Tag, Value, Default);
	}

	public string GetxTag_CommaDelimited(string Tag, string Value, string Default = null, System.Random R = null)
	{
		return GetBlueprint().GetxTag_CommaDelimited(Tag, Value, Default, R);
	}

	public List<string> GetMutationNames()
	{
		Mutations part = GetPart<Mutations>();
		if (part == null || part.MutationList == null || part.MutationList.Count <= 0)
		{
			return null;
		}
		List<string> list = new List<string>();
		foreach (BaseMutation mutation in part.MutationList)
		{
			list.Add(mutation.DisplayName);
		}
		return list;
	}

	public List<BaseMutation> GetPhysicalMutations()
	{
		return GetMutationsOfCategory("Physical");
	}

	public List<BaseMutation> GetMentalMutations()
	{
		return GetMutationsOfCategory("Mental");
	}

	public List<BaseMutation> GetMutationsOfCategory(string category)
	{
		Mutations part = GetPart<Mutations>();
		if (part == null)
		{
			return new List<BaseMutation>();
		}
		List<BaseMutation> list = new List<BaseMutation>();
		list.AddRange(part.MutationList.Where((BaseMutation m) => m.isCategory(category)));
		return list;
	}

	public T GetPart<T>() where T : IPart
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)PartsList[i].GetType() == typeof(T))
			{
				return (T)PartsList[i];
			}
		}
		return null;
	}

	public IPart GetPart(Type Type)
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)PartsList[i].GetType() == Type)
			{
				return PartsList[i];
			}
		}
		return null;
	}

	public IPart GetPart(string Name)
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i].Name == Name)
			{
				return PartsList[i];
			}
		}
		return null;
	}

	public IPart GetPartExcept(string Name, IPart skip)
	{
		if (skip == null)
		{
			return GetPart(Name);
		}
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i].Name == Name && PartsList[i] != skip)
			{
				return PartsList[i];
			}
		}
		return null;
	}

	public bool TryGetPart<T>(out T Part) where T : IPart
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)PartsList[i].GetType() == typeof(T))
			{
				Part = PartsList[i] as T;
				return true;
			}
		}
		Part = null;
		return false;
	}

	public bool TryGetPartDescendedFrom<T>(out T Part) where T : class
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T)
			{
				Part = PartsList[i] as T;
				return true;
			}
		}
		Part = null;
		return false;
	}

	protected void AddPartInternals(IPart P, bool DoRegistration = true, bool Initial = false, bool Creation = false)
	{
		FlushTransientCache();
		if (P == null)
		{
			return;
		}
		int priority = P.Priority;
		if (priority == int.MinValue)
		{
			PartsList.Add(P);
		}
		else
		{
			int num = PartsList.Count;
			while (num > 0 && PartsList[num - 1].Priority < priority)
			{
				num--;
			}
			PartsList.Insert(num, P);
			PartsCascade++;
		}
		if (DoRegistration)
		{
			P.ParentObject = this;
			P.ApplyRegistrar(this);
		}
		if (Initial)
		{
			P.Initialize();
		}
		P.Attach();
		if (!Creation)
		{
			P.AddedAfterCreation();
		}
	}

	public IPart AddPart(IPart P, bool DoRegistration = true, bool Creation = false)
	{
		if (!(P is IModification modification))
		{
			AddPartInternals(P, DoRegistration, Initial: true, Creation);
		}
		else
		{
			if (modification.Tier == 0)
			{
				modification.ApplyTier(GetTier());
			}
			ApplyModification(modification, DoRegistration, null, Creation);
		}
		if (!Creation)
		{
			ResetNameCache();
		}
		return P;
	}

	public IModification AddPart(IModification P, bool DoRegistration = true, bool Creation = false)
	{
		AddPartInternals(P, DoRegistration, Initial: true, Creation);
		return P;
	}

	public T AddPart<T>(T P, bool DoRegistration = true, bool Creation = false) where T : IPart
	{
		return AddPart((IPart)P, DoRegistration, Creation) as T;
	}

	public T AddPart<T>(bool DoRegistration = true, bool Creation = false) where T : IPart, new()
	{
		return AddPart((IPart)new T(), DoRegistration, Creation) as T;
	}

	public T RequirePart<T>(bool Creation = false) where T : IPart, new()
	{
		T part = GetPart<T>();
		if (part != null)
		{
			return part;
		}
		return AddPart<T>(DoRegistration: true, Creation);
	}

	public bool ApplyModification(IModification ModPart, bool DoRegistration = true, LargerFolk_GameObject Actor = null, bool Creation = false)
	{
		return ItemModding.ApplyModification(this, ModPart, DoRegistration, Actor, Creation);
	}

	public bool ApplyModification(string ModPartName, bool DoRegistration = true, LargerFolk_GameObject Actor = null, bool Creation = false)
	{
		return ItemModding.ApplyModification(this, ModPartName, DoRegistration, Actor, Creation);
	}

	public bool ApplyModification(string ModPartName, int Tier, bool DoRegistration = true, LargerFolk_GameObject Actor = null, bool Creation = false)
	{
		return ItemModding.ApplyModification(this, ModPartName, Tier, DoRegistration, Actor, Creation);
	}

	public bool HasPartDescendedFrom<T>() where T : class
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T)
			{
				return true;
			}
		}
		return false;
	}

	public void ApplyActiveRegistrar()
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			PartsList[i].ApplyRegistrar(this, Active: true);
		}
		if (_Effects != null)
		{
			int j = 0;
			for (int count2 = _Effects.Count; j < count2; j++)
			{
				_Effects[j].ApplyRegistrar(this, Active: true);
			}
		}
	}

	public void ApplyActiveUnregistrar()
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			PartsList[i].ApplyUnregistrar(this, Active: true);
		}
		if (_Effects != null)
		{
			int j = 0;
			for (int count2 = _Effects.Count; j < count2; j++)
			{
				_Effects[j].ApplyUnregistrar(this, Active: true);
			}
		}
	}

	public T GetPartDescendedFrom<T>() where T : class
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T)
			{
				return PartsList[i] as T;
			}
		}
		return null;
	}

	public T GetPartDescendedFrom<T>(Predicate<T> Filter) where T : class
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T && Filter(PartsList[i] as T))
			{
				return PartsList[i] as T;
			}
		}
		return null;
	}

	public List<T> GetPartsDescendedFrom<T>() where T : class
	{
		List<T> list = new List<T>();
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T)
			{
				list.Add(PartsList[i] as T);
			}
		}
		return list;
	}

	public List<T> GetPartsDescendedFrom<T>(Predicate<T> Filter) where T : class
	{
		List<T> list = new List<T>();
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T && Filter(PartsList[i] as T))
			{
				list.Add(PartsList[i] as T);
			}
		}
		return list;
	}

	public T GetFirstPartDescendedFrom<T>() where T : class
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T)
			{
				return PartsList[i] as T;
			}
		}
		return null;
	}

	public T GetFirstPartDescendedFrom<T>(Predicate<T> Filter) where T : class
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is T && Filter(PartsList[i] as T))
			{
				return PartsList[i] as T;
			}
		}
		return null;
	}

	public IFlightSource GetFirstFlightSourcePart()
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is IFlightSource)
			{
				return PartsList[i] as IFlightSource;
			}
		}
		return null;
	}

	public IFlightSource GetFirstFlightSourcePart(Predicate<IFlightSource> Filter)
	{
		if (Filter == null)
		{
			return GetFirstFlightSourcePart();
		}
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (PartsList[i] is IFlightSource && Filter(PartsList[i] as IFlightSource))
			{
				return PartsList[i] as IFlightSource;
			}
		}
		return null;
	}

	public IEnumerable<IPart> LoopParts()
	{
		foreach (IPart parts in PartsList)
		{
			yield return parts;
		}
	}

	public void ForeachPart(Action<IPart> Proc)
	{
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			Proc(PartsList[i]);
		}
	}

	public bool ForeachPart(Predicate<IPart> Proc)
	{
		foreach (IPart parts in PartsList)
		{
			if (!Proc(parts))
			{
				return false;
			}
		}
		return true;
	}

	public void ForeachPartDescendedFrom<T>(Action<T> Proc) where T : class
	{
		foreach (IPart parts in PartsList)
		{
			if (parts is T obj)
			{
				Proc(obj);
			}
		}
	}

	public bool ForeachPartDescendedFrom<T>(Predicate<T> Proc) where T : class
	{
		foreach (IPart parts in PartsList)
		{
			if (parts is T obj && !Proc(obj))
			{
				return false;
			}
		}
		return true;
	}

	public bool RemovePart(Type Type)
	{
		IPart[] array = PartsList.GetArray();
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)array[i].GetType() == Type)
			{
				RemovePartAt(i);
				return true;
			}
		}
		return false;
	}

	public bool RemovePart(string Name)
	{
		IPart[] array = PartsList.GetArray();
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if (array[i].Name == Name)
			{
				RemovePartAt(i);
				return true;
			}
		}
		return false;
	}

	public bool RemovePart<T>() where T : IPart
	{
		IPart[] array = PartsList.GetArray();
		int i = 0;
		for (int count = PartsList.Count; i < count; i++)
		{
			if ((object)array[i].GetType() == typeof(T))
			{
				RemovePartAt(i);
				return true;
			}
		}
		return false;
	}

	public IPart RemovePartAt(int Index)
	{
		IPart part = PartsList.TakeAt(Index);
		if (part.Priority != int.MinValue)
		{
			PartsCascade--;
		}
		part.ApplyUnregistrar(this);
		if (RegisteredPartEvents != null)
		{
			foreach (KeyValuePair<string, List<IPart>> registeredPartEvent in RegisteredPartEvents)
			{
				while (registeredPartEvent.Value.Contains(part))
				{
					registeredPartEvent.Value.Remove(part);
				}
			}
			CleanRegisteredPartEvents();
		}
		part.Remove();
		part.ParentObject = null;
		FlushTransientCache();
		return part;
	}

	public void RemovePart(IPart Part)
	{
		if (Part != null)
		{
			int num = Array.IndexOf(PartsList.GetArray(), Part, 0, PartsList.Count);
			if (num != -1)
			{
				RemovePartAt(num);
			}
		}
	}

	public void RemovePartsDescendedFrom<T>() where T : class
	{
		for (int num = PartsList.Count - 1; num >= 0; num--)
		{
			if (PartsList[num] is T)
			{
				RemovePartAt(num);
			}
		}
	}

	public void CleanRegisteredPartEvents()
	{
		if (RegisteredPartEvents == null)
		{
			return;
		}
		string text = null;
		while (true)
		{
			text = null;
			foreach (KeyValuePair<string, List<IPart>> registeredPartEvent in RegisteredPartEvents)
			{
				if (registeredPartEvent.Value.Count <= 0)
				{
					text = registeredPartEvent.Key;
					break;
				}
			}
			if (text != null)
			{
				RegisteredPartEvents.Remove(text);
				text = null;
				continue;
			}
			break;
		}
	}

	public bool isDamaged()
	{
		if (Statistics == null)
		{
			return false;
		}
		if (!Statistics.TryGetValue("Hitpoints", out var value))
		{
			return false;
		}
		return value.Penalty > 0;
	}

	public bool isDamaged(double howMuch = 1.0, bool inclusive = false)
	{
		if (Statistics == null)
		{
			return false;
		}
		if (!Statistics.TryGetValue("Hitpoints", out var value))
		{
			return false;
		}
		if (inclusive)
		{
			return (double)value.Value <= (double)value.BaseValue * howMuch;
		}
		return (double)value.Value < (double)value.BaseValue * howMuch;
	}

	public bool isDamaged(int percentageHowMuch, bool inclusive = false)
	{
		if (Statistics == null)
		{
			return false;
		}
		if (!Statistics.TryGetValue("Hitpoints", out var value))
		{
			return false;
		}
		if (inclusive)
		{
			return value.Value <= value.BaseValue * percentageHowMuch / 100;
		}
		return value.Value < value.BaseValue * percentageHowMuch / 100;
	}

	public int GetPercentDamaged()
	{
		if (!Statistics.TryGetValue("Hitpoints", out var value))
		{
			return 0;
		}
		return 100 - value.Value * 100 / value.BaseValue;
	}

	public LargerFolk_GameObject equippedOrSelf()
	{
		return Equipped ?? this;
	}

	public bool IsVisible()
	{
		if (IsPlayer())
		{
			return true;
		}
		if (HasPropertyOrTag("Non"))
		{
			return false;
		}
		if (Physics == null)
		{
			return false;
		}
		if (Render == null || !Render.Visible)
		{
			return false;
		}
		if (FungalVisionary.VisionLevel <= 0 && HasPart<FungalVision>())
		{
			return false;
		}
		if (IsHidden)
		{
			return false;
		}
		if (HasPart<TerrainTravel>())
		{
			return true;
		}
		Cell currentCell = CurrentCell;
		if (currentCell != null)
		{
			if (OnWorldMap())
			{
				return true;
			}
			if (ThePlayer == null)
			{
				return false;
			}
			int num = currentCell.DistanceTo(ThePlayer);
			if (num > ThePlayer.GetVisibilityRadius())
			{
				return false;
			}
			if (!ConsiderSolidInRenderingContext() && (int)currentCell.GetLight() < 228)
			{
				int i = 0;
				for (int count = currentCell.Objects.Count; i < count; i++)
				{
					LargerFolk_GameObject gameObject = currentCell.Objects[i];
					if (gameObject != this && gameObject.ConsiderSolidInRenderingContext())
					{
						return false;
					}
				}
			}
			if (currentCell.IsVisible())
			{
				return true;
			}
			if (num == 1)
			{
				Zone parentZone = currentCell.ParentZone;
				Zone currentZone = ThePlayer.CurrentZone;
				if (parentZone != currentZone)
				{
					if (parentZone.Z == currentZone.Z)
					{
						return true;
					}
					if (parentZone.Z == currentZone.Z + 1)
					{
						if (currentCell.HasObjectWithPart("StairsUp"))
						{
							return true;
						}
					}
					else if (parentZone.Z == currentZone.Z - 1 && currentCell.HasObjectWithPart("StairsDown"))
					{
						return true;
					}
				}
			}
		}
		return InInventory?.IsVisible() ?? Equipped?.IsVisible() ?? Implantee?.IsVisible() ?? false;
	}

	public string GetGenotype()
	{
		return GetPropertyOrTag("Genotype");
	}

	public string GetSubtype()
	{
		return GetPropertyOrTag("Subtype");
	}

	public bool IsTrueKin()
	{
		return IsTrueKinEvent.Check(this);
	}

	public bool IsMutant()
	{
		return IsMutantEvent.Check(this);
	}

	public int GetEpistemicStatus(Examiner Ex)
	{
		return Ex?.GetEpistemicStatus() ?? 2;
	}

	public bool SetEpistemicStatus(int EpistemicStatus)
	{
		if (TryGetPart<Examiner>(out var Part))
		{
			Part.SetEpistemicStatus(EpistemicStatus);
			return true;
		}
		return false;
	}

	public int GetEpistemicStatus()
	{
		return GetEpistemicStatus(GetPart<Examiner>());
	}

	public int GetBlueprintEpistemicStatus()
	{
		return Examiner.GetBlueprintEpistemicStatus(GetTinkeringBlueprint());
	}

	public bool MakeUnderstood(bool ShowMessage = false)
	{
		return GetPart<Examiner>()?.MakeUnderstood(ShowMessage) ?? false;
	}

	public bool MakeUnderstood(out string Message)
	{
		Message = null;
		return GetPart<Examiner>()?.MakeUnderstood(out Message) ?? false;
	}

	public bool Understood(Examiner Ex)
	{
		return GetEpistemicStatus(Ex) == 2;
	}

	public bool Understood()
	{
		return GetEpistemicStatus() == 2;
	}

	public bool IsBlueprintUnderstood()
	{
		return GetBlueprintEpistemicStatus() == 2;
	}

	public bool MakePartiallyUnderstood(bool ShowMessage = false)
	{
		return GetPart<Examiner>()?.MakePartiallyUnderstood(ShowMessage) ?? false;
	}

	public bool MakePartiallyUnderstood(out string Message)
	{
		Message = null;
		return GetPart<Examiner>()?.MakePartiallyUnderstood(out Message) ?? false;
	}

	public bool PartiallyUnderstood(Examiner Ex)
	{
		return GetEpistemicStatus(Ex) == 1;
	}

	public bool PartiallyUnderstood()
	{
		return GetEpistemicStatus() == 1;
	}

	public bool IsBlueprintPartiallyUnderstood()
	{
		return GetBlueprintEpistemicStatus() == 1;
	}

	public int QueryCharge(bool LiveOnly = false, long GridMask = 0L, bool IncludeTransient = true, bool IncludeBiological = true)
	{
		bool liveOnly = LiveOnly;
		return QueryChargeEvent.Retrieve(this, this, 1, GridMask, Forced: false, liveOnly, IncludeTransient, IncludeBiological);
	}

	public bool TestCharge(int Charge, bool LiveOnly = false, long GridMask = 0L, bool IncludeTransient = true, bool IncludeBiological = true)
	{
		if (Charge <= 0)
		{
			return true;
		}
		bool liveOnly = LiveOnly;
		return TestChargeEvent.Check(this, this, Charge, 1, GridMask, Forced: false, liveOnly, IncludeTransient, IncludeBiological);
	}

	public bool UseCharge(int Charge, bool LiveOnly = false, long GridMask = 0L, bool IncludeTransient = true, bool IncludeBiological = true, int? PowerLoadLevel = null)
	{
		if (Charge <= 0)
		{
			return true;
		}
		int powerLoadLevel = PowerLoadLevel ?? GetPowerLoadLevelEvent.GetFor(this);
		bool liveOnly;
		if (Equipped != null)
		{
			liveOnly = LiveOnly;
			UsingChargeEvent.Send(this, this, Charge, 1, GridMask, Forced: false, liveOnly, IncludeTransient, IncludeBiological, powerLoadLevel);
		}
		liveOnly = LiveOnly;
		return UseChargeEvent.Check(this, this, Charge, 1, GridMask, Forced: false, liveOnly, IncludeTransient, IncludeBiological, powerLoadLevel);
	}

	public int QueryChargeStorage(bool IncludeTransient = true, bool IncludeBiological = true, LargerFolk_GameObject Source = null)
	{
		return QueryChargeStorageEvent.Retrieve(this, Source ?? this, IncludeTransient, 0L, Forced: false, LiveOnly: false, IncludeBiological);
	}

	public int QueryChargeStorage(out int Transient, out bool UnlimitedTransient, LargerFolk_GameObject Source = null, bool IncludeBiological = true)
	{
		QueryChargeStorageEvent.Retrieve(out var E, this, Source ?? this, IncludeTransient: true, 0L, Forced: false, LiveOnly: false, IncludeBiological);
		if (E != null)
		{
			Transient = E.Transient;
			UnlimitedTransient = E.UnlimitedTransient;
			return E.Amount;
		}
		Transient = 0;
		UnlimitedTransient = false;
		return 0;
	}

	public int ChargeAvailable(int Charge, long GridMask = 0L, int MultipleCharge = 1, bool Forced = false, LargerFolk_GameObject Source = null)
	{
		if (Charge <= 0)
		{
			return 0;
		}
		Charge *= MultipleCharge;
		ChargeAvailableEvent.Send(out var E, this, Source ?? this, Charge, MultipleCharge, GridMask, Forced);
		if (E == null)
		{
			return FinishChargeAvailableEvent.Send(this, Source ?? this, Charge, MultipleCharge, GridMask, Forced);
		}
		return FinishChargeAvailableEvent.Send(this, E);
	}

	public int QueryChargeProduction()
	{
		return QueryChargeProductionEvent.Retrieve(this, this, 0L);
	}

	public override string ToString()
	{
		if (IsPlayer())
		{
			return "The Player";
		}
		if (this == Invalid)
		{
			return "Invalid";
		}
		return Blueprint;
	}

	public void StripOffGear()
	{
		Body?.GetBody()?.UnequipPartAndChildren();
		Inventory inventory = Inventory;
		if (inventory == null)
		{
			return;
		}
		foreach (LargerFolk_GameObject @object in inventory.GetObjects())
		{
			if (!@object.IsNatural())
			{
				inventory.RemoveObject(@object);
			}
		}
	}

	public void RandomlySpendPoints(int maxAPtospend = int.MaxValue, int maxSPtospend = int.MaxValue, int maxMPtospend = int.MaxValue, StringBuilder result = null)
	{
		int num = Math.Max(0, Stat("AP") - maxAPtospend);
		while (Stat("AP") > num)
		{
			int num2 = Stat("AP");
			Statistics["AP"].Penalty++;
			int num3 = XRL.Rules.Stat.Random(1, 6);
			if (num3 == 1)
			{
				Statistics["Strength"].BaseValue++;
			}
			if (num3 == 2)
			{
				Statistics["Intelligence"].BaseValue++;
			}
			if (num3 == 3)
			{
				Statistics["Willpower"].BaseValue++;
			}
			if (num3 == 4)
			{
				Statistics["Agility"].BaseValue++;
			}
			if (num3 == 5)
			{
				Statistics["Toughness"].BaseValue++;
			}
			if (num3 == 6)
			{
				Statistics["Ego"].BaseValue++;
			}
			if (Stat("AP") == num2)
			{
				break;
			}
		}
		int num4 = Math.Max(0, Stat("SP") - maxSPtospend);
		while (Stat("SP") > num4)
		{
			int num5 = Stat("SP");
			List<PowerEntry> list = new List<PowerEntry>(64);
			List<int> list2 = new List<int>();
			foreach (SkillEntry value in SkillFactory.Factory.SkillList.Values)
			{
				if (value.Initiatory && !HasSkill(value.Class))
				{
					continue;
				}
				foreach (PowerEntry value2 in value.Powers.Values)
				{
					int cost = value2.Cost;
					if (cost == 0)
					{
						cost = value.Cost;
					}
					if (cost <= GetStatValue("SP") && value2.MeetsRequirements(this))
					{
						list.Add(value2);
						list2.Add(cost);
					}
				}
			}
			if (list.Count <= 0)
			{
				break;
			}
			int index = XRL.Rules.Stat.Random(0, list2.Count - 1);
			Statistics["SP"].Penalty += list2[index];
			object obj = Activator.CreateInstance(ModManager.ResolveType("XRL.World.Parts.Skill." + list[index].Class));
			GetPart<XRL.World.Parts.Skills>().AddSkill(obj as BaseSkill);
			if (Stat("SP") == num5)
			{
				break;
			}
		}
		int num6 = Math.Max(0, Stat("MP") - maxMPtospend);
		while (Stat("MP") > num6)
		{
			int num7 = Stat("MP");
			Mutations part = GetPart<Mutations>();
			if (part == null)
			{
				break;
			}
			if (Stat("MP") - num6 >= 4)
			{
				if (MutationsAPI.RandomlyMutate(this, null, null, allowMultipleDefects: false, result) == null)
				{
					break;
				}
				Statistics["MP"].Penalty += 4;
			}
			else
			{
				if (part.MutationList.Count == 0)
				{
					break;
				}
				BaseMutation randomElement = part.MutationList.Where((BaseMutation m) => m.CanIncreaseLevel()).GetRandomElement();
				if (randomElement != null)
				{
					part.LevelMutation(randomElement, randomElement.BaseLevel + 1);
					if (result != null)
					{
						result.Append(" ");
						result.Append(Poss("base rank in " + randomElement.DisplayName + " increases to {{C|" + randomElement.BaseLevel + "}}!"));
					}
					UseMP(1, "RandomlySpendPoints");
				}
			}
			if (Stat("MP") == num7)
			{
				break;
			}
		}
	}

	public int GetPsychicGlimmer(List<LargerFolk_GameObject> domChain = null)
	{
		if (HasEffect<Dominated>())
		{
			Dominated effect = GetEffect<Dominated>();
			if (effect != null && effect.Dominator != null)
			{
				if (domChain == null)
				{
					domChain = new List<LargerFolk_GameObject>(1) { this };
				}
				else
				{
					if (domChain.Contains(this))
					{
						goto IL_004b;
					}
					domChain.Add(this);
				}
				return effect.Dominator.GetPsychicGlimmer(domChain);
			}
		}
		goto IL_004b;
		IL_004b:
		return GetPsychicGlimmerEvent.GetFor(this, GetIntProperty("GlimmerModifier"));
	}

	public bool InActiveZone()
	{
		return CurrentZone == XRLCore.Core.Game.ZoneManager.ActiveZone;
	}

	public bool IsPotentiallyMobile()
	{
		bool Immobile = true;
		bool Waterbound = false;
		bool WallWalker = false;
		Brain?.CheckMobility(out Immobile, out Waterbound, out WallWalker);
		return !Immobile;
	}

	public bool IsMobile()
	{
		if (!IsPotentiallyMobile())
		{
			return false;
		}
		if (IsFrozen())
		{
			return false;
		}
		return FireEvent(eIsMobile);
	}

	public bool CanHypersensesDetect()
	{
		return FireEvent(eCanHypersensesDetect);
	}

	public bool IsCarryingObject(string Blueprint)
	{
		Inventory inventory = Inventory;
		if (inventory != null)
		{
			for (int i = 0; i < inventory.Objects.Count; i++)
			{
				if (inventory.Objects[i].Blueprint == Blueprint)
				{
					return true;
				}
			}
		}
		Body body = Body;
		if (body != null && body.HasEquippedItem(Blueprint))
		{
			return true;
		}
		return false;
	}

	public LargerFolk_GameObject FindEquippedItem(Predicate<LargerFolk_GameObject> Filter)
	{
		return Body?.FindEquippedItem(Filter);
	}

	public bool HasEquippedItem(string Blueprint)
	{
		return Body?.HasEquippedItem(Blueprint) ?? false;
	}

	public bool HasEquippedItem(Predicate<LargerFolk_GameObject> Filter)
	{
		return Body?.HasEquippedItem(Filter) ?? false;
	}

	public bool MovingIntoWouldCreateContainmentLoop(LargerFolk_GameObject Object)
	{
		if (Object == this)
		{
			return true;
		}
		GameObject inInventory = Object.InInventory;
		if (inInventory == null)
		{
			return false;
		}
		return MovingIntoWouldCreateContainmentLoop(inInventory);
	}

	public bool IsPlayer()
	{
		if (XRLCore.Core.Game == null)
		{
			return false;
		}
		return this == XRLCore.Core.Game.Player.Body;
	}

	public bool IsOriginalPlayerBody()
	{
		return HasStringProperty("OriginalPlayerBody");
	}

	private string RetrieveEquipProfile(out LargerFolk_GameObject User, out bool IsCyber)
	{
		string text = null;
		IsCyber = false;
		User = null;
		CyberneticsBaseItem part = GetPart<CyberneticsBaseItem>();
		if (part != null)
		{
			IsCyber = true;
			text = part.Slots;
			User = part.ImplantedOn;
			if (User == null)
			{
				return null;
			}
			return text;
		}
		User = Equipped;
		if (User == null)
		{
			return null;
		}
		text = UsesSlots;
		if (!text.IsNullOrEmpty())
		{
			return text;
		}
		Armor part2 = GetPart<Armor>();
		if (part2 != null)
		{
			text = part2.WornOn;
			if (!text.IsNullOrEmpty())
			{
				return text;
			}
		}
		XRL.World.Parts.Shield part3 = GetPart<XRL.World.Parts.Shield>();
		if (part3 != null)
		{
			text = part3.WornOn;
			if (!text.IsNullOrEmpty())
			{
				return text;
			}
		}
		MissileWeapon part4 = GetPart<MissileWeapon>();
		if (part4 != null)
		{
			text = part4.SlotType;
			if (!text.IsNullOrEmpty())
			{
				return text;
			}
		}
		return GetPart<MeleeWeapon>()?.Slot;
	}

	public LargerFolk_GameObject EquippedProperlyBy()
	{
		bool IsCyber = false;
		GameObject User = null;
		string text = RetrieveEquipProfile(out User, out IsCyber);
		if (text.IsNullOrEmpty())
		{
			return null;
		}
		Body body = User?.Body;
		if (body == null)
		{
			return null;
		}
		if (IsCyber)
		{
			if (!body.CheckSlotCyberneticsMatch(this, text))
			{
				return null;
			}
		}
		else if (EquipAsDefaultBehavior())
		{
			if (!body.CheckSlotDefaultBehaviorMatch(this, text))
			{
				return null;
			}
		}
		else if (!body.CheckSlotEquippedMatch(this, text))
		{
			return null;
		}
		return User;
	}

	public bool IsEquippedProperly(BodyPart ProspectivelyCheckAgainstPart = null)
	{
		bool IsCyber = false;
		GameObject User = null;
		string text = RetrieveEquipProfile(out User, out IsCyber);
		if (text.IsNullOrEmpty())
		{
			return false;
		}
		if (ProspectivelyCheckAgainstPart == null)
		{
			if (EquipAsDefaultBehavior())
			{
				return User.Body?.CheckSlotDefaultBehaviorMatch(this, text) ?? false;
			}
			if (IsCyber)
			{
				return User.Body?.CheckSlotCyberneticsMatch(this, text) ?? false;
			}
			return User.Body?.CheckSlotEquippedMatch(this, text) ?? false;
		}
		if (text.IndexOf(',') != -1)
		{
			List<string> list = text.CachedCommaExpansion();
			if (!list.Contains("*") && !list.Contains(ProspectivelyCheckAgainstPart.Type) && !list.Contains(ProspectivelyCheckAgainstPart.VariantType))
			{
				return false;
			}
		}
		else if (text != "*" && ProspectivelyCheckAgainstPart.Type != text && ProspectivelyCheckAgainstPart.VariantType != text)
		{
			return false;
		}
		return true;
	}

	public bool IsEquippedProperly(string OnType)
	{
		bool IsCyber = false;
		GameObject User = null;
		string text = RetrieveEquipProfile(out User, out IsCyber);
		if (text.IsNullOrEmpty())
		{
			return false;
		}
		if (text.IndexOf(',') != -1)
		{
			List<string> list = text.CachedCommaExpansion();
			if (!list.Contains("*") && !list.Contains(OnType))
			{
				return false;
			}
		}
		else if (text != "*" && OnType != text)
		{
			return false;
		}
		return true;
	}

	public bool IsWorn(BodyPart ProspectivelyCheckAgainstPart = null)
	{
		string text = null;
		Armor part = GetPart<Armor>();
		if (part == null)
		{
			XRL.World.Parts.Shield part2 = GetPart<XRL.World.Parts.Shield>();
			if (part2 == null)
			{
				return false;
			}
			text = UsesSlots;
			if (text.IsNullOrEmpty())
			{
				text = part2.WornOn;
			}
		}
		else
		{
			text = UsesSlots;
			if (text.IsNullOrEmpty())
			{
				text = part.WornOn;
			}
		}
		if (ProspectivelyCheckAgainstPart == null)
		{
			if (EquipAsDefaultBehavior())
			{
				return Equipped?.Body?.CheckSlotDefaultBehaviorMatch(this, text) == true;
			}
			return Equipped?.Body?.CheckSlotEquippedMatch(this, text) == true;
		}
		if (text.IndexOf(',') != -1)
		{
			List<string> list = text.CachedCommaExpansion();
			if (!list.Contains("*") && !list.Contains(ProspectivelyCheckAgainstPart.Type))
			{
				return false;
			}
		}
		else if (text != "*" && ProspectivelyCheckAgainstPart.Type != text)
		{
			return false;
		}
		return true;
	}

	public bool IsEquippedOnLimbType(string Type)
	{
		if (Equipped == null)
		{
			return false;
		}
		return Equipped.Body?.IsItemEquippedOnLimbType(this, Type) ?? false;
	}

	public bool IsHeld()
	{
		if (!IsEquippedOnLimbType("Hand"))
		{
			return IsEquippedOnLimbType("Missile Weapon");
		}
		return true;
	}

	public bool IsEquippedOrDefaultOfPrimary(LargerFolk_GameObject holder)
	{
		if (holder == null)
		{
			return false;
		}
		return holder.Body?.IsPrimaryWeapon(this) ?? false;
	}

	public bool IsEquippedInMainHand()
	{
		return EquippedOn()?.Primary ?? false;
	}

	public bool IsEquippedAsThrownWeapon()
	{
		return IsEquippedOnLimbType("Thrown Weapon");
	}

	public bool SameAs(LargerFolk_GameObject GO)
	{
		if (Blueprint != GO.Blueprint)
		{
			return false;
		}
		if (PartsList.Count != GO.PartsList.Count)
		{
			return false;
		}
		if ((RegisteredPartEvents?.Count ?? 0) != (GO.RegisteredPartEvents?.Count ?? 0))
		{
			return false;
		}
		if ((_Effects?.Count ?? 0) != (GO._Effects?.Count ?? 0))
		{
			return false;
		}
		if ((RegisteredEffectEvents?.Count ?? 0) != (GO.RegisteredEffectEvents?.Count ?? 0))
		{
			return false;
		}
		if (Statistics.Count != GO.Statistics.Count)
		{
			return false;
		}
		foreach (Statistic value2 in Statistics.Values)
		{
			if (!GO.Statistics.TryGetValue(value2.Name, out var value))
			{
				return false;
			}
			if (!value.SameAs(value2))
			{
				return false;
			}
		}
		for (int i = 0; i < PartsList.Count; i++)
		{
			IPart part = GO.GetPart(PartsList[i].Name);
			if (part == null)
			{
				return false;
			}
			if (!part.SameAs(PartsList[i]))
			{
				return false;
			}
		}
		if (_Effects != null && _Effects.Count > 0)
		{
			SameAsEffectsUsed.Clear();
			foreach (Effect effect in GO._Effects)
			{
				string name = effect.GetType().Name;
				bool flag = false;
				foreach (Effect effect2 in _Effects)
				{
					if (effect2.GetType().Name == name && effect2.SameAs(effect) && !SameAsEffectsUsed.Contains(effect2))
					{
						flag = true;
						SameAsEffectsUsed.Add(effect2);
						break;
					}
				}
				if (!flag)
				{
					return false;
				}
			}
			if (SameAsEffectsUsed.Count != _Effects.Count)
			{
				return false;
			}
		}
		if (GetIntProperty("Important") != GO.GetIntProperty("Important"))
		{
			return false;
		}
		return true;
	}

	public int GetBodyPartCountEquippedOn(LargerFolk_GameObject Object)
	{
		return Body?.GetPartCountEquippedOn(Object) ?? 0;
	}

	public int RemoveBodyPartsByManager(string Manager, bool EvenIfDismembered = false)
	{
		return Body?.RemovePartsByManager(Manager, EvenIfDismembered) ?? 0;
	}

	public List<BodyPart> GetBodyPartsByManager(string Manager, bool EvenIfDismembered = false)
	{
		List<BodyPart> list = new List<BodyPart>();
		Body?.GetPartsByManager(Manager, list, EvenIfDismembered);
		return list;
	}

	public BodyPart GetBodyPartByManager(string Manager, bool EvenIfDismembered = false)
	{
		return Body?.GetPartByManager(Manager, EvenIfDismembered);
	}

	public BodyPart GetBodyPartByManager(string Manager, string Type, bool EvenIfDismembered = false)
	{
		return Body?.GetPartByManager(Manager, Type, EvenIfDismembered);
	}

	public BodyPart GetBodyPartByID(int ID, bool EvenIfDismembered = false)
	{
		return Body.GetPartByID(ID, EvenIfDismembered);
	}

	public BodyPart FindEquippedObject(LargerFolk_GameObject GO)
	{
		return Body?.FindEquippedItem(GO);
	}

	public BodyPart FindEquippedObject(string Blueprint)
	{
		return Body?.FindEquippedItem(Blueprint);
	}

	public bool HasEquippedObject(string Blueprint)
	{
		return Body?.FindEquippedItem(Blueprint) != null;
	}

	public BodyPart FindCybernetics(LargerFolk_GameObject GO)
	{
		return Body?.FindCybernetics(GO);
	}

	public bool IsADefaultBehavior(LargerFolk_GameObject obj)
	{
		return Body?.IsADefaultBehavior(obj) ?? false;
	}

	public void FugueVFX()
	{
		if (!Options.DisableImposters)
		{
			Cell currentCell = GetCurrentCell();
			if (currentCell != null && currentCell.InActiveZone)
			{
				CombatJuice.playPrefabAnimation(currentCell.Location, "Abilities/AbilityVFXFugueClone", ID);
			}
		}
	}

	public void SmokePuff()
	{
		if (!Options.DisableImposters)
		{
			Cell currentCell = GetCurrentCell();
			if (currentCell != null && currentCell.InActiveZone)
			{
				CombatJuice.playPrefabAnimation(currentCell.Location, "Particles/SmokePuff");
			}
		}
		else
		{
			Smoke(150, 180);
		}
	}

	public void Smoke(int StartAngle, int EndAngle)
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell != null && currentCell.ParentZone.IsActive())
		{
			ParticleFX.Smoke(currentCell.X, currentCell.Y, StartAngle, EndAngle);
		}
	}

	public void Smoke()
	{
		Smoke(85, 185);
	}

	public LargerFolk_GameObject GetPrimaryWeapon()
	{
		return Body?.GetMainWeapon(null, NeedPrimary: true, FailDownFromPrimary: true) ?? Create("DefaultFist");
	}

	public Brain.FeelingLevel GetFeelingLevel(LargerFolk_GameObject Object)
	{
		return Brain?.GetFeelingLevel(Object) ?? Brain.FeelingLevel.Neutral;
	}

	public bool IsHostileTowards(LargerFolk_GameObject Object)
	{
		if (XRL.The.Core.IgnoreMe && Object != null && Object.IsPlayer())
		{
			return false;
		}
		return Brain?.IsHostileTowards(Object) ?? false;
	}

	public bool IsAlliedTowards(LargerFolk_GameObject Object)
	{
		return Brain?.IsAlliedTowards(Object) ?? false;
	}

	public bool IsNeutralTowards(LargerFolk_GameObject Object)
	{
		return Brain?.IsNeutralTowards(Object) ?? false;
	}

	public bool IsRegardedWithHostilityBy(LargerFolk_GameObject Object)
	{
		return Object?.IsHostileTowards(this) ?? false;
	}

	private bool IsRegardedWithLocalHostilityBy(LargerFolk_GameObject Object)
	{
		if (Object == null)
		{
			return false;
		}
		if (Object.IsHostileTowards(this))
		{
			return Object.PhaseAndFlightMatches(this);
		}
		return false;
	}

	public bool IsRegardedAsAnAllyBy(LargerFolk_GameObject Object)
	{
		return Object?.IsAlliedTowards(this) ?? false;
	}

	public bool IsRegardedNeutrallyBy(LargerFolk_GameObject Object)
	{
		return Object?.IsNeutralTowards(this) ?? false;
	}

	public bool IsNonAggressive()
	{
		return Brain?.IsNonAggressive() ?? true;
	}

	public bool IsRelevantHostile(LargerFolk_GameObject Object)
	{
		int IgnoreEasierThan = int.MinValue;
		int IgnoreFartherThan = 9999999;
		if (IsPlayer())
		{
			if (XRLCore.Core.IDKFA)
			{
				return false;
			}
			IgnoreEasierThan = Options.AutoexploreIgnoreEasyEnemies;
			IgnoreFartherThan = Options.AutoexploreIgnoreDistantEnemies;
		}
		if (Object == this || Object.HasTag("ExcludeFromHostiles"))
		{
			return false;
		}
		int? num = Object.Con(this);
		if (!num.HasValue)
		{
			return false;
		}
		GetHostilityRecognitionLimitsEvent.GetFor(this, Object, ref IgnoreEasierThan, ref IgnoreFartherThan);
		if (num < IgnoreEasierThan)
		{
			return false;
		}
		if (Object.IsHostileTowards(this) && !Object.IsNonAggressive())
		{
			int num2 = DistanceTo(Object);
			int hostileWalkRadius = Object.GetHostileWalkRadius(this);
			if ((hostileWalkRadius <= 0 || num2 <= hostileWalkRadius) && num2 <= IgnoreFartherThan && num2 <= GetVisibilityRadius())
			{
				return true;
			}
		}
		return false;
	}

	public bool IsIrrelevantHostile(LargerFolk_GameObject Object)
	{
		int IgnoreEasierThan = int.MinValue;
		int IgnoreFartherThan = 9999999;
		if (IsPlayer())
		{
			if (XRLCore.Core.IDKFA)
			{
				if (Object.IsHostileTowards(this))
				{
					return !Object.IsNonAggressive();
				}
				return false;
			}
			IgnoreEasierThan = Options.AutoexploreIgnoreEasyEnemies;
			IgnoreFartherThan = Options.AutoexploreIgnoreDistantEnemies;
		}
		if (Object == this || Object.HasTag("ExcludeFromHostiles"))
		{
			return false;
		}
		if (!Object.IsHostileTowards(this) || Object.IsNonAggressive())
		{
			return false;
		}
		int? num = Object.Con(this);
		if (!num.HasValue)
		{
			return true;
		}
		GetHostilityRecognitionLimitsEvent.GetFor(this, Object, ref IgnoreEasierThan, ref IgnoreFartherThan);
		if (num < IgnoreEasierThan)
		{
			return true;
		}
		int num2 = DistanceTo(Object);
		if (num2 > IgnoreFartherThan)
		{
			return true;
		}
		int hostileWalkRadius = Object.GetHostileWalkRadius(this);
		if (hostileWalkRadius > 0 && num2 > hostileWalkRadius)
		{
			return true;
		}
		if (num2 > GetVisibilityRadius())
		{
			return true;
		}
		return false;
	}

	public bool IsVisibleHostile(LargerFolk_GameObject Object)
	{
		if (IsPlayer() && XRLCore.Core.IDKFA)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		if (XRL.The.ZoneManager.ActiveZone != null)
		{
			XRL.The.Player.HandleEvent(BeforeRenderEvent.Instance);
			XRL.The.ZoneManager.ActiveZone.AddVisibility(currentCell.X, currentCell.Y, GetVisibilityRadius());
		}
		int ignoreEasierThan = int.MinValue;
		int ignoreFartherThan = 9999999;
		if (IsPlayer())
		{
			ignoreEasierThan = Options.AutoexploreIgnoreEasyEnemies;
			ignoreFartherThan = Options.AutoexploreIgnoreDistantEnemies;
		}
		return IsVisibleHostileInternal(Object, ignoreEasierThan, ignoreFartherThan);
	}

	private bool IsVisibleHostileInternal(LargerFolk_GameObject Object, int IgnoreEasierThan = int.MinValue, int IgnoreFartherThan = int.MaxValue)
	{
		if (Object == this || Object.HasTag("ExcludeFromHostiles"))
		{
			return false;
		}
		if (!Object.IsVisible())
		{
			return false;
		}
		int? num = Object.Con(this);
		if (!num.HasValue)
		{
			return false;
		}
		GetHostilityRecognitionLimitsEvent.GetFor(this, Object, ref IgnoreEasierThan, ref IgnoreFartherThan);
		if (num < IgnoreEasierThan)
		{
			return false;
		}
		if (Object.IsHostileTowards(this) && !Object.IsNonAggressive())
		{
			int hostileWalkRadius = Object.GetHostileWalkRadius(this);
			if (hostileWalkRadius > 0)
			{
				int num2 = DistanceTo(Object);
				if (num2 <= hostileWalkRadius && num2 <= IgnoreFartherThan && num2 < GetVisibilityRadius())
				{
					Cell currentCell = Object.CurrentCell;
					if (currentCell.IsVisible() && currentCell.IsLit())
					{
						return true;
					}
				}
			}
		}
		return false;
	}

	private bool IsVisibleHostileInternal(LargerFolk_GameObject Object)
	{
		return IsVisibleHostileInternal(Object, int.MinValue, int.MaxValue);
	}

	public string GenerateSpotMessage(LargerFolk_GameObject who, string Description = null, OngoingAction Action = null, string verb = "see", bool CheckingPrior = false, string setting = null, bool treatAsVisible = true)
	{
		StringBuilder stringBuilder = Event.NewStringBuilder();
		stringBuilder.Append("You ").Append(verb).Append(' ')
			.Append(who.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, ColorOnly: false, treatAsVisible, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: true, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, null));
		Cell currentCell = CurrentCell;
		if (currentCell != null)
		{
			string generalDirectionFromCell = currentCell.GetGeneralDirectionFromCell(who.CurrentCell);
			if (generalDirectionFromCell != ".")
			{
				stringBuilder.Append(" to the ").Append(Directions.GetExpandedDirection(generalDirectionFromCell));
			}
		}
		stringBuilder.Append(CheckingPrior ? ", so you refrain from " : " and stop ").Append(Description ?? ((setting != AutoAct.Setting) ? AutoAct.GetDescription(setting, Action) : AutoAct.GetDescription())).Append('.');
		return stringBuilder.ToString();
	}

	public bool ArePerceptibleHostilesNearby(bool logSpot = false, bool popSpot = false, string Description = null, OngoingAction Action = null, string setting = null, int IgnoreEasierThan = int.MinValue, int IgnoreFartherThan = 40, bool IgnorePlayerTarget = false, bool CheckingPrior = false)
	{
		if (XRLCore.Core.IDKFA)
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		if (currentCell.ParentZone == null)
		{
			return false;
		}
		if (CheckingPrior && XRL.The.ZoneManager.ActiveZone != null)
		{
			ThePlayer.HandleEvent(BeforeRenderEvent.Instance);
			XRL.The.ZoneManager.ActiveZone.AddVisibility(currentCell.X, currentCell.Y, GetVisibilityRadius());
		}
		LargerFolk_GameObject gameObject = currentCell.ParentZone.FastSquareVisibilityFirst(currentCell.X, currentCell.Y, Math.Min(IgnoreFartherThan, 80), "Brain", IsVisibleHostileInternal, this, VisibleToPlayerOnly: true, IncludeWalls: true, IgnorePlayerTarget ? Sidebar.CurrentTarget : null, IgnoreFartherThan, IgnoreEasierThan);
		string text = null;
		bool treatAsVisible = true;
		if (LargerFolk_GameObject == null && ExtraHostilePerceptionEvent.Check(this, out var Hostile, out var PerceiveVerb, out var TreatAsVisible))
		{
			gameObject = Hostile;
			text = PerceiveVerb;
			treatAsVisible = TreatAsVisible;
		}
		if (gameObject != null)
		{
			if (logSpot || popSpot)
			{
				string message = GenerateSpotMessage(gameObject, Description, Action, CheckingPrior: CheckingPrior, setting: setting, verb: (text == null) ? "see" : text, treatAsVisible: treatAsVisible);
				if (popSpot)
				{
					Popup.Show(message, null, "Sounds/UI/ui_notification", CopyScrap: true, Capitalize: true, DimBackground: true, logSpot);
				}
				else if (logSpot)
				{
					MessageQueue.AddPlayerMessage(message);
				}
				gameObject.Indicate(AsThreat: true);
			}
			return true;
		}
		return false;
	}

	public bool isAdjacentTo(LargerFolk_GameObject go)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		if (currentCell.HasObject(go))
		{
			return true;
		}
		foreach (Cell localAdjacentCell in currentCell.GetLocalAdjacentCells())
		{
			if (localAdjacentCell != null && localAdjacentCell.HasObject(go))
			{
				return true;
			}
		}
		return false;
	}

	public bool AreHostilesAdjacent(bool RequireCombat = true)
	{
		if (RequireCombat)
		{
			return CurrentCell.AnyAdjacentCell((Cell C) => C.HasObjectWithPart("Combat", (LargerFolk_GameObject GO) => GO != this && GO.IsHostileTowards(this)));
		}
		return CurrentCell.AnyAdjacentCell((Cell C) => C.HasObjectWithPart("Brain", (LargerFolk_GameObject GO) => GO != this && GO.IsHostileTowards(this)));
	}

	public bool AreViableHostilesAdjacent(bool IgnoreFlight = false, bool IgnorePhase = false)
	{
		Cell.SpiralEnumerator enumerator = CurrentCell.IterateAdjacent().GetEnumerator();
		while (enumerator.MoveNext())
		{
			foreach (LargerFolk_GameObject @object in enumerator.Current.Objects)
			{
				if (@object.IsCombatObject() && !@object.HasPropertyOrTag("ExcludeFromHostiles") && IsRegardedWithHostilityBy(@object) && (IgnoreFlight || FlightMatches(@object)) && (IgnorePhase || PhaseMatches(@object)))
				{
					return true;
				}
			}
		}
		return false;
	}

	public void EquipFromPopulationTable(string Table, int ZoneTier = 1, Action<LargerFolk_GameObject> Process = null, string Context = null, bool NoStack = false, bool Silent = true)
	{
		if (Table.IsNullOrEmpty() || Inventory == null)
		{
			return;
		}
		Dictionary<string, string> vars = new Dictionary<string, string>
		{
			{
				"ownertier",
				GetTier().ToString()
			},
			{
				"ownertechtier",
				GetTechTier().ToString()
			},
			{
				"zonetier",
				ZoneTier.ToString()
			},
			{
				"zonetier+1",
				(ZoneTier + 1).ToString()
			}
		};
		foreach (PopulationResult item in PopulationManager.Generate(Table, vars))
		{
			try
			{
				int bonusModChance = 0;
				if (item.Hint != null && item.Hint.Contains("SetBonusModChance:"))
				{
					bonusModChance = item.Hint.Split(':')[1].RollCached();
				}
				if (item.Blueprint.StartsWith("*relic:"))
				{
					int i = 0;
					for (int number = item.Number; i < number; i++)
					{
						LargerFolk_GameObject gameObject = RelicGenerator.GenerateRelic(XRL.The.Game.sultanHistory.entities.GetRandomElement().GetCurrentSnapshot(), ZoneTier, item.Blueprint.Split(':')[1]);
						Process?.Invoke(gameObject);
						ReceiveObject(gameObject, NoStack);
					}
				}
				else
				{
					ReceiveObject(item.Blueprint, item.Number, NoStack, bonusModChance, 0, null, null, Process, Context);
				}
			}
			catch (Exception x)
			{
				MetricsManager.LogError("Exception creating item from population table: " + item.Blueprint, x);
			}
		}
	}

	public void MutateFromPopulationTable(string Table, int ZoneTier = 1)
	{
		Mutations mutations = RequirePart<Mutations>();
		foreach (PopulationResult item in PopulationManager.Generate(Table, new Dictionary<string, string>
		{
			{
				"ownertier",
				GetTier().ToString()
			},
			{
				"ownertechtier",
				GetTechTier().ToString()
			},
			{
				"zonetier",
				ZoneTier.ToString()
			},
			{
				"zonetier+1",
				(ZoneTier + 1).ToString()
			}
		}))
		{
			if (item.Number <= 0)
			{
				continue;
			}
			Type type = ModManager.ResolveType("XRL.World.Parts.Mutation." + item.Blueprint);
			if (type == null)
			{
				MetricsManager.LogError("Unknown mutation " + item.Blueprint);
				continue;
			}
			if (!(Activator.CreateInstance(type) is BaseMutation baseMutation))
			{
				MetricsManager.LogError("Mutation " + item.Blueprint + " is not a BaseMutation");
				continue;
			}
			mutations.AddMutation(baseMutation, item.Number);
			if (baseMutation.CapOverride == -1)
			{
				baseMutation.CapOverride = baseMutation.Level;
			}
		}
	}

	private bool CheckHostile(LargerFolk_GameObject GO)
	{
		if (GO == this)
		{
			return false;
		}
		if (GO.Brain == null)
		{
			return false;
		}
		if (GO.HasTag("ExcludeFromHostiles"))
		{
			return false;
		}
		if (GO.IsHostileTowards(this) && !GO.IsNonAggressive())
		{
			int hostileWalkRadius = GO.GetHostileWalkRadius(this);
			if (hostileWalkRadius > 0 && DistanceTo(GO) <= hostileWalkRadius)
			{
				return true;
			}
		}
		return false;
	}

	public bool AreHostilesNearby()
	{
		if (XRLCore.Core.IDKFA)
		{
			return false;
		}
		if (OnWorldMap())
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		return CurrentZone?.GlobalFloodAny(currentCell.X, currentCell.Y, 7, "Combat", CheckHostile, this, ForFluid: true, CheckInWalls: true) ?? false;
	}

	public bool IsInCombat()
	{
		if (OnWorldMap())
		{
			return false;
		}
		GameObject target = Target;
		if (target != null && target.IsCombatObject())
		{
			return true;
		}
		foreach (Zone value in XRL.The.ZoneManager.CachedZones.Values)
		{
			for (int i = 0; i < value.Height; i++)
			{
				for (int j = 0; j < value.Width; j++)
				{
					Cell cell = value.GetCell(j, i);
					int k = 0;
					for (int count = cell.Objects.Count; k < count; k++)
					{
						GameObject target2 = cell.Objects[k].Target;
						if (target2 != null)
						{
							if (target2 == this)
							{
								return true;
							}
							if (target2.IsLedBy(this) || IsLedBy(target2))
							{
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	public void Splash(string Particle)
	{
		CurrentCell?.Splash(Particle);
	}

	public void LiquidSplash(string Color)
	{
		CurrentCell?.LiquidSplash(Color);
	}

	public void LiquidSplash(List<string> Colors)
	{
		CurrentCell?.LiquidSplash(Colors);
	}

	public void LiquidSplash(BaseLiquid Liquid)
	{
		CurrentCell?.LiquidSplash(Liquid);
	}

	public void Splatter(string Particle)
	{
		if (CurrentZone != null && CurrentZone.IsActive() && !IsInStasis())
		{
			for (int i = 0; i < 5; i++)
			{
				float num = 0f;
				float num2 = 0f;
				float num3 = (float)XRL.Rules.Stat.RandomCosmetic(0, 359) / 58f;
				num = (float)Math.Sin(num3) / 2f;
				num2 = (float)Math.Cos(num3) / 2f;
				XRLCore.ParticleManager.Add(Particle, CurrentCell.X, CurrentCell.Y, num, num2, 5, 0f, 0f, 0L);
			}
		}
	}

	public void ShatterSplatter()
	{
		if (CurrentZone == null || !CurrentZone.IsActive() || IsInStasis())
		{
			return;
		}
		for (int i = 0; i < 5; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.RandomCosmetic(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 2f;
			num2 = (float)Math.Cos(num3) / 2f;
			string text = ".";
			if (i == 0)
			{
				text = "&b.";
			}
			if (i == 0)
			{
				text = "&b,";
			}
			if (i == 0)
			{
				text = "&k'";
			}
			if (i == 0)
			{
				text = "&b.";
			}
			if (i == 0)
			{
				text = "&W.";
			}
			XRLCore.ParticleManager.Add(text, CurrentCell.X, CurrentCell.Y, num, num2, 5, 0f, 0f, 0L);
		}
	}

	public void FlingBlood()
	{
		if (Options.DisableBloodsplatter || Physics == null || GetIntProperty("Bleeds") <= 0 || IsInStasis())
		{
			return;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return;
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(1);
		localAdjacentCells.Add(currentCell);
		string propertyOrTag = GetPropertyOrTag("BleedLiquid", "blood-1000");
		foreach (Cell item in localAdjacentCells)
		{
			bool flag = false;
			if (50.in100())
			{
				foreach (LargerFolk_GameObject item2 in item.GetObjectsWithPartReadonly("Render"))
				{
					LiquidVolume liquidVolume = item2.LiquidVolume;
					if (liquidVolume != null && liquidVolume.MaxVolume == -1)
					{
						liquidVolume.MixWith(new LiquidVolume(propertyOrTag, XRL.Rules.Stat.Random(1, 3)), null, null, null);
						flag = true;
					}
					else
					{
						item2.MakeBloody(propertyOrTag, XRL.Rules.Stat.Random(1, 3));
					}
				}
			}
			if (!flag && 5.in100())
			{
				LargerFolk_GameObject gameObject = Create("BloodSplash");
				gameObject.LiquidVolume.InitialLiquid = propertyOrTag;
				item.AddObject(gameObject);
			}
		}
	}

	public void Bloodsplatter()
	{
		Bloodsplatter(SelfSplatter: true);
	}

	public void BloodsplatterBurst(bool SelfSplatter, float Angle, int ConeWidth)
	{
		if (Options.DisableBloodsplatter || GetIntProperty("Bleeds") <= 0 || IsInStasis())
		{
			return;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone != XRLCore.Core.Game.ZoneManager.ActiveZone || currentCell.ParentZone.IsWorldMap())
		{
			return;
		}
		if (HasPart<Robot>())
		{
			Sparksplatter();
		}
		else if (HasTag("Ooze"))
		{
			Slimesplatter(SelfSplatter: true);
		}
		else
		{
			for (int i = 0; i < 10; i++)
			{
				float num = 0f;
				float num2 = 0f;
				float num3 = ((float)XRL.Rules.Stat.Random(-ConeWidth / 2, ConeWidth / 2) + Angle) / 58f;
				num = (float)Math.Sin(num3) / 2f;
				num2 = (float)Math.Cos(num3) / 2f;
				if (XRL.Rules.Stat.Random(1, 2) == 1)
				{
					XRLCore.ParticleManager.Add("&r.", currentCell.X, currentCell.Y, num, num2, 7, 0f, 0f, 0L);
				}
				else
				{
					XRLCore.ParticleManager.Add("&R.", currentCell.X, currentCell.Y, num, num2, 7, 0f, 0f, 0L);
				}
			}
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(1);
		if (SelfSplatter)
		{
			localAdjacentCells.Add(currentCell);
		}
		string propertyOrTag = GetPropertyOrTag("BleedLiquid", "blood-1000");
		foreach (Cell item in localAdjacentCells)
		{
			bool flag = false;
			if (50.in100())
			{
				foreach (LargerFolk_GameObject item2 in item.GetObjectsWithPartReadonly("Render"))
				{
					LiquidVolume liquidVolume = item2.LiquidVolume;
					if (liquidVolume != null && liquidVolume.MaxVolume == -1)
					{
						liquidVolume.MixWith(new LiquidVolume(propertyOrTag, XRL.Rules.Stat.Random(1, 3)), null, null, null);
						flag = true;
					}
					else
					{
						item2.MakeBloody(propertyOrTag, XRL.Rules.Stat.Random(1, 3));
					}
				}
			}
			if (!flag && 10.in100())
			{
				LargerFolk_GameObject gameObject = Create("BloodSplash");
				gameObject.LiquidVolume.InitialLiquid = propertyOrTag;
				item.AddObject(gameObject);
			}
		}
	}

	public void SetActive()
	{
		XRLCore.Core.Game.ActionManager.AddActiveObject(this);
	}

	public bool MakeBloody(string Liquid = "blood", int Amount = 1, int Duration = 1)
	{
		return ForceApplyEffect(new LiquidCovered(Liquid, Amount, Duration));
	}

	public bool MakeBloodstained(string Liquid = "blood", int Amount = 1, int Duration = 9999)
	{
		return ForceApplyEffect(new LiquidStained(Liquid, Amount, Duration));
	}

	public void BloodsplatterCone(bool SelfSplatter, float Angle, int ConeWidth)
	{
		if (Options.DisableBloodsplatter || GetIntProperty("Bleeds") <= 0 || IsInStasis())
		{
			return;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return;
		}
		string text = "&r.";
		string text2 = "&R.";
		string propertyOrTag = GetPropertyOrTag("BleedLiquid", "blood-1000");
		string delimitedSubstring = propertyOrTag.GetDelimitedSubstring('-', 0);
		if (LiquidVolume.Liquids.TryGetValue(delimitedSubstring, out var Value))
		{
			char c = Value.GetColor()[0];
			char c2 = (char.IsLower(c) ? char.ToUpperInvariant(c) : char.ToLowerInvariant(c));
			text = "&" + c + ".";
			text2 = "&" + c2 + ".";
		}
		if (currentCell.ParentZone != XRLCore.Core.Game.ZoneManager.ActiveZone || currentCell.ParentZone.IsWorldMap())
		{
			return;
		}
		if (HasPart<Robot>())
		{
			Sparksplatter();
		}
		else if (HasTag("Ooze"))
		{
			Slimesplatter(SelfSplatter: true);
		}
		else
		{
			for (int i = 0; i < 10; i++)
			{
				float num = 0f;
				float num2 = 0f;
				float num3 = ((float)XRL.Rules.Stat.Random(-ConeWidth / 2, ConeWidth / 2) + Angle) / 58f;
				num = (float)Math.Sin(num3) / 2f;
				num2 = (float)Math.Cos(num3) / 2f;
				if (XRL.Rules.Stat.Random(1, 2) == 1)
				{
					XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
				}
				else
				{
					XRLCore.ParticleManager.Add(text2, currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
				}
			}
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(1);
		if (SelfSplatter)
		{
			localAdjacentCells.Add(currentCell);
		}
		foreach (Cell item in localAdjacentCells)
		{
			bool flag = false;
			if (50.in100())
			{
				foreach (LargerFolk_GameObject item2 in item.GetObjectsWithPartReadonly("Render"))
				{
					LiquidVolume liquidVolume = item2.LiquidVolume;
					if (liquidVolume != null && liquidVolume.MaxVolume == -1)
					{
						liquidVolume.MixWith(new LiquidVolume(propertyOrTag, XRL.Rules.Stat.Random(1, 3)), null, null, null);
						flag = true;
					}
					else
					{
						item2.MakeBloody(propertyOrTag, XRL.Rules.Stat.Random(1, 3));
					}
				}
			}
			if (!flag && 10.in100())
			{
				LargerFolk_GameObject gameObject = Create("BloodSplash");
				gameObject.LiquidVolume.InitialLiquid = propertyOrTag;
				item.AddObject(gameObject);
			}
		}
	}

	public void HolographicBloodsplatter(bool SelfSplatter = true)
	{
		if (IsInStasis())
		{
			return;
		}
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || currentCell.ParentZone.IsWorldMap())
		{
			return;
		}
		string text = "&r.";
		string propertyOrTag = GetPropertyOrTag("BleedLiquid", "blood-1000");
		string delimitedSubstring = propertyOrTag.GetDelimitedSubstring('-', 0);
		if (LiquidVolume.Liquids.TryGetValue(delimitedSubstring, out var Value))
		{
			text = "&" + Value.GetColor() + ".";
		}
		if (currentCell.ParentZone.IsActive())
		{
			if (HasPart<Robot>())
			{
				Sparksplatter();
			}
			else if (HasTag("Ooze"))
			{
				Slimesplatter(SelfSplatter: true);
			}
			else
			{
				for (int i = 0; i < 5; i++)
				{
					float num = 0f;
					float num2 = 0f;
					float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
					num = (float)Math.Sin(num3) / 2f;
					num2 = (float)Math.Cos(num3) / 2f;
					XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, num, num2, 5, 0f, 0f, 0L);
				}
			}
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(1);
		if (SelfSplatter)
		{
			localAdjacentCells.Add(currentCell);
		}
		foreach (Cell item in localAdjacentCells)
		{
			if (10.in100())
			{
				item.ForeachObjectWithPart("Render", (Action<LargerFolk_GameObject>)SplashHolographicBlood);
			}
			if (10.in100())
			{
				LargerFolk_GameObject gameObject = Create("BloodSplash");
				gameObject.LiquidVolume.InitialLiquid = propertyOrTag;
				gameObject.AddPart(new XRL.World.Parts.Temporary(25));
				item.AddObject(gameObject);
			}
		}
	}

	private void SplashHolographicBlood(LargerFolk_GameObject GO)
	{
		LiquidVolume liquidVolume = GO.LiquidVolume;
		if (liquidVolume == null || liquidVolume.MaxVolume != -1)
		{
			GO.MakeBloody("blood", XRL.Rules.Stat.Random(1, 3));
		}
	}

	public void BigBloodsplatter(bool SelfSplatter = true)
	{
		if (GetIntProperty("Bleeds") <= 0 || IsInStasis())
		{
			return;
		}
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || currentCell.ParentZone.IsWorldMap())
		{
			return;
		}
		string text = "&r.";
		string propertyOrTag = GetPropertyOrTag("BleedLiquid", "blood-1000");
		string delimitedSubstring = propertyOrTag.GetDelimitedSubstring('-', 0);
		if (LiquidVolume.Liquids.TryGetValue(delimitedSubstring, out var Value))
		{
			text = "&" + Value.GetColor() + ".";
		}
		if (currentCell.ParentZone.IsActive())
		{
			if (HasPart<Robot>())
			{
				Sparksplatter();
			}
			else if (HasTag("Ooze"))
			{
				Slimesplatter(SelfSplatter: true);
			}
			else
			{
				for (int i = 0; i < 15; i++)
				{
					float num = 0f;
					float num2 = 0f;
					float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
					num = (float)Math.Sin(num3) / 2f;
					num2 = (float)Math.Cos(num3) / 2f;
					XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
				}
			}
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(3);
		if (SelfSplatter)
		{
			localAdjacentCells.Add(currentCell);
		}
		foreach (Cell item in localAdjacentCells)
		{
			bool flag = false;
			if (50.in100())
			{
				foreach (LargerFolk_GameObject item2 in item.GetObjectsWithPartReadonly("Render"))
				{
					LiquidVolume liquidVolume = item2.LiquidVolume;
					if (liquidVolume != null && liquidVolume.MaxVolume == -1)
					{
						liquidVolume.MixWith(new LiquidVolume(propertyOrTag, XRL.Rules.Stat.Random(1, 3)), null, null, null);
						flag = true;
					}
					else
					{
						item2.MakeBloody(propertyOrTag, XRL.Rules.Stat.Random(1, 3));
					}
				}
			}
			if (!flag && 10.in100())
			{
				LargerFolk_GameObject gameObject = Create("BloodSplash");
				gameObject.LiquidVolume.InitialLiquid = propertyOrTag;
				item.AddObject(gameObject);
			}
		}
	}

	public void Bloodsplatter(bool SelfSplatter)
	{
		if (GetIntProperty("Bleeds") <= 0 || IsInStasis())
		{
			return;
		}
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || currentCell.ParentZone.IsWorldMap())
		{
			return;
		}
		string text = "&r.";
		string propertyOrTag = GetPropertyOrTag("BleedLiquid", "blood-1000");
		string delimitedSubstring = propertyOrTag.GetDelimitedSubstring('-', 0);
		if (LiquidVolume.Liquids.TryGetValue(delimitedSubstring, out var Value))
		{
			text = "&" + Value.GetColor() + ".";
		}
		if (currentCell.ParentZone.IsActive())
		{
			if (HasPart<Robot>())
			{
				Sparksplatter();
			}
			else if (HasTag("Ooze"))
			{
				Slimesplatter(SelfSplatter: true);
			}
			else
			{
				for (int i = 0; i < 5; i++)
				{
					float num = 0f;
					float num2 = 0f;
					float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
					num = (float)Math.Sin(num3) / 2f;
					num2 = (float)Math.Cos(num3) / 2f;
					XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, num, num2, 5, 0f, 0f, 0L);
				}
			}
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(1);
		if (SelfSplatter)
		{
			localAdjacentCells.Add(currentCell);
		}
		foreach (Cell item in localAdjacentCells)
		{
			bool flag = false;
			if (50.in100())
			{
				foreach (LargerFolk_GameObject item2 in item.GetObjectsWithPartReadonly("Render"))
				{
					LiquidVolume liquidVolume = item2.LiquidVolume;
					if (liquidVolume != null && liquidVolume.MaxVolume == -1)
					{
						liquidVolume.MixWith(new LiquidVolume(propertyOrTag, XRL.Rules.Stat.Random(1, 3)), null, null, null);
						flag = true;
					}
					else
					{
						item2.MakeBloody(propertyOrTag, XRL.Rules.Stat.Random(1, 3));
					}
				}
			}
			if (!flag && 10.in100())
			{
				LargerFolk_GameObject gameObject = Create("BloodSplash");
				gameObject.LiquidVolume.InitialLiquid = propertyOrTag;
				item.AddObject(gameObject);
			}
		}
	}

	public void DilationSplat()
	{
		GetCurrentCell()?.DilationSplat();
	}

	public void ImplosionSplat(int Radius = 12)
	{
		GetCurrentCell()?.ImplosionSplat(Radius);
	}

	public void TelekinesisBlip()
	{
		GetCurrentCell()?.TelekinesisBlip();
	}

	public void Acidsplatter()
	{
		if (OnWorldMap() || IsInStasis() || CurrentZone == null || !CurrentZone.IsActive())
		{
			return;
		}
		for (int i = 0; i < 5; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 2f;
			num2 = (float)Math.Cos(num3) / 2f;
			int num4 = XRL.Rules.Stat.Random(1, 2);
			string text = "";
			if (num4 == 0)
			{
				text += "&G";
			}
			if (num4 == 1)
			{
				text += "&g";
			}
			text += ".";
			XRLCore.ParticleManager.Add(text, CurrentCell.X, CurrentCell.Y, num, num2, 5, 0f, 0f, 0L);
		}
	}

	public void Firesplatter()
	{
		if (OnWorldMap() || IsInStasis() || CurrentZone == null || !CurrentZone.IsActive())
		{
			return;
		}
		for (int i = 0; i < 5; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 2f;
			num2 = (float)Math.Cos(num3) / 2f;
			int num4 = XRL.Rules.Stat.Random(1, 2);
			string text = "";
			if (num4 == 0)
			{
				text += "&R";
			}
			if (num4 == 1)
			{
				text += "&W";
			}
			text += ".";
			XRLCore.ParticleManager.Add(text, CurrentCell.X, CurrentCell.Y, num, num2, 5, 0f, 0f, 0L);
		}
	}

	public void Icesplatter()
	{
		if (OnWorldMap() || IsInStasis() || CurrentZone == null || !CurrentZone.IsActive())
		{
			return;
		}
		for (int i = 0; i < 5; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 2f;
			num2 = (float)Math.Cos(num3) / 2f;
			int num4 = XRL.Rules.Stat.Random(1, 2);
			string text = "";
			if (num4 == 0)
			{
				text += "&C";
			}
			if (num4 == 1)
			{
				text += "&Y";
			}
			text += ".";
			XRLCore.ParticleManager.Add(text, CurrentCell.X, CurrentCell.Y, num, num2, 5, 0f, 0f, 0L);
		}
	}

	public void Sparksplatter()
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell != null && !currentCell.OnWorldMap() && currentCell.ParentZone != null && currentCell.ParentZone.IsActive() && !IsInStasis())
		{
			int phase = GetPhase();
			for (int i = 0; i < 5; i++)
			{
				float num = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
				float xDel = (float)(Math.Sin(num) / 2.0);
				float yDel = (float)(Math.Cos(num) / 2.0);
				string text = "&" + Phase.getRandomElectricArcColor(phase) + (char)XRL.Rules.Stat.RandomCosmetic(191, 198);
				XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, xDel, yDel, 5, 0f, 0f, 0L);
			}
		}
	}

	public void Rainbowsplatter()
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || currentCell.ParentZone.IsWorldMap() || !currentCell.ParentZone.IsActive() || IsInStasis())
		{
			return;
		}
		for (int i = 0; i < 5; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 2f;
			num2 = (float)Math.Cos(num3) / 2f;
			int num4 = XRL.Rules.Stat.Random(1, 2);
			string text = "";
			if (num4 == 0)
			{
				text = text + "&" + Crayons.GetRandomColor();
			}
			if (num4 == 1)
			{
				text = text + "&" + Crayons.GetRandomColor().ToLower();
			}
			text += (char)XRL.Rules.Stat.RandomCosmetic(191, 198);
			XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, num, num2, 5, 0f, 0f, 0L);
		}
	}

	public void Slimesplatter(bool SelfSplatter, string particle = "&g.")
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || currentCell.ParentZone.IsWorldMap() || IsInStasis())
		{
			return;
		}
		if (currentCell.ParentZone.IsActive())
		{
			for (int i = 0; i < 5; i++)
			{
				float num = 0f;
				float num2 = 0f;
				float num3 = (float)XRL.Rules.Stat.Random(0, 359) / 58f;
				num = (float)Math.Sin(num3) / 2f;
				num2 = (float)Math.Cos(num3) / 2f;
				XRLCore.ParticleManager.Add(particle, currentCell.X, currentCell.Y, num, num2, 5, 0f, 0f, 0L);
			}
		}
		List<Cell> localAdjacentCells = currentCell.GetLocalAdjacentCells(1);
		if (SelfSplatter)
		{
			localAdjacentCells.Add(currentCell);
		}
		foreach (Cell item in localAdjacentCells)
		{
			if (!50.in100())
			{
				continue;
			}
			item.ForeachObjectWithPart("Render", delegate(LargerFolk_GameObject GO)
			{
				if (GO.HasPart<LiquidVolume>() && GO.LiquidVolume.MaxVolume == -1)
				{
					LiquidVolume liquidVolume = GO.LiquidVolume;
					LiquidVolume liquidVolume2 = GameObjectFactory.Factory.CreateObject("Water").LiquidVolume;
					liquidVolume2.InitialLiquid = "slime-1000";
					liquidVolume2.Volume = 2;
					liquidVolume.MixWith(liquidVolume2, null, null, null);
				}
			});
		}
	}

	public void DotPuff(string Color)
	{
		if (CurrentZone == null || !CurrentZone.IsActive())
		{
			return;
		}
		for (int i = 0; i < 15; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.RandomCosmetic(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 4f;
			num2 = (float)Math.Cos(num3) / 4f;
			if (XRL.Rules.Stat.RandomCosmetic(1, 4) <= 3)
			{
				XRLCore.ParticleManager.Add(Color + ".", CurrentCell.X, CurrentCell.Y, num, num2, 15, 0f, 0f, 0L);
			}
			else
			{
				XRLCore.ParticleManager.Add(Color + "ù", CurrentCell.X, CurrentCell.Y, num, num2, 15, 0f, 0f, 0L);
			}
		}
	}

	public void PistonPuff(string Color = "&y", int Intensity = 15)
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || !currentCell.ParentZone.IsActive())
		{
			return;
		}
		for (int i = 0; i < Intensity; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.RandomCosmetic(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 4f;
			num2 = (float)Math.Cos(num3) / 4f;
			if (XRL.Rules.Stat.RandomCosmetic(1, 4) <= 2)
			{
				XRL.The.ParticleManager.Add(Color + ".", currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
			}
			else
			{
				XRL.The.ParticleManager.Add(Color + "±", currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
			}
		}
	}

	public void DustPuff(string Color = "&y", int Intensity = 15)
	{
		if (!IsVisible())
		{
			return;
		}
		Cell currentCell = GetCurrentCell();
		if (currentCell == null || currentCell.ParentZone != XRLCore.Core.Game.ZoneManager.ActiveZone)
		{
			return;
		}
		for (int i = 0; i < Intensity; i++)
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = (float)XRL.Rules.Stat.RandomCosmetic(0, 359) / 58f;
			num = (float)Math.Sin(num3) / 4f;
			num2 = (float)Math.Cos(num3) / 4f;
			if (XRL.Rules.Stat.RandomCosmetic(1, 4) <= 3)
			{
				XRLCore.ParticleManager.Add(Color + ".", currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
			}
			else
			{
				XRLCore.ParticleManager.Add(Color + "±", currentCell.X, currentCell.Y, num, num2, 15, 0f, 0f, 0L);
			}
		}
	}

	public void PsychicPulse()
	{
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				ParticleText("&B" + (char)(219 + XRL.Rules.Stat.RandomCosmetic(0, 4)), 4.9f, 5);
			}
			for (int k = 0; k < 5; k++)
			{
				ParticleText("&b" + (char)(219 + XRL.Rules.Stat.RandomCosmetic(0, 4)), 4.9f, 5);
			}
			for (int l = 0; l < 5; l++)
			{
				ParticleText("&W" + (char)(219 + XRL.Rules.Stat.RandomCosmetic(0, 4)), 4.9f, 5);
			}
		}
	}

	public void Soundwave()
	{
		Cell currentCell = GetCurrentCell();
		if (currentCell != null && currentCell.ParentZone == XRLCore.Core.Game.ZoneManager.ActiveZone)
		{
			for (int i = 0; i < 3; i++)
			{
				XRLCore.ParticleManager.AddRadial("&R!", currentCell.X, currentCell.Y, XRL.Rules.Stat.RandomCosmetic(0, 7), XRL.Rules.Stat.RandomCosmetic(1, 1), 0.015f * (float)XRL.Rules.Stat.RandomCosmetic(8, 12), 0.3f + 0.05f * (float)XRL.Rules.Stat.RandomCosmetic(1, 3), 40, 0L);
				XRLCore.ParticleManager.AddRadial("&r!", currentCell.X, currentCell.Y, XRL.Rules.Stat.RandomCosmetic(0, 7), XRL.Rules.Stat.RandomCosmetic(1, 1), 0.015f * (float)XRL.Rules.Stat.RandomCosmetic(8, 12), 0.3f + 0.05f * (float)XRL.Rules.Stat.RandomCosmetic(1, 3), 40, 0L);
				XRLCore.ParticleManager.AddRadial("&R\r", currentCell.X, currentCell.Y, XRL.Rules.Stat.RandomCosmetic(0, 7), XRL.Rules.Stat.RandomCosmetic(1, 1), 0.015f * (float)XRL.Rules.Stat.RandomCosmetic(8, 12), 0.3f + 0.05f * (float)XRL.Rules.Stat.RandomCosmetic(1, 3), 40, 0L);
				XRLCore.ParticleManager.AddRadial("&r\u000e", currentCell.X, currentCell.Y, XRL.Rules.Stat.RandomCosmetic(0, 7), XRL.Rules.Stat.RandomCosmetic(1, 1), 0.015f * (float)XRL.Rules.Stat.RandomCosmetic(8, 12), 0.3f + 0.05f * (float)XRL.Rules.Stat.RandomCosmetic(1, 3), 40, 0L);
			}
		}
	}

	public bool IsInActiveZone()
	{
		return CurrentZone?.IsActive() ?? false;
	}

	public void ParticleSpray(string Text1, string Text2, string Text3, string Text4, int amount)
	{
		if (!IsInActiveZone())
		{
			return;
		}
		Cell currentCell = CurrentCell;
		for (int i = 0; i < 16; i++)
		{
			string text = Text1;
			if (XRL.Rules.Stat.RandomCosmetic(0, 3) == 0)
			{
				text = Text2;
			}
			if (XRL.Rules.Stat.RandomCosmetic(0, 3) == 0)
			{
				text = Text3;
			}
			if (XRL.Rules.Stat.RandomCosmetic(0, 3) == 0)
			{
				text = Text4;
			}
			float yDel = -0.5f + (float)XRL.Rules.Stat.RandomCosmetic(1, 4) * -0.2f;
			float xDel = -1f + (float)XRL.Rules.Stat.RandomCosmetic(1, 30) * 0.06f;
			XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, xDel, yDel, 60, 0f, 0.05f, 0L);
		}
	}

	public void CrystalSpray()
	{
		if (!IsInActiveZone())
		{
			return;
		}
		Cell currentCell = CurrentCell;
		for (int i = 0; i < 4; i++)
		{
			string text = "&m/";
			if (XRL.Rules.Stat.RandomCosmetic(0, 1) == 0)
			{
				text = "&y/";
			}
			if (XRL.Rules.Stat.RandomCosmetic(0, 3) == 0)
			{
				text = "&Y.";
			}
			if (XRL.Rules.Stat.RandomCosmetic(0, 3) == 0)
			{
				text = "&y,";
			}
			if (XRL.Rules.Stat.RandomCosmetic(0, 3) == 0)
			{
				text = "&M<";
			}
			float yDel = -0.2f + (float)XRL.Rules.Stat.RandomCosmetic(1, 4) * -0.1f;
			float xDel = -1f + (float)XRL.Rules.Stat.RandomCosmetic(1, 30) * 0.06f;
			XRLCore.ParticleManager.Add(text, currentCell.X, currentCell.Y, xDel, yDel, 20, 0f, 0.05f, 0L);
		}
	}

	public void SleepytimeParticles()
	{
		Cell currentCell = CurrentCell;
		for (int i = 0; i < 16; i++)
		{
			string text = "Z";
			for (int j = 0; j < XRL.Rules.Stat.RandomCosmetic(0, 3); j++)
			{
				text += "Z";
			}
			for (int k = 0; k < XRL.Rules.Stat.RandomCosmetic(0, 4); k++)
			{
				text += "z";
			}
			float yDel = -0.25f;
			float xDel = 0.05f + (float)XRL.Rules.Stat.RandomCosmetic(1, 4) * 0.01f;
			XRLCore.ParticleManager.Add("&b" + text, currentCell.X, currentCell.Y, xDel, yDel, 120, 0f, -0.05f, 50 * i);
		}
	}

	public void Heartspray(string Color1 = "&M", string Color2 = "&R", string Color3 = "&r", string Color4 = "&Y", char c = '\u0003')
	{
		ParticleSpray(Color1 + c, Color4 + ".", Color2 + c, Color3 + c, 16);
	}

	public void ParticlePulse(string particle)
	{
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 5; j++)
			{
				ParticleText(particle, 4.9f, 5);
			}
		}
	}

	public void TileParticleBlip(string Tile, string ColorString, string DetailColor, int Duration = 10, bool IgnoreVisibility = false, bool HFlip = false, bool VFlip = false, long DelayMS = 0L)
	{
		if (IgnoreVisibility || IsVisible())
		{
			GetCurrentCell()?.TileParticleBlip(Tile, ColorString, DetailColor, Duration, IgnoreVisibility: true, HFlip, VFlip, DelayMS);
		}
	}

	public void ParticleBlip(string Text, int Duration = 10, long DelayMS = 0L, bool IgnoreVisibility = false)
	{
		if (IgnoreVisibility || IsVisible())
		{
			GetCurrentCell()?.ParticleBlip(Text, Duration, DelayMS, IgnoreVisibility: true);
		}
	}

	public void ParticleText(string Text, float Velocity, int Life)
	{
		GetCurrentCell()?.ParticleText(Text, Velocity, Life);
	}

	public void ParticleText(string Text, bool IgnoreVisibility = false)
	{
		if (IgnoreVisibility || IsVisible())
		{
			GetCurrentCell()?.ParticleText(Text, IgnoreVisibility: true);
		}
	}

	public void ParticleText(string Text, float xVel, float yVel, char Color = ' ', bool IgnoreVisibility = false)
	{
		if (IgnoreVisibility || IsVisible())
		{
			GetCurrentCell()?.ParticleText(Text, xVel, yVel, Color);
		}
	}

	public void ParticleText(string Text, char Color, bool IgnoreVisibility = false, float juiceDuration = 1.5f, float floatLength = -8f)
	{
		if (IgnoreVisibility || IsVisible())
		{
			GetCurrentCell()?.ParticleText(Text, Color, IgnoreVisibility: true, juiceDuration, floatLength, this);
		}
	}

	public void GetAdjunctNoun(out string Noun, out bool Post, bool AsIfKnown = false)
	{
		if (!AsIfKnown && TryGetPart<Examiner>(out var Part))
		{
			GameObject activeSample = Part.GetActiveSample();
			if (activeSample != null)
			{
				activeSample.GetAdjunctNoun(out Noun, out Post);
				return;
			}
		}
		Noun = null;
		Post = false;
		string text = GetxTag("Grammar", "adjunctNoun");
		if (!text.IsNullOrEmpty())
		{
			Noun = text;
			if (GetxTag("Grammar", "adjunctNounPost") == "true")
			{
				Post = true;
			}
		}
		else if (GetPlurality(AsIfKnown) && !IsCreature)
		{
			Noun = "set";
		}
	}

	public string GetPluralName(bool AsIfKnown = false, bool NoConfusion = false, bool Stripped = false, bool BaseOnly = false)
	{
		bool? includeAdjunctNoun = true;
		return GetDisplayName(int.MaxValue, null, null, AsIfKnown, Single: false, NoConfusion, NoColor: false, Stripped, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, includeAdjunctNoun).Pluralize();
	}

	public string GetDemandName(int DemandCount)
	{
		string text = Render.DisplayName.Strip();
		StringBuilder stringBuilder = new StringBuilder();
		GetAdjunctNoun(out var Noun, out var Post, AsIfKnown: true);
		if (!Noun.IsNullOrEmpty() && Post)
		{
			if (DemandCount > 1)
			{
				stringBuilder.Append(Grammar.Cardinal(DemandCount)).Append(' ').Append(text)
					.Append(' ')
					.Append(Noun.Pluralize());
			}
			else
			{
				stringBuilder.Append(IndefiniteArticle(Capital: false, text)).Append(text).Append(' ')
					.Append(Noun);
			}
		}
		else if (!Noun.IsNullOrEmpty())
		{
			if (DemandCount > 1)
			{
				stringBuilder.Append(Grammar.Cardinal(DemandCount)).Append(' ').Append(Noun.Pluralize());
			}
			else
			{
				stringBuilder.Append(Grammar.A(Noun));
			}
			stringBuilder.Append(" of ").Append(text);
		}
		else if (IsPluralIfKnown)
		{
			if (DemandCount > 1)
			{
				stringBuilder.Append(Grammar.Cardinal(DemandCount)).Append(" sets of ");
			}
			else
			{
				stringBuilder.Append("a set of ");
			}
			stringBuilder.Append(text);
		}
		else if (DemandCount > 1)
		{
			stringBuilder.Append(Grammar.Cardinal(DemandCount)).Append(' ').Append(text.Pluralize());
		}
		else
		{
			stringBuilder.Append(IndefiniteArticle(Capital: false, text)).Append(text);
		}
		return stringBuilder.ToString();
	}

	public LargerFolk_GameObject GetNearestVisibleObject(bool Hostile = false, string SearchPart = "Physics", int Radius = 80, bool IncludeSolid = true, bool IgnoreLOS = false, Predicate<LargerFolk_GameObject> ExtraVisibility = null)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null || currentCell.ParentZone == null)
		{
			return null;
		}
		GameObject result = null;
		int num = 9999999;
		List<LargerFolk_GameObject> list = ((Radius >= currentCell.ParentZone.Width) ? currentCell.ParentZone.GetObjectsWithPartReadonly(SearchPart) : currentCell.ParentZone.FastFloodVisibility(currentCell.X, currentCell.Y, Radius, SearchPart, this, ExtraVisibility));
		int i = 0;
		for (int count = list.Count; i < count; i++)
		{
			LargerFolk_GameObject gameObject = list[i];
			if (LargerFolk_GameObject == this || !gameObject.IsVisible() || (!IgnoreLOS && !HasLOSTo(gameObject, IncludeSolid, BlackoutStops: false, UseTargetability: true)))
			{
				continue;
			}
			Cell currentCell2 = gameObject.CurrentCell;
			if (currentCell2 == null)
			{
				continue;
			}
			int num2 = currentCell2.PathDistanceTo(currentCell);
			if (num2 >= num)
			{
				continue;
			}
			if (Hostile)
			{
				if (gameObject.IsHostileTowards(this))
				{
					result = gameObject;
					num = num2;
				}
			}
			else
			{
				result = gameObject;
				num = num2;
			}
		}
		return result;
	}

	public List<LargerFolk_GameObject> GetVisibleCombatObjects()
	{
		return CurrentZone?.FastFloodVisibility(CurrentCell.X, CurrentCell.Y, 9999, "Combat", this);
	}

	public bool InSameCellAs(LargerFolk_GameObject Object)
	{
		if (!Validate(ref Object))
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		Cell currentCell2 = Object.CurrentCell;
		if (currentCell == currentCell2)
		{
			return true;
		}
		if (currentCell != null && currentCell2 != null)
		{
			return false;
		}
		if (currentCell == null)
		{
			currentCell = GetCurrentCell();
		}
		else if (currentCell2 == null)
		{
			currentCell2 = Object.GetCurrentCell();
		}
		return currentCell == currentCell2;
	}

	public bool InAdjacentCellTo(LargerFolk_GameObject Object)
	{
		if (!Validate(ref Object))
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		Cell currentCell2 = Object.CurrentCell;
		if (currentCell != null && currentCell2 != null && currentCell.IsAdjacentTo(currentCell2))
		{
			return true;
		}
		if (currentCell != null && currentCell2 != null)
		{
			return false;
		}
		if (currentCell == null)
		{
			currentCell = GetCurrentCell();
			if (currentCell == null)
			{
				return false;
			}
		}
		else if (currentCell2 == null)
		{
			currentCell2 = Object.GetCurrentCell();
			if (currentCell2 == null)
			{
				return false;
			}
		}
		return currentCell.IsAdjacentTo(currentCell2);
	}

	public bool InSameOrAdjacentCellTo(LargerFolk_GameObject Object)
	{
		if (!Validate(ref Object))
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		Cell currentCell2 = Object.CurrentCell;
		if (currentCell == currentCell2 && currentCell != null)
		{
			return true;
		}
		if (currentCell != null && currentCell2 != null && currentCell.IsAdjacentTo(currentCell2))
		{
			return true;
		}
		if (currentCell != null && currentCell2 != null)
		{
			return false;
		}
		if (currentCell == null)
		{
			currentCell = GetCurrentCell();
			if (currentCell == null)
			{
				return false;
			}
		}
		else if (currentCell2 == null)
		{
			currentCell2 = Object.GetCurrentCell();
			if (currentCell2 == null)
			{
				return false;
			}
		}
		if (currentCell != currentCell2)
		{
			return currentCell.IsAdjacentTo(currentCell2);
		}
		return true;
	}

	public bool IsEngagedInMelee()
	{
		if (Brain == null)
		{
			return false;
		}
		GameObject target = Brain.Target;
		if (target != null && DistanceTo(target) <= 1)
		{
			return target.IsCombatObject();
		}
		return false;
	}

	public bool IsRealityDistortionUsable(LargerFolk_GameObject Device = null, IPart Mutation = null)
	{
		return CheckRealityDistortionUsabilityEvent.Check(this, null, this, Device, Mutation, 100);
	}

	public bool IsSelfControlledPlayer()
	{
		if (!IsPlayer())
		{
			return false;
		}
		if (HasStringProperty("Skittishing"))
		{
			return false;
		}
		return true;
	}

	public bool IsPlayerLed()
	{
		if (Brain != null)
		{
			return Brain.IsPlayerLed();
		}
		return false;
	}

	public bool IsPlayerControlled()
	{
		if (!IsPlayer())
		{
			return IsPlayerLed();
		}
		return true;
	}

	public bool IsPlayerLedAndPerceptible()
	{
		if (IsPlayerLed())
		{
			if (!IsVisible())
			{
				return IsAudible(ThePlayer);
			}
			return true;
		}
		return false;
	}

	public bool IsPlayerControlledAndPerceptible()
	{
		if (!IsPlayer())
		{
			return IsPlayerLedAndPerceptible();
		}
		return true;
	}

	public string GetPerceptionVerb()
	{
		if (!IsVisible())
		{
			return "hear";
		}
		return "see";
	}

	public bool IsOverburdened()
	{
		if (!IsPlayerControlled())
		{
			return false;
		}
		return GetCarriedWeight() > GetMaxCarriedWeight();
	}

	public bool WouldBeOverburdened(int Weight)
	{
		if (!IsPlayerControlled())
		{
			return false;
		}
		return Weight + GetCarriedWeight() > GetMaxCarriedWeight();
	}

	public bool WouldBeOverburdened(LargerFolk_GameObject Object)
	{
		return WouldBeOverburdened(Object.Weight);
	}

	public bool MakeSave(out int SuccessMargin, out int FailureMargin, string Stat, int Difficulty, LargerFolk_GameObject Attacker = null, string AttackerStat = null, string Vs = null, bool IgnoreNaturals = false, bool IgnoreNatural1 = false, bool IgnoreNatural20 = false, bool IgnoreGodmode = false, LargerFolk_GameObject Source = null)
	{
		return XRL.Rules.Stat.MakeSave(out SuccessMargin, out FailureMargin, this, Stat, Difficulty, Attacker, AttackerStat, Vs, IgnoreNaturals, IgnoreNatural1, IgnoreNatural20, IgnoreGodmode, Source);
	}

	public bool MakeSave(string Stat, int Difficulty, LargerFolk_GameObject Attacker = null, string AttackerStat = null, string Vs = null, bool IgnoreNaturals = false, bool IgnoreNatural1 = false, bool IgnoreNatural20 = false, bool IgnoreGodmode = false, LargerFolk_GameObject Source = null)
	{
		int SuccessMargin;
		int FailureMargin;
		return MakeSave(out SuccessMargin, out FailureMargin, Stat, Difficulty, Attacker, AttackerStat, Vs, IgnoreNaturals, IgnoreNatural1, IgnoreNatural20, IgnoreGodmode, Source);
	}

	public int SaveChance(string Stat, int Difficulty, LargerFolk_GameObject Attacker = null, string AttackerStat = null, string Vs = null, bool IgnoreNaturals = false, bool IgnoreNatural1 = false, bool IgnoreNatural20 = false, bool IgnoreGodmode = false, LargerFolk_GameObject Source = null)
	{
		return XRL.Rules.Stat.SaveChance(this, Stat, Difficulty, Attacker, AttackerStat, Vs, IgnoreNaturals, IgnoreNatural1, IgnoreNatural20, IgnoreGodmode, Source);
	}

	public bool IsCopyOf(LargerFolk_GameObject who)
	{
		if (who.IsPlayer() && HasStringProperty("PlayerCopy"))
		{
			return true;
		}
		string stringProperty = GetStringProperty("FugueCopy");
		if (stringProperty != null && who.IDMatch(stringProperty))
		{
			return true;
		}
		return false;
	}

	public bool HasCopyRelationship(LargerFolk_GameObject who)
	{
		if (who == null)
		{
			return false;
		}
		if (who == this)
		{
			return true;
		}
		if (who.IsPlayer() && HasStringProperty("PlayerCopy"))
		{
			return true;
		}
		if (IsPlayer() && who.HasStringProperty("PlayerCopy"))
		{
			return true;
		}
		string stringProperty = GetStringProperty("FugueCopy");
		if (stringProperty != null && who.IDMatch(stringProperty))
		{
			return true;
		}
		string stringProperty2 = who.GetStringProperty("FugueCopy");
		if (stringProperty2 != null)
		{
			if (stringProperty2 == stringProperty)
			{
				return true;
			}
			if (IDMatch(stringProperty2))
			{
				return true;
			}
		}
		return false;
	}

	public int GetMark()
	{
		string tag = GetTag("Mark");
		if (tag != null)
		{
			return Convert.ToInt32(tag);
		}
		return 0;
	}

	public bool LeftBehindByPlayer()
	{
		LargerFolk_GameObject gameObject = ThePlayer;
		Dominated dominated;
		do
		{
			dominated = gameObject?.GetEffect<Dominated>();
			if (dominated != null)
			{
				if (dominated.Dominator == this)
				{
					return true;
				}
				gameObject = dominated.Dominator;
			}
		}
		while (dominated != null && gameObject != null && gameObject != ThePlayer);
		return false;
	}

	public bool WasPlayer()
	{
		if (IsOriginalPlayerBody())
		{
			return true;
		}
		if (LeftBehindByPlayer())
		{
			return true;
		}
		return false;
	}

	public bool CanChangeMovementMode(string To = null, bool ShowMessage = false, bool Involuntary = false, bool AllowTelekinetic = false, bool FrozenOkay = false)
	{
		if (!FrozenOkay)
		{
			bool silent = !ShowMessage;
			if (!CheckFrozen(Telepathic: false, AllowTelekinetic, silent))
			{
				return false;
			}
		}
		if (AllowTelekinetic && CanManipulateTelekinetically(this))
		{
			return true;
		}
		return CanChangeMovementModeEvent.Check(this, To, Involuntary: false, ShowMessage, AllowTelekinetic, FrozenOkay);
	}

	public bool CanChangeBodyPosition(string To = null, bool ShowMessage = false, bool Involuntary = false, bool AllowTelekinetic = false, bool FrozenOkay = false)
	{
		if (!FrozenOkay)
		{
			bool silent = !ShowMessage;
			if (!CheckFrozen(Telepathic: false, AllowTelekinetic, silent))
			{
				return false;
			}
		}
		if (AllowTelekinetic && CanManipulateTelekinetically(this))
		{
			return true;
		}
		eCanChangeBodyPosition.SetParameter("To", To);
		eCanChangeBodyPosition.SetFlag("ShowMessage", ShowMessage);
		eCanChangeBodyPosition.SetFlag("Involuntary", Involuntary);
		return FireEvent(eCanChangeBodyPosition);
	}

	public bool CanMoveExtremities(string To = null, bool ShowMessage = false, bool Involuntary = false, bool AllowTelekinetic = false)
	{
		bool silent = !ShowMessage;
		if (!CheckFrozen(Telepathic: false, AllowTelekinetic, silent))
		{
			return false;
		}
		if (AllowTelekinetic && CanManipulateTelekinetically(this))
		{
			return true;
		}
		eCanMoveExtremities.SetParameter("To", To);
		eCanMoveExtremities.SetFlag("ShowMessage", ShowMessage);
		eCanMoveExtremities.SetFlag("Involuntary", Involuntary);
		return FireEvent(eCanMoveExtremities);
	}

	public void MovementModeChanged(string To = null, bool Involuntary = false)
	{
		MovementModeChangedEvent.Send(this, To, Involuntary);
	}

	public void BodyPositionChanged(string To = null, bool Involuntary = false)
	{
		BodyPositionChangedEvent.Send(this, To, Involuntary);
	}

	public void ExtremitiesMoved(string To = null, bool Involuntary = false)
	{
		ExtremitiesMovedEvent.Send(this, To, Involuntary);
	}

	public bool WasThrown(LargerFolk_GameObject By, LargerFolk_GameObject At = null)
	{
		if (!BeforeAfterThrownEvent.Check(By, this, At))
		{
			return false;
		}
		if (!AfterThrownEvent.Check(By, this, At))
		{
			return false;
		}
		if (!AfterAfterThrownEvent.Check(By, this, At))
		{
			return false;
		}
		return true;
	}

	public bool IsOpenLiquidVolume()
	{
		return LiquidVolume?.IsOpenVolume() ?? false;
	}

	public bool IsDangerousOpenLiquidVolume()
	{
		LiquidVolume liquidVolume = LiquidVolume;
		if (liquidVolume == null)
		{
			return false;
		}
		if (liquidVolume.IsOpenVolume())
		{
			return liquidVolume.ConsiderLiquidDangerousToContact();
		}
		return false;
	}

	public bool IsSwimmingDepthLiquid()
	{
		return LiquidVolume?.IsSwimmingDepth() ?? false;
	}

	public bool IsWadingDepthLiquid()
	{
		return LiquidVolume?.IsWadingDepth() ?? false;
	}

	public bool IsSwimmableFor(LargerFolk_GameObject who)
	{
		return LiquidVolume?.IsSwimmableFor(who) ?? false;
	}

	public bool IsHealingPool()
	{
		LiquidVolume liquidVolume = LiquidVolume;
		if (liquidVolume == null)
		{
			return false;
		}
		if (liquidVolume.MaxVolume != -1)
		{
			return false;
		}
		return liquidVolume.ContainsSignificantLiquid("convalessence");
	}

	public bool HasReadyMissileWeapon()
	{
		return Body?.HasReadyMissileWeapon() ?? false;
	}

	public bool HasMissileWeapon(Predicate<LargerFolk_GameObject> Filter = null, Predicate<MissileWeapon> PartFilter = null)
	{
		return Body?.HasMissileWeapon(Filter, PartFilter) ?? false;
	}

	public List<LargerFolk_GameObject> GetMissileWeapons(Predicate<LargerFolk_GameObject> Filter = null, Predicate<MissileWeapon> PartFilter = null)
	{
		return Body?.GetMissileWeapons(Filter, PartFilter);
	}

	public bool HasHeavyWeaponEquipped()
	{
		return Body?.HasHeavyWeaponEquipped() ?? false;
	}

	public LargerFolk_GameObject GetFirstThrownWeapon(Predicate<LargerFolk_GameObject> Filter = null, Predicate<ThrownWeapon> PartFilter = null)
	{
		return Body?.GetFirstThrownWeapon(Filter, PartFilter);
	}

	public IList<LargerFolk_GameObject> GetThrownWeapons(Predicate<LargerFolk_GameObject> Filter = null, Predicate<ThrownWeapon> PartFilter = null)
	{
		return Body?.GetThrownWeapons(Filter, PartFilter);
	}

	public IList<LargerFolk_GameObject> GetThrownWeapons(IList<LargerFolk_GameObject> List, Predicate<LargerFolk_GameObject> Filter = null, Predicate<ThrownWeapon> PartFilter = null)
	{
		Body?.GetThrownWeapons(List, Filter, PartFilter);
		return List;
	}

	public BodyPart GetFirstBodyPart(string Type)
	{
		return Body?.GetFirstPart(Type);
	}

	public BodyPart GetFirstBodyPart(string Type, int Laterality)
	{
		return Body?.GetFirstPart(Type, Laterality);
	}

	public BodyPart GetFirstBodyPart(Predicate<BodyPart> Filter)
	{
		return Body?.GetFirstPart(Filter);
	}

	public BodyPart GetFirstBodyPart(string Type, Predicate<BodyPart> Filter)
	{
		return Body?.GetFirstPart(Type, Filter);
	}

	public BodyPart GetFirstBodyPart(string Type, int Laterality, Predicate<BodyPart> Filter)
	{
		return Body?.GetFirstPart(Type, Laterality, Filter);
	}

	public BodyPart GetFirstBodyPart(string Type, bool EvenIfDismembered)
	{
		return Body?.GetFirstPart(Type, EvenIfDismembered);
	}

	public BodyPart GetFirstBodyPart(string Type, int Laterality, bool EvenIfDismembered)
	{
		return Body?.GetFirstPart(Type, Laterality, EvenIfDismembered);
	}

	public BodyPart GetFirstBodyPart(Predicate<BodyPart> Filter, bool EvenIfDismembered)
	{
		return Body?.GetFirstPart(Filter, EvenIfDismembered);
	}

	public BodyPart GetFirstBodyPart(string Type, Predicate<BodyPart> Filter, bool EvenIfDismembered)
	{
		return Body?.GetFirstPart(Type, Filter, EvenIfDismembered);
	}

	public BodyPart GetFirstBodyPart(string Type, int Laterality, Predicate<BodyPart> Filter, bool EvenIfDismembered)
	{
		return Body?.GetFirstPart(Type, Laterality, Filter, EvenIfDismembered);
	}

	public bool HasBodyPart(string Type)
	{
		return Body?.HasPart(Type) ?? false;
	}

	public bool HasBodyPart(string Type, int Laterality)
	{
		return Body?.HasPart(Type, Laterality) ?? false;
	}

	public bool HasBodyPart(Predicate<BodyPart> Filter)
	{
		return Body?.HasPart(Filter) ?? false;
	}

	public bool HasBodyPart(string Type, Predicate<BodyPart> Filter)
	{
		return Body?.HasPart(Type, Filter) ?? false;
	}

	public bool HasBodyPart(string Type, bool EvenIfDismembered)
	{
		return Body?.HasPart(Type, EvenIfDismembered) ?? false;
	}

	public bool HasBodyPart(string Type, int Laterality, bool EvenIfDismembered)
	{
		return Body?.HasPart(Type, Laterality, EvenIfDismembered) ?? false;
	}

	public bool HasBodyPart(Predicate<BodyPart> Filter, bool EvenIfDismembered)
	{
		return Body?.HasPart(Filter, EvenIfDismembered) ?? false;
	}

	public bool HasBodyPart(string Type, Predicate<BodyPart> Filter, bool EvenIfDismembered)
	{
		return Body?.HasPart(Type, Filter, EvenIfDismembered) ?? false;
	}

	public bool HasBodyPart(string Type, int Laterality, Predicate<BodyPart> Filter, bool EvenIfDismembered)
	{
		return Body?.HasPart(Type, Laterality, Filter, EvenIfDismembered) ?? false;
	}

	public bool CheckInfluence(ref string FailureMessage, string Type = null, LargerFolk_GameObject By = null, bool Silent = false)
	{
		if (By == null)
		{
			By = ThePlayer;
			if (By == null)
			{
				return false;
			}
		}
		Event @event = Event.New("CanBeInfluenced");
		@event.SetParameter("Subject", this);
		@event.SetParameter("Type", Type);
		@event.SetParameter("By", By);
		@event.SetParameter("Message", FailureMessage);
		bool result = FireEvent(@event);
		FailureMessage = @event.GetStringParameter("Message");
		return result;
	}

	public bool CheckInfluence(string Type = null, LargerFolk_GameObject By = null, bool Silent = false)
	{
		string FailureMessage = null;
		bool num = CheckInfluence(ref FailureMessage, Type, By, Silent);
		if (!num && Validate(ref By) && By.IsPlayer())
		{
			if (FailureMessage.IsNullOrEmpty())
			{
				By.Fail("Nothing happens.");
				return num;
			}
			By.Fail(GameText.VariableReplace(FailureMessage, this, (GameObject)null, StripColors: true));
		}
		return num;
	}

	public bool IsAudible(LargerFolk_GameObject By, int Volume = 20)
	{
		if (By == null)
		{
			return false;
		}
		return CurrentCell?.IsAudible(By, Volume) ?? false;
	}

	public bool IsSmellable(LargerFolk_GameObject By)
	{
		if (By == null)
		{
			return false;
		}
		return CurrentCell?.IsSmellable(By, GetIntProperty("SmellIntensity", 5)) ?? false;
	}

	public Cell GetDropCell()
	{
		Cell cell = GetCurrentCell();
		if (cell != null && cell.IsSolidOtherThan(this))
		{
			bool flag = false;
			int num = int.MaxValue;
			foreach (Cell adjacentCell in cell.GetAdjacentCells())
			{
				if (adjacentCell.IsSolid())
				{
					continue;
				}
				if (flag)
				{
					int num2 = XRL.The.Player.DistanceTo(adjacentCell);
					if (num2 < num)
					{
						cell = adjacentCell;
						num = num2;
					}
					continue;
				}
				flag = true;
				cell = adjacentCell;
				if (XRL.The.Player == null)
				{
					break;
				}
				num = XRL.The.Player.DistanceTo(adjacentCell);
			}
		}
		return cell;
	}

	public IInventory GetDropInventory()
	{
		GameObject inInventory = InInventory;
		if (inInventory != null)
		{
			Inventory inventory = inInventory.Inventory;
			if (inventory != null)
			{
				return inventory;
			}
		}
		if (_Effects != null)
		{
			int i = 0;
			for (int count = _Effects.Count; i < count; i++)
			{
				if (_Effects[i] is Engulfed engulfed && engulfed.IsEngulfedByValid())
				{
					Inventory inventory2 = engulfed.EngulfedBy.Inventory;
					if (inventory2 != null)
					{
						return inventory2;
					}
				}
			}
		}
		return GetDropCell();
	}

	public bool CanBeTargetedByPlayer()
	{
		if (IsPlayerControlled())
		{
			return false;
		}
		if (!HasStat("Hitpoints"))
		{
			return false;
		}
		if (CurrentCell == null)
		{
			return false;
		}
		return true;
	}

	public int AwardXP(int Amount, int Tier = -1, int Minimum = 0, int Maximum = int.MaxValue, LargerFolk_GameObject Kill = null, LargerFolk_GameObject InfluencedBy = null, LargerFolk_GameObject PassedUpFrom = null, LargerFolk_GameObject PassedDownFrom = null, string ZoneID = null, string Deed = null)
	{
		return AwardXPEvent.Send(this, Amount, Tier, Minimum, Maximum, Kill, InfluencedBy, PassedUpFrom, PassedDownFrom, ZoneID, Deed);
	}

	public int AwardXPTo(LargerFolk_GameObject Subject, bool ForKill = true, string Deed = null, bool MockAward = false)
	{
		int result = 0;
		if (!HasTagOrProperty("NoXP") && Statistics.TryGetValue("XPValue", out var value))
		{
			int intProperty = GetIntProperty("*XPValue", value.Value);
			if (intProperty > 0)
			{
				int tier = -1;
				if (Statistics.TryGetValue("Level", out var value2))
				{
					tier = value2.Value / 5;
				}
				result = ((!MockAward) ? Subject.AwardXP(intProperty, tier, 0, int.MaxValue, ForKill ? this : null, ForKill ? null : this, null, null, null, Deed) : intProperty);
			}
			Statistics.Remove("XPValue");
		}
		return result;
	}

	public void StopFighting(bool Involuntary = false)
	{
		Brain?.StopFighting(Involuntary);
	}

	public void StopFighting(LargerFolk_GameObject Object, bool Involuntary = false)
	{
		Brain?.StopFighting(Object, Involuntary);
	}

	public void StopFight(bool Involuntary = false)
	{
		Brain?.StopFight(Involuntary);
	}

	public void StopFight(LargerFolk_GameObject Object, bool Involuntary = false, bool Reciprocal = false)
	{
		Brain?.StopFight(Object, Involuntary, Reciprocal);
	}

	public bool GetAngryAt(LargerFolk_GameObject who, int Amount = -50)
	{
		return Brain?.GetAngryAt(who, Amount) ?? false;
	}

	public void AddOpinion<T>(LargerFolk_GameObject Subject, float Magnitude = 1f) where T : IOpinionSubject, new()
	{
		Brain?.AddOpinion<T>(Subject, Magnitude);
	}

	public void AddOpinion<T>(LargerFolk_GameObject Subject, LargerFolk_GameObject Object, float Magnitude = 1f) where T : IOpinionObject, new()
	{
		Brain?.AddOpinion<T>(Subject, Object, Magnitude);
	}

	public bool LikeBetter(LargerFolk_GameObject who, int Amount = 50)
	{
		return Brain?.LikeBetter(who, Amount) ?? false;
	}

	public string GetWaterRitualLiquid(LargerFolk_GameObject Actor = null)
	{
		return GetWaterRitualLiquidEvent.GetFor(Actor ?? ThePlayer, this);
	}

	public string GetWaterRitualLiquidName(LargerFolk_GameObject Actor = null)
	{
		return LiquidVolume.GetLiquid(GetWaterRitualLiquid(Actor)).GetName();
	}

	public string GetMythicDomain(int Range = 5, System.Random Random = null)
	{
		GetItemElementsEvent E = GetItemElementsEvent.GetMythicFor(this, Range, Random);
		object obj = E.Bag.PeekOne();
		PooledEvent<GetItemElementsEvent>.ResetTo(ref E);
		if (obj == null)
		{
			obj = "might";
		}
		return (string)obj;
	}

	public int ResistMentalIntrusion(string Type, int Magnitude, LargerFolk_GameObject Attacker)
	{
		Event @event = Event.New("ResistMentalIntrusion");
		@event.SetParameter("Type", Type);
		@event.SetParameter("Magnitude", Magnitude);
		@event.SetParameter("Attacker", Attacker);
		@event.SetParameter("Defender", this);
		FireEvent(@event);
		return @event.GetIntParameter("Magnitude");
	}

	public void FlushNavigationCaches()
	{
		GetCurrentCell()?.FlushNavigationCache();
	}

	public void FlushContextWeightCaches()
	{
		(InInventory ?? Equipped)?.FlushWeightCaches();
	}

	public void FlushCarriedWeightCache()
	{
		CarriedWeightCache = -1;
		MaxCarriedWeightCache = -1;
	}

	public void FlushWeightCaches()
	{
		FlushCarriedWeightCache();
		FlushWeightCacheEvent.Send(this);
	}

	public bool WantTurnTick()
	{
		if ((TransientCache & 1) != 0)
		{
			return true;
		}
		if ((TransientCache & 2) != 0)
		{
			return false;
		}
		int i = 0;
		for (int partsCascade = PartsCascade; i < partsCascade; i++)
		{
			if (PartsList[i].WantTurnTick())
			{
				TransientCache |= 1;
				return true;
			}
		}
		TransientCache |= 2;
		return false;
	}

	public void TurnTick(long TimeTick, int Amount)
	{
		IPart[] array = PartsList.GetArray();
		int i = 0;
		for (int partsCascade = PartsCascade; i < partsCascade; i++)
		{
			IPart part = array[i];
			part.TurnTick(TimeTick, Amount);
			if (partsCascade != PartsCascade)
			{
				partsCascade = PartsCascade;
				array = PartsList.GetArray();
				if (i < partsCascade && array[i] != part)
				{
					i--;
				}
			}
		}
	}

	public LargerFolk_GameObject AddAsActiveObject()
	{
		XRL.The.ActionManager?.AddActiveObject(this);
		return this;
	}

	public ActivatedAbilityEntry GetActivatedAbilityByCommand(string Command)
	{
		return ActivatedAbilities?.GetAbilityByCommand(Command);
	}

	public ActivatedAbilityEntry GetActivatedAbility(Guid ID)
	{
		ActivatedAbilities activatedAbilities = ActivatedAbilities;
		if (activatedAbilities == null)
		{
			return null;
		}
		if (activatedAbilities.AbilityByGuid == null)
		{
			return null;
		}
		if (activatedAbilities.AbilityByGuid.TryGetValue(ID, out var value))
		{
			return value;
		}
		return null;
	}

	public bool RemoveActivatedAbility(ref Guid ID)
	{
		bool result = false;
		if (ID != Guid.Empty)
		{
			ActivatedAbilities activatedAbilities = ActivatedAbilities;
			if (activatedAbilities != null)
			{
				result = activatedAbilities.RemoveAbility(ID);
			}
			ID = Guid.Empty;
		}
		return result;
	}

	public bool RemoveActivatedAbilityByCommand(string Command)
	{
		if (!Command.IsNullOrEmpty())
		{
			ActivatedAbilities activatedAbilities = ActivatedAbilities;
			if (activatedAbilities != null && activatedAbilities.RemoveAbilityByCommand(Command))
			{
				return true;
			}
		}
		return false;
	}

	public bool EnableActivatedAbility(Guid ID)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			activatedAbility.Enabled = true;
			return true;
		}
		return false;
	}

	public bool DisableActivatedAbility(Guid ID)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			activatedAbility.Enabled = false;
			return true;
		}
		return false;
	}

	public bool ToggleActivatedAbility(Guid ID, bool Silent = false, bool? SetState = null)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			bool flag = SetState ?? (!activatedAbility.ToggleState);
			if (!Silent && IsPlayer() && flag != activatedAbility.ToggleState)
			{
				string text = (flag ? "on" : "off");
				SoundManager.PlayUISound("ui_checkbox_toggle", 0.5f);
				MessageQueue.AddPlayerMessage("You toggle " + Markup.Color("c", activatedAbility.DisplayName) + " " + text + ".");
			}
			activatedAbility.ToggleState = flag;
			return true;
		}
		return false;
	}

	public bool IsActivatedAbilityToggledOn(Guid ID)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if ((activatedAbility == null || !activatedAbility.ActiveToggle) && (activatedAbility == null || !activatedAbility.Toggleable))
		{
			return false;
		}
		return GetActivatedAbility(ID)?.ToggleState ?? false;
	}

	public int GetActivatedAbilityCooldown(Guid ID)
	{
		return GetActivatedAbility(ID)?.Cooldown ?? 0;
	}

	public bool IsActivatedAbilityCoolingDown(Guid ID)
	{
		return GetActivatedAbilityCooldown(ID) > 0;
	}

	[Obsolete("Use GetActivatedAbilityCooldownRounds instead, will be removed after Q1 2024")]
	public int GetActivatedAbilityCooldownTurns(Guid ID)
	{
		return GetActivatedAbilityCooldownRounds(ID);
	}

	public int GetActivatedAbilityCooldownRounds(Guid ID)
	{
		return GetActivatedAbility(ID)?.CooldownRounds ?? 0;
	}

	public string GetActivatedAbilityCooldownDescription(Guid ID)
	{
		return GetActivatedAbility(ID)?.Description ?? "";
	}

	public bool CooldownActivatedAbility(Guid ID, int Turns, string Tags = null, bool Involuntary = false)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		Turns = GetCooldownTurns(activatedAbility, Turns, Tags, Involuntary);
		if (Turns <= 0)
		{
			return true;
		}
		if (activatedAbility != null)
		{
			activatedAbility.SetScaledCooldown(Turns * 10);
			return true;
		}
		return false;
	}

	public int GetCooldownTurns(Guid ActivatedAbilityID, int Turns, string Tags = null, bool Involuntary = false)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ActivatedAbilityID);
		if (activatedAbility != null)
		{
			return GetCooldownTurns(activatedAbility, Turns, Tags, Involuntary);
		}
		return -1;
	}

	public int GetCooldownTurns(ActivatedAbilityEntry ability, int Turns, string tags = null, bool Involuntary = false)
	{
		Event @event = Event.New("BeforeCooldownActivatedAbility");
		@event.SetParameter("AbilityEntry", ability);
		@event.SetParameter("Turns", Turns);
		@event.SetParameter("Tags", tags);
		@event.SetFlag("Involuntary", Involuntary);
		if (!FireEvent(@event))
		{
			return -1;
		}
		return @event.GetIntParameter("Turns");
	}

	public bool TakeActivatedAbilityOffCooldown(Guid ID)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			activatedAbility.Cooldown = 0;
			return true;
		}
		return false;
	}

	public bool IsActivatedAbilityUsable(ActivatedAbilityEntry Ability)
	{
		return Ability?.IsUsable ?? false;
	}

	public bool IsActivatedAbilityUsable(Guid ID)
	{
		return IsActivatedAbilityUsable(GetActivatedAbility(ID));
	}

	public bool IsActivatedAbilityUsable(string Command)
	{
		return IsActivatedAbilityUsable(GetActivatedAbilityByCommand(Command));
	}

	public bool IsActivatedAbilityAIUsable(ActivatedAbilityEntry Ability)
	{
		return Ability?.IsAIUsable ?? false;
	}

	public bool IsActivatedAbilityAIUsable(Guid ID)
	{
		return IsActivatedAbilityAIUsable(GetActivatedAbility(ID));
	}

	public bool IsActivatedAbilityAIUsable(string Command)
	{
		return IsActivatedAbilityAIUsable(GetActivatedAbilityByCommand(Command));
	}

	public bool IsActivatedAbilityAIDisabled(ActivatedAbilityEntry Ability)
	{
		return Ability?.AIDisable ?? false;
	}

	public bool IsActivatedAbilityAIDisabled(Guid ID)
	{
		return IsActivatedAbilityAIDisabled(GetActivatedAbility(ID));
	}

	public bool IsActivatedAbilityAIDisabled(string Command)
	{
		return IsActivatedAbilityAIDisabled(GetActivatedAbilityByCommand(Command));
	}

	public bool IsActivatedAbilityVoluntarilyUsable(ActivatedAbilityEntry Ability)
	{
		if (!IsPlayer())
		{
			return IsActivatedAbilityAIUsable(Ability);
		}
		return IsActivatedAbilityUsable(Ability);
	}

	public bool IsActivatedAbilityVoluntarilyUsable(Guid ID)
	{
		if (!IsPlayer())
		{
			return IsActivatedAbilityAIUsable(ID);
		}
		return IsActivatedAbilityUsable(ID);
	}

	public bool IsActivatedAbilityVoluntarilyUsable(string Command)
	{
		if (!IsPlayer())
		{
			return IsActivatedAbilityAIUsable(Command);
		}
		return IsActivatedAbilityUsable(Command);
	}

	public bool DescribeActivatedAbility(Guid ID, Action<Templates.StatCollector> statCollector)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			if (Templates.TemplateByID.TryGetValue("ActivatedAbility." + activatedAbility.CommandForDescription, out var value))
			{
				activatedAbility.Description = value.Build(statCollector, "ability " + activatedAbility.CommandForDescription);
			}
			return true;
		}
		return false;
	}

	public bool DescribeActivatedAbility(Guid ID, Templates.StatCollector values)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			if (Templates.TemplateByID.TryGetValue("ActivatedAbility." + activatedAbility.CommandForDescription, out var value))
			{
				activatedAbility.Description = value.Build(values);
			}
			return true;
		}
		return false;
	}

	public bool DescribeActivatedAbility(Guid ID, string description)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			activatedAbility.Description = description;
			return true;
		}
		return false;
	}

	public bool SetActivatedAbilityDisplayName(Guid ID, string DisplayName)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			activatedAbility.DisplayName = DisplayName;
			return true;
		}
		return false;
	}

	public bool SetActivatedAbilityDisabledMessage(Guid ID, string DisabledMessage)
	{
		ActivatedAbilityEntry activatedAbility = GetActivatedAbility(ID);
		if (activatedAbility != null)
		{
			activatedAbility.DisabledMessage = DisabledMessage;
			return true;
		}
		return false;
	}

	public Guid AddDynamicCommand(out string Command, string CommandForDescription, string Name, string Class, string Description = null, string Icon = "\a", string DisabledMessage = null, bool Toggleable = false, bool DefaultToggleState = false, bool ActiveToggle = false, bool IsAttack = false, bool IsRealityDistortionBased = false, bool IsWorldMapUsable = false, bool Silent = false, bool AIDisable = false, bool AlwaysAllowToggleOff = true, bool AffectedByWillpower = true, bool TickPerTurn = false, bool Distinct = false, int Cooldown = -1, Renderable UITileDefault = null, Renderable UITileToggleOn = null, Renderable UITileDisabled = null, Renderable UITileCoolingDown = null)
	{
		Command = null;
		ActivatedAbilities activatedAbilities = ActivatedAbilities;
		if (activatedAbilities == null)
		{
			return Guid.Empty;
		}
		Command = activatedAbilities.GetNextAvailableCommandString(CommandForDescription);
		return AddActivatedAbility(Name, Command, Class, Description, Icon, DisabledMessage, Toggleable, DefaultToggleState, ActiveToggle, IsAttack, IsRealityDistortionBased, IsWorldMapUsable, Silent, AIDisable, AlwaysAllowToggleOff, AffectedByWillpower, TickPerTurn, Distinct, Cooldown, CommandForDescription, UITileDefault, UITileToggleOn, UITileDisabled, UITileCoolingDown);
	}

	public Guid AddActivatedAbility(string Name, string Command, string Class, string Description = null, string Icon = "\a", string DisabledMessage = null, bool Toggleable = false, bool DefaultToggleState = false, bool ActiveToggle = false, bool IsAttack = false, bool IsRealityDistortionBased = false, bool IsWorldMapUsable = false, bool Silent = false, bool AIDisable = false, bool AlwaysAllowToggleOff = true, bool AffectedByWillpower = true, bool TickPerTurn = false, bool Distinct = false, int Cooldown = -1, string CommandForDescription = null, Renderable UITileDefault = null, Renderable UITileToggleOn = null, Renderable UITileDisabled = null, Renderable UITileCoolingDown = null)
	{
		return ActivatedAbilities?.AddAbility(Name, Command, Class, Description, Icon, DisabledMessage, Toggleable, DefaultToggleState, ActiveToggle, IsAttack, IsRealityDistortionBased, IsWorldMapUsable, Silent, AIDisable, AlwaysAllowToggleOff, AffectedByWillpower, TickPerTurn, Distinct, Cooldown, CommandForDescription, UITileDefault, UITileToggleOn, UITileDisabled, UITileCoolingDown) ?? Guid.Empty;
	}

	public int GetHighestActivatedAbilityCooldown()
	{
		int num = -1;
		ActivatedAbilities activatedAbilities = ActivatedAbilities;
		if (activatedAbilities != null && activatedAbilities.AbilityByGuid != null)
		{
			foreach (ActivatedAbilityEntry value in activatedAbilities.AbilityByGuid.Values)
			{
				int cooldown = value.Cooldown;
				if (cooldown > num)
				{
					num = cooldown;
				}
			}
		}
		return num;
	}

	[Obsolete("Use GetHighestActivatedAbilityCooldownRounds, will be removed Q1 2024")]
	public int GetHighestActivatedAbilityCooldownTurns()
	{
		return GetHighestActivatedAbilityCooldownRounds();
	}

	public int GetHighestActivatedAbilityCooldownRounds()
	{
		int num = -1;
		ActivatedAbilities activatedAbilities = ActivatedAbilities;
		if (activatedAbilities != null && activatedAbilities.AbilityByGuid != null)
		{
			foreach (ActivatedAbilityEntry value in activatedAbilities.AbilityByGuid.Values)
			{
				int cooldownRounds = value.CooldownRounds;
				if (cooldownRounds > num)
				{
					num = cooldownRounds;
				}
			}
		}
		return num;
	}

	public bool Seen()
	{
		GetBlueprint().Seen();
		if ((TransientCache & 0x40) == 0)
		{
			TransientCache |= 64;
			Factions.RegisterWorshippable(this);
		}
		return true;
	}

	public bool BlueprintSeen()
	{
		return GetBlueprint().HasBeenSeen();
	}

	public string GetSpecies()
	{
		return GetPropertyOrTag("Species") ?? Blueprint;
	}

	public string GetApparentSpecies(LargerFolk_GameObject Viewer = null)
	{
		return GetApparentSpeciesEvent.GetFor(this, Viewer, GetSpecies());
	}

	public string GetClass()
	{
		return GetPropertyOrTag("Class") ?? Blueprint;
	}

	public string GetCulture()
	{
		return GetPropertyOrTag("Culture") ?? GetSpecies();
	}

	public bool WantEvent(int ID, int Cascade)
	{
		if (MinEvent.CascadeTo(Cascade, 256))
		{
			return true;
		}
		if (RegisteredEvents != null && RegisteredEvents.ContainsKey(ID))
		{
			return true;
		}
		if (MinEvent.CascadeTo(Cascade, 64))
		{
			return false;
		}
		IPart[] array = PartsList.GetArray();
		int i = 0;
		for (int partsCascade = PartsCascade; i < partsCascade; i++)
		{
			if (array[i].WantEvent(ID, Cascade))
			{
				return true;
			}
		}
		if (_Effects != null && _Effects.Count > 0)
		{
			Effect[] array2 = _Effects.GetArray();
			int j = 0;
			for (int count = _Effects.Count; j < count; j++)
			{
				if (array2[j].WantEvent(ID, Cascade))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HandleEvent(OwnerGetInventoryActionsEvent E)
	{
		if (!HandleOwnerGetInventoryActionsEvent(E))
		{
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(EnteredCellEvent E)
	{
		if (!HandleEnteredCellEvent(E))
		{
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(InventoryActionEvent E)
	{
		if (!HandleInventoryActionEvent(E))
		{
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(ContainsAnyBlueprintEvent E)
	{
		if (E.Blueprints.Contains(Blueprint) && E.Container != this)
		{
			E.Object = this;
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(ContainsEvent E)
	{
		if (E.Object == this && E.Container != this)
		{
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(ContainsBlueprintEvent E)
	{
		if (E.Blueprint == Blueprint && E.Container != this)
		{
			E.Object = this;
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(FindObjectByIdEvent E)
	{
		if (IDMatch(E.FindID) || IDMatch(E.FindBaseID))
		{
			E.Object = this;
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(MakeTemporaryEvent E)
	{
		if (!HandleMakeTemporaryEvent(E))
		{
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(GlimmerChangeEvent E)
	{
		if (IsPlayer())
		{
			PsychicGlimmer.Update(this);
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(CommandReplaceCellEvent E)
	{
		if (IsPlayer() && E.Actor == this)
		{
			PerformReplaceCell(this);
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(GetPointsOfInterestEvent E)
	{
		Cell currentCell = CurrentCell;
		if (currentCell != null && currentCell.Explored && ((IsCreature && HasProperName && !IsPlayerControlled()) || IsMarkedImportantByPlayer()) && E.StandardChecks(null, null, this))
		{
			E.Add(this, GetReferenceDisplayName(), null, null, null, CurrentCell.Location);
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(IsRepairableEvent E)
	{
		if ((!HasTag("Creature") || !IsOrganic) && isDamaged())
		{
			return false;
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(RepairedEvent E)
	{
		if (!HasTag("Creature") || !IsOrganic)
		{
			Heal(500, Message: false, FloatText: true);
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(GetMovementCapabilitiesEvent E)
	{
		if (IsPlayer())
		{
			E.Add("Move to Square", "CmdMoveTo", 1000);
			E.Add("Move to Zone Edge", "CmdMoveToEdge", 2000);
			E.Add("Move to Point of Interest".Color(GetPointsOfInterestEvent.AnyFor(this) ? null : "K"), "CmdMoveToPointOfInterest", 3000);
			E.Add("Move Direction Until Stopped", "CmdWalk", 4000);
			E.Add("Move Direction One Square", "CmdMoveDirection", 5000);
			E.Add("Attack Direction", "CmdAttackDirection", 6000, null, IsAttack: true);
		}
		return HandleEventInner(E);
	}

	public bool HandleEvent(EndTurnEvent E)
	{
		bool flag = HandleEventInner(E);
		if (flag)
		{
			flag = FireRegisteredEvent(EndTurnEvent.registeredInstance);
		}
		CleanEffects();
		return flag;
	}

	public bool HandleEvent(AutoexploreObjectEvent E)
	{
		bool result = HandleEventInner(E);
		if (E.Actor == this)
		{
			if (E.Command == null && E.Item.ShouldAutoget())
			{
				E.Command = "Autoget";
			}
			if (E.Command == "Autoget" && !E.Item.CanAutoget())
			{
				E.Command = null;
				E.AllowRetry = false;
			}
		}
		return result;
	}

	public bool HandleEvent(MinEvent E)
	{
		return HandleEventInner(E);
	}

	public bool HandleEvent<T>(T E, IEvent ParentEvent) where T : MinEvent
	{
		bool result = HandleEvent(E);
		ParentEvent?.ProcessChildEvent(E);
		return result;
	}

	private bool HandleEventInner(MinEvent E)
	{
		int cascadeLevel = E.GetCascadeLevel();
		if (MinEvent.CascadeTo(cascadeLevel, 64))
		{
			return RegisteredEvents?.Dispatch(E) ?? true;
		}
		int iD = E.ID;
		EventRegistry.List list = RegisteredEvents?[iD];
		if (list != null && !list.DispatchRange(E, int.MinValue, -1))
		{
			return false;
		}
		IPart[] array = PartsList.GetArray();
		int i = 0;
		for (int partsCascade = PartsCascade; i < partsCascade; i++)
		{
			IPart part = array[i];
			if (!part.WantEvent(iD, cascadeLevel))
			{
				continue;
			}
			if (!E.Dispatch(part))
			{
				return false;
			}
			if (!part.HandleEvent(E))
			{
				return false;
			}
			if (partsCascade != PartsCascade)
			{
				partsCascade = PartsCascade;
				array = PartsList.GetArray();
				if (i < partsCascade && array[i] != part)
				{
					i--;
				}
			}
		}
		if (_Effects != null && _Effects.Count > 0)
		{
			Effect[] array2 = _Effects.GetArray();
			int j = 0;
			for (int count = _Effects.Count; j < count; j++)
			{
				Effect effect = array2[j];
				if (!effect.WantEvent(iD, cascadeLevel))
				{
					continue;
				}
				if (!E.Dispatch(effect))
				{
					return false;
				}
				if (!effect.HandleEvent(E))
				{
					return false;
				}
				if (count != _Effects.Count)
				{
					count = _Effects.Count;
					array2 = _Effects.GetArray();
					if (j < count && array2[j] != effect)
					{
						j--;
					}
				}
			}
		}
		if (list != null && !list.DispatchRange(E, 0))
		{
			return false;
		}
		return true;
	}

	private bool HandleMakeTemporaryEvent(MakeTemporaryEvent E)
	{
		XRL.World.Parts.Temporary part = GetPart<XRL.World.Parts.Temporary>();
		int num = E.Duration;
		LargerFolk_GameObject gameObject = E.DependsOn;
		if (E.RootObject != this)
		{
			num = -1;
			gameObject = E.RootObject;
		}
		if (part == null)
		{
			AddPart(new XRL.World.Parts.Temporary(num, E.TurnInto));
		}
		else
		{
			if (num != -1 && (part.Duration == -1 || part.Duration < num))
			{
				part.Duration = num;
			}
			if (!E.TurnInto.IsNullOrEmpty() && part.TurnInto.IsNullOrEmpty())
			{
				part.TurnInto = E.TurnInto;
			}
		}
		if (gameObject != null)
		{
			ExistenceSupport existenceSupport = RequirePart<ExistenceSupport>();
			existenceSupport.SupportedBy = gameObject;
			if (E.RootObjectValidateEveryTurn && this == E.RootObject)
			{
				existenceSupport.ValidateEveryTurn = true;
			}
		}
		return true;
	}

	private bool HandleOwnerGetInventoryActionsEvent(OwnerGetInventoryActionsEvent E)
	{
		if (E.Actor == this && IsPlayer() && E.Object != null)
		{
			bool num = E.Object.IsPlayerLed();
			if (num && !E.Object.IsPlayer())
			{
				E.AddAction("Attack Target", "direct to attack target", "CompanionAttackTarget", "attack", 'a', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
				if (E.Object.Brain != null)
				{
					if (E.Object.Brain.Passive)
					{
						E.AddAction("Aggressive Engagement", "direct to engage aggressively", "CompanionToggleEngagement", "engage", 'e', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
					}
					else
					{
						E.AddAction("Passive Engagement", "direct to engage defensively only", "CompanionToggleEngagement", "engage", 'e', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
					}
					if (E.Object.IsPotentiallyMobile() && E.Object.Brain.Staying)
					{
						E.AddAction("Come", "direct to come along", "CompanionCome", "come", 'c', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
					}
				}
				if (E.Object.WillTrade())
				{
					E.AddAction("Give Items", "give items", "CompanionGiveItems", null, 'g', FireOnActor: true);
				}
				if (E.Object.IsPotentiallyMobile())
				{
					E.AddAction("Move To", "direct to move", "CompanionMoveTo", null, 'm', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
					E.AddAction("Change Follow Distance", "direct to change follow distance", "CompanionChangeFollowDistance", null, 'f', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
				}
				if (E.Object.IsPotentiallyMobile() && E.Object.Brain != null && !E.Object.Brain.Staying)
				{
					E.AddAction("Stay", "direct to stay there", "CompanionStay", null, 's', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
				}
				ActivatedAbilities activatedAbilities = E.Object.ActivatedAbilities;
				if (activatedAbilities != null && activatedAbilities.GetAbilityCount() > 0)
				{
					E.AddAction("Change Ability Use", "direct ability use", "CompanionAbilityUse", null, 'u', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
				}
			}
			if (num || (E.Object.IsPlayer() && E.Object.GetIntProperty("Renamed") == 1))
			{
				E.AddAction("Rename", "rename", "CompanionRename", null, 'r', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
			}
			if (E.Object == E.Actor.Target)
			{
				E.AddAction("Untarget", "untarget", "Untarget", null, 't', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
			}
			else if (!E.Actor.IsPlayer() || E.Object.CanBeTargetedByPlayer())
			{
				E.AddAction("Target", "target", "Target", null, 't', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
			}
			E.AddAction("Show Effects", "show effects", "ShowEffects", null, 'w', FireOnActor: true, 0, 0, Override: false, WorksAtDistance: true);
		}
		return true;
	}

	private bool HandleEnteredCellEvent(EnteredCellEvent E)
	{
		if (IsPlayer() && (!AutoAct.IsActive() || AutoAct.IsMovement()) && !AutoAct.ShouldHostilesPreventAutoget())
		{
			Sidebar.ClearAutogotItems();
			AutoAct.ResumeSetting = AutoAct.Setting;
			AutoAct.Setting = "g";
		}
		return true;
	}

	private bool HandleInventoryActionEvent(InventoryActionEvent E)
	{
		E.Item.ModIntProperty("InventoryActions", 1);
		E.Item.ModIntProperty("InventoryActions" + E.Command, 1);
		E.Item.SetStringProperty("LastInventoryActionCommand", E.Command);
		E.Item.SetLongProperty("LastInventoryActionTurn", XRLCore.CurrentTurn);
		if (E.Command == "Target")
		{
			if (E.Item.CanBeTargetedByPlayer())
			{
				Sidebar.CurrentTarget = E.Item;
			}
			E.RequestInterfaceExit();
		}
		else if (E.Command == "Untarget")
		{
			if (E.Actor.Target == E.Item)
			{
				E.Actor.Target = null;
			}
			foreach (LargerFolk_GameObject companion in E.Actor.GetCompanions())
			{
				companion.StopFighting(E.Item);
			}
			E.RequestInterfaceExit();
		}
		else if (E.Command == "ShowEffects")
		{
			E.Item.ShowActiveEffects();
		}
		else if (E.Command == "Autoget")
		{
			if (E.Actor.TakeObject(E.Item, NoStack: false, Silent: false, 0) && Validate(ref E.Item))
			{
				Sidebar.AddAutogotItem(E.Item);
				Sidebar.Update();
			}
		}
		else if (E.Command.StartsWith("Companion"))
		{
			if (E.Command == "CompanionRename")
			{
				HandleRename(E);
			}
			else if (E.Command == "CompanionGiveItems")
			{
				if (E.Item.IsPlayerLed() && DistanceTo(E.Item) <= 1 && !HasProperty("FugueCopy"))
				{
					TradeUI.ShowTradeScreen(E.Item, 0f);
					UseEnergy(1000, "Companion Trade", null, null);
					E.RequestInterfaceExit();
				}
			}
			else if (E.Command == "CompanionAttackTarget")
			{
				if (CheckCompanionDirection(E.Item))
				{
					Look.HideTooltips();
					Cell cell = PickTarget.ShowPicker(PickTarget.PickStyle.Burst, 0, 9999, CurrentCell.X, CurrentCell.Y, Locked: true, AllowVis.OnlyVisible, null, null, null, null, "Companion Attack Target");
					if (cell != null)
					{
						GameObject combatTarget = cell.GetCombatTarget(E.Item, IgnoreFlight: true, IgnoreAttackable: false, IgnorePhase: false, 5);
						if (combatTarget != null)
						{
							E.Item.Brain.Goals.Clear();
							E.Item.Brain.WantToKill(combatTarget, "because my leader directed me", Directed: true);
							E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
							CompanionDirectionEnergyCost(E.Item, 100, "Attack Target");
							E.RequestInterfaceExit();
						}
					}
				}
			}
			else if (E.Command == "CompanionMoveTo")
			{
				if (E.Item.IsPotentiallyMobile() && CheckCompanionDirection(E.Item))
				{
					Look.HideTooltips();
					Cell cell2 = PickTarget.ShowPicker(PickTarget.PickStyle.Burst, 0, 9999, E.Item.CurrentCell.X, E.Item.CurrentCell.Y, Locked: false, AllowVis.OnlyExplored, null, null, null, null, "Companion Move To");
					if (cell2 != null && cell2 != E.Item.CurrentCell)
					{
						if (E.Item.Brain.Staying)
						{
							E.Item.Brain.Stay(cell2);
						}
						E.Item.Brain.Goals.Clear();
						E.Item.Brain.PushGoal(new MoveTo(cell2, careful: false, overridesCombat: true, 0, wandering: false, global: false, juggernaut: false, 100));
						E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
						CompanionDirectionEnergyCost(E.Item, 100, "Move");
						E.RequestInterfaceExit();
					}
				}
			}
			else if (E.Command == "CompanionChangeFollowDistance")
			{
				if (E.Item.IsPotentiallyMobile() && CheckCompanionDirection(E.Item))
				{
					switch (Popup.PickOption("", "Instruct " + E.Item.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " to follow at what distance?", "", "Sounds/UI/ui_notification", new string[3] { "close", "medium", "far" }, new char[3] { 'c', 'm', 'f' }, null, null, null, null, null, 0, 60, 0, -1, AllowEscape: true))
					{
					case 0:
						E.Item.SetIntProperty("PartyLeaderFollowDistance", 1);
						E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
						CompanionDirectionEnergyCost(E.Item, 100, "Change Follow Distance");
						E.RequestInterfaceExit();
						break;
					case 1:
						E.Item.SetIntProperty("PartyLeaderFollowDistance", 5);
						E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
						CompanionDirectionEnergyCost(E.Item, 100, "Change Follow Distance");
						E.RequestInterfaceExit();
						break;
					case 2:
						E.Item.SetIntProperty("PartyLeaderFollowDistance", 9);
						E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
						CompanionDirectionEnergyCost(E.Item, 100, "Change Follow Distance");
						E.RequestInterfaceExit();
						break;
					}
				}
			}
			else if (E.Command == "CompanionStay")
			{
				if (E.Item.IsPotentiallyMobile() && !E.Item.Brain.Staying && CheckCompanionDirection(E.Item))
				{
					E.Item.Brain.Goals.Clear();
					E.Item.Brain.Stay(E.Item.CurrentCell);
					E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
					CompanionDirectionEnergyCost(E.Item, 100, "Stay");
					E.RequestInterfaceExit();
				}
			}
			else if (E.Command == "CompanionCome")
			{
				if (E.Item.IsPotentiallyMobile() && E.Item.Brain.Staying && CheckCompanionDirection(E.Item))
				{
					E.Item.Brain.Stay(null);
					E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
					CompanionDirectionEnergyCost(E.Item, 100, "Come");
					E.RequestInterfaceExit();
				}
			}
			else if (E.Command == "CompanionToggleEngagement")
			{
				if (CheckCompanionDirection(E.Item))
				{
					E.Item.Brain.Passive = !E.Item.Brain.Passive;
					E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
					CompanionDirectionEnergyCost(E.Item, 100, "Engage");
					E.RequestInterfaceExit();
				}
			}
			else if (E.Command == "CompanionAbilityUse")
			{
				ActivatedAbilities activatedAbilities = E.Item.ActivatedAbilities;
				if (activatedAbilities != null && activatedAbilities.GetAbilityCount() > 0 && CheckCompanionDirection(E.Item))
				{
					ChangeCompanionAbilityUse(E.Item, activatedAbilities);
					E.Actor.PlayWorldSound("Sounds/Interact/sfx_interact_follower_command");
					CompanionDirectionEnergyCost(E.Item, 100, "Ability Use");
					E.RequestInterfaceExit();
				}
			}
		}
		return true;
	}

	private void HandleRename(InventoryActionEvent E)
	{
		if (!CanBeNamedEvent.Check(E.Actor, E.Item))
		{
			return;
		}
		if (E.Item.HasProperName && E.Item.GetIntProperty("Renamed") != 1)
		{
			Popup.ShowFail(E.Item.Does("don't", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " want a new name.");
			return;
		}
		Look.HideTooltips();
		bool flag = E.Item.IsPlayer();
		string text = E.Item.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, WithoutTitles: true, Short: true, BaseOnly: true, null, IndicateHidden: false, flag, flag, null);
		List<string> list = new List<string>();
		List<LargerFolk_GameObject> list2 = new List<LargerFolk_GameObject>();
		list.Add("Enter a name for " + text + ".");
		list2.Add(null);
		list.Add("Choose a random name from " + Grammar.MakePossessive(E.Item.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, flag, Reflexive: false, null)) + " culture.");
		list2.Add(E.Item);
		if (CurrentCell != null)
		{
			Cell.SpiralEnumerator enumerator = CurrentCell.IterateAdjacent(1, IncludeSelf: false, LocalOnly: true).GetEnumerator();
			while (enumerator.MoveNext())
			{
				foreach (LargerFolk_GameObject @object in enumerator.Current.Objects)
				{
					if (@object.Brain != null && !list2.Contains(@object) && !@object.IsTemporary && !@object.IsPlayer() && !@object.IsHostileTowards(this) && !@object.IsHostileTowards(E.Item))
					{
						list.Add("Choose a random name from " + Grammar.MakePossessive(@object.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null)) + " culture.");
						list2.Add(@object);
					}
				}
			}
		}
		if (!flag)
		{
			list.Add("Choose a random name from your own culture.");
			list2.Add(this);
		}
		int num = Popup.PickOption(flag ? "Rename yourself" : "Rename your companion", null, "", "Sounds/UI/ui_notification", list, HotkeySpread.get(new string[2] { "Menus", "UINav" }), null, null, null, null, null, 1, 60, 0, -1, AllowEscape: true);
		string text2 = "";
		if (num >= 0 && num < list2.Count)
		{
			LargerFolk_GameObject gameObject = list2[num];
			text2 = ((gameObject != null) ? NameMaker.MakeName(gameObject, null, null, null, null, null, null, null, null, null, null, null, null, FailureOkay: false, SpecialFaildown: false, null, null) : Popup.AskString("Enter a new name for " + text + ".", E.Item.Render.DisplayName, "Sounds/UI/ui_notification", null, null, 128, 0, ReturnNullForEscape: true, EscapeNonMarkupFormatting: true, null));
		}
		if (text2.IsNullOrEmpty())
		{
			return;
		}
		Popup.Show("You start calling " + text + " by the name '" + text2 + "'.");
		if (!E.Item.HasProperName)
		{
			if (!flag)
			{
				JournalAPI.AddAccomplishment("You started calling " + E.Item.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " by the name '" + text2 + "'.", HistoricStringExpander.ExpandString("<spice.instancesOf.justice.!random.capitalize>! =name= brought enlightenment to a simple " + E.Item.GetDisplayName(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: true, ColorOnly: false, Visible: true, WithoutTitles: false, ForSort: false, Short: true, BaseOnly: false, WithIndefiniteArticle: false, WithDefiniteArticle: false, null, IndicateHidden: false, Capitalize: false, SecondPerson: false, Reflexive: false, true) + " and bestowed onto " + E.Item.them + " the name " + text2 + "."), "<spice.elements." + XRL.The.Player.GetMythicDomain() + ".weddingConditions.!random.capitalize>, =name= cemented " + XRL.The.Player.GetPronounProvider().PossessiveAdjective + " friendship with " + Factions.GetIfExists(E.Item?.GetPrimaryFaction())?.GetFormattedName() + " by marrying " + text + ", who took the name " + text2 + ".", null, "general", MuralCategory.Treats, MuralWeight.Medium, null, -1L);
			}
			string propertyOrTag = GetPropertyOrTag("TitleIfNamed");
			if (!propertyOrTag.IsNullOrEmpty())
			{
				RequirePart<Titles>().AddTitle(propertyOrTag);
			}
		}
		E.Item.GiveProperName(text2, Force: true, null, SpecialFaildown: false, null, null);
		E.Item.SetIntProperty("Renamed", 1);
		E.RequestInterfaceExit();
		UseEnergy(1000, "Companion Rename", null, null);
	}

	private void ChangeCompanionAbilityUse(LargerFolk_GameObject Subject, ActivatedAbilities Abilities)
	{
		List<ActivatedAbilityEntry> list = new List<ActivatedAbilityEntry>(Abilities.AbilityByGuid.Values);
		list.Sort((ActivatedAbilityEntry a, ActivatedAbilityEntry b) => a.DisplayName.CompareTo(b.DisplayName));
		List<string> list2 = new List<string>(list.Count);
		List<char> list3 = new List<char>(list.Count);
		char c = 'a';
		foreach (ActivatedAbilityEntry item in list)
		{
			string displayName = item.DisplayName;
			displayName = ((item.Toggleable && !item.ActiveToggle && !item.Command.IsNullOrEmpty()) ? ((!item.ToggleState) ? (displayName + " {{y|[toggled off]}}") : (displayName + " {{g|[toggled on]}}")) : ((!item.AIDisable) ? (displayName + " {{Y|[allowed]}}") : (displayName + " {{K|[forbidden]}}")));
			list2.Add(displayName);
			list3.Add((c <= 'z') ? c++ : ' ');
		}
		int num = Popup.PickOption("", "Choose one of " + Grammar.MakePossessive(Subject.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null)) + " abilities to forbid or allow.", "", "Sounds/UI/ui_notification", list2.ToArray(), list3.ToArray(), null, null, null, null, null, 0, 60, 0, -1, AllowEscape: true);
		if (num < 0)
		{
			return;
		}
		ActivatedAbilityEntry activatedAbilityEntry = list[num];
		if (activatedAbilityEntry.Toggleable && !activatedAbilityEntry.ActiveToggle && !activatedAbilityEntry.Command.IsNullOrEmpty())
		{
			bool toggleState = activatedAbilityEntry.ToggleState;
			Subject.FireEvent(Event.New(activatedAbilityEntry.Command));
			if (toggleState != activatedAbilityEntry.ToggleState)
			{
				Popup.Show(Subject.Poss(activatedAbilityEntry.DisplayName + " ability") + " is now toggled " + (activatedAbilityEntry.ToggleState ? "on" : "off") + ".");
			}
			else
			{
				Popup.Show(Subject.Poss(activatedAbilityEntry.DisplayName + " ability") + " cannot be toggled at this time.");
			}
		}
		else
		{
			activatedAbilityEntry.AIDisable = !activatedAbilityEntry.AIDisable;
			Popup.Show(Subject.Poss(activatedAbilityEntry.DisplayName + " ability") + " is now " + (activatedAbilityEntry.AIDisable ? "forbidden" : "allowed") + ".");
		}
	}

	public bool CheckCompanionDirection(LargerFolk_GameObject Subject)
	{
		if (!Subject.IsPlayerLed())
		{
			return false;
		}
		if (!IsAudible(Subject) && !CanMakeTelepathicContactWith(Subject))
		{
			Popup.ShowFail(Subject.Does("can't", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " hear you!");
			return false;
		}
		return true;
	}

	public string GetInventoryCategory(bool AsIfKnown = false)
	{
		GetInventoryCategoryEvent E = GetInventoryCategoryEvent.FromPool(this);
		E.AsIfKnown = AsIfKnown;
		HandleEvent(E);
		string category = E.Category;
		PooledEvent<GetInventoryCategoryEvent>.ResetTo(ref E);
		if (category == null)
		{
			MetricsManager.LogWarning("Unknown inventory category for " + this?.Blueprint);
			return "unknown";
		}
		return category;
	}

	public bool Die(LargerFolk_GameObject Killer = null, string KillerText = null, string Reason = null, string ThirdPersonReason = null, bool Accidental = false, LargerFolk_GameObject Weapon = null, LargerFolk_GameObject Projectile = null, bool Force = false, bool AlwaysUsePopups = false, string Message = null, string DeathVerb = null, string DeathCategory = null)
	{
		if (Dying)
		{
			return true;
		}
		bool result = true;
		try
		{
			Dying = true;
			if (BeforeDieEvent.Check(this, Killer, Weapon, Projectile, Accidental, AlwaysUsePopups, KillerText, Reason, ThirdPersonReason))
			{
				AfterDieEvent.Send(this, Killer, Weapon, Projectile, Accidental, AlwaysUsePopups, KillerText, Reason, ThirdPersonReason);
				StopMoving();
				if (IsFrozen())
				{
					PlayWorldSound("Sounds/Damage/sfx_destroy_ice");
				}
				if (Options.UseParticleVFX && Render != null && Render.Tile != null)
				{
					if (DeathCategory == "lased to death")
					{
						Cell currentCell = GetCurrentCell();
						if (currentCell != null && currentCell.InActiveZone)
						{
							CombatJuice.playPrefabAnimation(currentCell.Location, "Deaths/DeathVFXLased", null, Render.Tile);
						}
					}
					else if (DeathCategory == "immolated")
					{
						Cell currentCell2 = GetCurrentCell();
						if (currentCell2 != null && currentCell2.InActiveZone)
						{
							CombatJuice.playPrefabAnimation(currentCell2.Location, "Deaths/DeathVFXImmolated", null, Render.Tile);
						}
					}
				}
				if (IsPlayer())
				{
					if (XRLCore.Core.Game.Running)
					{
						if (XRL.The.Game?.GetStringGameState("JoppaWorldTutorial") == "Yes")
						{
							TutorialManager.ShowIntermissionPopupAsync("Oh, you died. That's okay. It's a very common occurance in the world of Qud.\n\nBecause the tutorial drops you off in Classic mode with permadeath, your character is wiped when you die.\n\nThe good news is: you get to make a whole new character! Now with a little more knowledge than you had before.", delegate
							{
								TutorialManager.ShowIntermissionPopupAsync("Next time, if you want a more forgiving mode of play, try Roleplay, which let's you checkpoint at settlements.\n\nOr try Wander mode, where most creatures are neutral to you and you gain experience via discovery instead of killing.\n\nOr keep playing Classic if the challenge appeals to you and you'd like to explore a breadth of character types.", delegate
								{
									TutorialManager.ShowIntermissionPopupAsync("Whatever you choose next, feel free to return to the tutorial if you need a refresher.\n\nLive and drink, friend!");
								});
							});
						}
						KilledPlayerEvent.Send(this, Killer, ref Reason, ref ThirdPersonReason, Weapon, Projectile, Accidental, AlwaysUsePopups);
						XRLCore.Core.RenderBase();
						if (CheckpointingSystem.ShowDeathMessage("You died.\n\n" + (Reason ?? XRLCore.Core.Game.DeathReason), XRLCore.Core.Game.DeathCategory))
						{
							return true;
						}
						if (!Force && (!Options.AllowReallydie || Popup.ShowYesNo("DEBUG: Do you really want to die?", "Sounds/UI/ui_notification", AllowEscape: true, DialogResult.No) == DialogResult.Yes))
						{
							if (Reason != null)
							{
								XRLCore.Core.Game.DeathReason = Reason;
							}
							if (DeathCategory != null)
							{
								XRLCore.Core.Game.DeathCategory = DeathCategory;
							}
							XRLCore.Core.Game.Running = false;
							string text = XRLCore.Core.Game.DeathReason;
							if (!text.IsNullOrEmpty())
							{
								text = text[0].ToString().ToLower() + text.Substring(1);
							}
							JournalAPI.AddAccomplishment("On the " + Calendar.GetDay() + " of " + Calendar.GetMonth() + ", " + text.Replace("!", "."), null, null, null, "general", MuralCategory.Generic, MuralWeight.Nil, null, -1L);
							MetricsManager.LogEvent("Death:Reason:" + text.Replace(':', '_'));
							MetricsManager.LogEvent("Death:Category:" + (string.IsNullOrEmpty(DeathCategory) ? "" : DeathCategory).Replace(':', '_'));
							MetricsManager.LogEvent("Death:Turns:" + XRLCore.CurrentTurn);
							MetricsManager.LogEvent("Death:Walltime:" + XRLCore.Core.Game._walltime);
							if (HasStat("Level"))
							{
								MetricsManager.LogEvent("Death:Level:" + Statistics["Level"].BaseValue);
							}
							Achievement.DIE.Unlock();
						}
						else
						{
							Statistics["Hitpoints"].Penalty = 0;
							if (TryGetPart<Stomach>(out var Part))
							{
								Part.Water = RuleSettings.WATER_MAXIMUM;
							}
							result = false;
						}
					}
				}
				else
				{
					string propertyOrTag = GetPropertyOrTag("DeathSounds");
					if (!propertyOrTag.IsNullOrEmpty())
					{
						PlayWorldSound(propertyOrTag.CachedCommaExpansion().GetRandomElement(), 0.5f, 0f, Combat: true);
					}
					if (Message != null)
					{
						if (Message != "")
						{
							EmitMessage(Message);
						}
					}
					else if (!HasTagOrProperty("NoDeathVerb"))
					{
						if (!DeathVerb.IsNullOrEmpty())
						{
							Physics.DidX(DeathVerb, null, "!", null, null, null, this, UseFullNames: false, IndefiniteSubject: false, null, null, DescribeSubjectDirection: false, DescribeSubjectDirectionLate: false, AlwaysVisible: false, FromDialog: false, AlwaysUsePopups);
						}
						else if (HasTagOrProperty("CustomDeathVerb"))
						{
							Physics.DidX(GetTagOrStringProperty("CustomDeathVerb", "die"), null, "!", null, null, null, this, UseFullNames: false, IndefiniteSubject: false, null, null, DescribeSubjectDirection: false, DescribeSubjectDirectionLate: false, AlwaysVisible: false, FromDialog: false, AlwaysUsePopups);
						}
						else if (HasTagOrProperty("CustomDeathMessage"))
						{
							Message = GetTagOrStringProperty("CustomDeathMessage");
							if (!Message.IsNullOrEmpty())
							{
								EmitMessage(GameText.VariableReplace(Message, this, Killer));
							}
						}
						else if (Brain != null && !HasTagOrProperty("DeathMessageAsInanimate"))
						{
							Brain.DidX("die", null, "!", null, null, null, this, UseFullNames: false, IndefiniteSubject: false, null, null, DescribeSubjectDirection: false, DescribeSubjectDirectionLate: false, AlwaysVisible: false, FromDialog: false, AlwaysUsePopups);
						}
						else
						{
							Physics?.DidX("are", "destroyed", "!", null, null, null, this, UseFullNames: false, IndefiniteSubject: false, null, null, DescribeSubjectDirection: false, DescribeSubjectDirectionLate: false, AlwaysVisible: false, FromDialog: false, AlwaysUsePopups);
						}
					}
					if (Killer != null)
					{
						KilledEvent.Send(this, Killer, ref Reason, ref ThirdPersonReason, Weapon, Projectile, Accidental, AlwaysUsePopups);
						AwardXPTo(Killer);
						if (Killer.IsPlayer())
						{
							MetricsManager.LogEvent("PlayerKill:" + Blueprint);
						}
					}
					WeaponUsageTracking.TrackKill(Killer, this, Weapon, Projectile, Accidental);
					EarlyBeforeDeathRemovalEvent.Send(this, Killer, Weapon, Projectile, Accidental, AlwaysUsePopups, KillerText, Reason, ThirdPersonReason);
					BeforeDeathRemovalEvent.Send(this, Killer, Weapon, Projectile, Accidental, AlwaysUsePopups, KillerText, Reason, ThirdPersonReason);
					OnDeathRemovalEvent.Send(this, Killer, Weapon, Projectile, Accidental, AlwaysUsePopups, KillerText, Reason, ThirdPersonReason);
					DeathEvent.Send(this, Killer, Weapon, Projectile, Accidental, AlwaysUsePopups, KillerText, Reason, ThirdPersonReason);
					Destroy(Reason, Silent: false, Obliterate: false, ThirdPersonReason);
					MetricsManager.LogEvent("Kill:" + Blueprint);
				}
			}
			else
			{
				result = false;
			}
		}
		catch (Exception x)
		{
			MetricsManager.LogException("GameObject::Die", x);
		}
		Dying = false;
		return result;
	}

	public int GetComplexity()
	{
		return GetPart<Examiner>()?.Complexity ?? GetTechTier();
	}

	public int GetExamineDifficulty()
	{
		return GetPart<Examiner>()?.Difficulty ?? 0;
	}

	public bool Explode(int Force, LargerFolk_GameObject Owner = null, string BonusDamage = null, float DamageModifier = 1f, bool Neutron = false, bool SuppressDestroy = false, bool Indirect = false, int Phase = 0, List<LargerFolk_GameObject> Hit = null)
	{
		SplitFromStack();
		if (Hit == null)
		{
			Hit = Event.NewGameObjectList();
			Hit.Add(this);
		}
		else if (!Hit.Contains(this))
		{
			Hit.Add(this);
		}
		Cell currentCell = GetCurrentCell();
		if (!SuppressDestroy)
		{
			RemoveFromContext();
		}
		XRL.World.Parts.Physics.ApplyExplosion(Force: Force, UsedCells: null, Hit: Hit, Local: false, Show: true, Owner: Owner, BonusDamage: BonusDamage, DamageModifier: DamageModifier, C: currentCell, Phase: (Phase == 0) ? GetPhase() : Phase, Neutron: Neutron, Indirect: Indirect, WhatExploded: this);
		if (!SuppressDestroy)
		{
			if (IsCreature)
			{
				if (Neutron)
				{
					if (IsPlayer())
					{
						Achievement.CRUSHED_UNDER_SUNS.Unlock();
					}
					Die(Owner, "laws of physics", "You were crushed under the weight of a thousand suns.", Does("were", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: true, SecondPerson: true, null) + " @@crushed under the weight of a thousand suns.");
				}
				else
				{
					Die(Owner, "laws of physics", "You exploded.", It + " @@exploded.");
				}
			}
			else
			{
				Destroy(null, Silent: true);
			}
		}
		return true;
	}

	public int Discharge(Cell TargetCell = null, int Voltage = 3, int Damage = 0, string DamageRange = null, DieRoll DamageRoll = null, LargerFolk_GameObject Owner = null, LargerFolk_GameObject Source = null, LargerFolk_GameObject Target = null, LargerFolk_GameObject DescribeAsFrom = null, LargerFolk_GameObject Skip = null, List<LargerFolk_GameObject> SkipList = null, Cell StartCell = null, int Phase = 0, bool Accidental = false, bool Environmental = false, bool UsePopups = false)
	{
		XRL.World.Parts.Physics physics = Physics;
		if (physics == null)
		{
			return 0;
		}
		Cell c = StartCell ?? GetCurrentCell();
		bool accidental = Accidental;
		bool environmental = Environmental;
		bool usePopups = UsePopups;
		return physics.ApplyDischarge(c, TargetCell, Voltage, Damage, DamageRange, DamageRoll, Target, null, Owner, Source, DescribeAsFrom, Skip, SkipList, null, null, null, Phase, accidental, environmental, null, null, null, usePopups);
	}

	public int GetBaseThrowRange(LargerFolk_GameObject Thrown = null, LargerFolk_GameObject ApparentTarget = null, Cell TargetCell = null, int Distance = 0)
	{
		GetThrowProfileEvent.Process(out var Range, out var _, out var _, out var _, this, Thrown, ApparentTarget, TargetCell, Distance);
		return Range;
	}

	public int GetThrowRangeRandomVariance()
	{
		return XRL.Rules.Stat.Random(RuleSettings.THROW_RANGE_RANDOM_VARIANCE_MIN, RuleSettings.THROW_RANGE_RANDOM_VARIANCE_MAX);
	}

	public int GetThrowDistanceRandomVariance()
	{
		return RuleSettings.THROW_DISTANCE_VARIANCE.RollCached();
	}

	protected bool EquipReplacementThrownWeapon(LargerFolk_GameObject PreviouslyEquipped, BodyPart ThrowPart)
	{
		if (!ReplaceThrownWeaponEvent.Check(this, PreviouslyEquipped, ThrowPart))
		{
			return true;
		}
		Inventory inventory = Inventory;
		if (inventory == null)
		{
			return false;
		}
		string propertyOrTag = GetPropertyOrTag("NoEquip");
		List<string> list = (propertyOrTag.IsNullOrEmpty() ? null : new List<string>(propertyOrTag.CachedCommaExpansion()));
		List<LargerFolk_GameObject> objectsDirect = inventory.GetObjectsDirect();
		LargerFolk_GameObject gameObject = null;
		foreach (LargerFolk_GameObject item in objectsDirect)
		{
			if (item.SameAs(PreviouslyEquipped) && (IsPlayer() || !item.HasPropertyOrTag("NoAIEquip")) && (list == null || !list.Contains(item.Blueprint)) && !item.IsBroken() && !item.IsRusted() && !item.HasTag("HiddenInInventory"))
			{
				gameObject = item;
				break;
			}
		}
		if (LargerFolk_GameObject == null)
		{
			foreach (LargerFolk_GameObject item2 in objectsDirect)
			{
				if (item2.Blueprint == PreviouslyEquipped.Blueprint && (IsPlayer() || !item2.HasPropertyOrTag("NoAIEquip")) && (list == null || !list.Contains(item2.Blueprint)) && !item2.IsBroken() && !item2.IsRusted() && !item2.HasTag("HiddenInInventory"))
				{
					gameObject = item2;
					break;
				}
			}
			if (LargerFolk_GameObject == null && !IsPlayer() && PreviouslyEquipped.HasTag("Grenade"))
			{
				foreach (LargerFolk_GameObject item3 in objectsDirect)
				{
					if (item3.HasTag("Grenade") && (IsPlayer() || !item3.HasPropertyOrTag("NoAIEquip")) && (list == null || !list.Contains(item3.Blueprint)) && !item3.IsBroken() && !item3.IsRusted() && !item3.HasTag("HiddenInInventory"))
					{
						gameObject = item3;
						break;
					}
				}
			}
		}
		if (gameObject != null)
		{
			return FireEvent(Event.New("CommandEquipObject", "Object", gameObject, "BodyPart", ThrowPart));
		}
		return false;
	}

	public bool PerformThrow(LargerFolk_GameObject Weapon, Cell TargetCell, LargerFolk_GameObject ApparentTarget = null, MissilePath MPath = null, int Phase = 0, int? RangeVariance = null, int? DistanceVariance = null, int? EnergyCost = null)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		BodyPart bodyPart = Weapon.EquippedOn();
		if (bodyPart == null)
		{
			return false;
		}
		if (!FireEvent("BeginAttack"))
		{
			return false;
		}
		int num = DistanceTo(TargetCell) + 1;
		if (ApparentTarget == null)
		{
			ApparentTarget = TargetCell.GetCombatTarget(this, IgnoreFlight: true, IgnoreAttackable: false, IgnorePhase: false, 5, null, null, null, null, null, AllowInanimate: true, InanimateSolidOnly: true);
		}
		if (ApparentTarget == this && ApparentTarget.IsPlayer() && Popup.ShowYesNoCancel("Are you sure you want to target " + itself + "?") != 0)
		{
			return false;
		}
		if (Phase == 0)
		{
			Phase = XRL.World.Capabilities.Phase.getWeaponPhase(this, GetActivationPhaseEvent.GetFor(Weapon));
		}
		Event @event = Event.New("BeforeThrown");
		@event.SetParameter("TargetCell", TargetCell);
		@event.SetParameter("Thrower", this);
		@event.SetParameter("ApparentTarget", ApparentTarget);
		@event.SetParameter("Phase", Phase);
		if (!Weapon.FireEvent(@event))
		{
			return false;
		}
		IThrownWeaponFlexPhaseProvider @for = GetThrownWeaponFlexPhaseProviderEvent.GetFor(Weapon, this);
		bodyPart.Unequip();
		EquipReplacementThrownWeapon(Weapon, bodyPart);
		MissileWeapon.SetupProjectile(Weapon, this);
		if (MPath == null)
		{
			if (ThrowPathInUse)
			{
				MPath = new MissilePath();
			}
			else
			{
				MPath = ThrowPath;
				ThrowPathInUse = true;
			}
			MissileWeapon.CalculateMissilePath(MPath, currentCell.ParentZone, currentCell.X, currentCell.Y, TargetCell.X, TargetCell.Y, IncludeStart: false, IncludeCover: false, MapCalculated: false, this);
		}
		Weapon.PlayCombatSoundTag("ThrownSound", "Sounds/Throw/sfx_throwing_generic_throw");
		@for?.ThrownWeaponFlexPhaseStart(Weapon);
		try
		{
			if (IsPlayer() && Weapon != null)
			{
				Weapon.RemoveIntProperty("AutoexploreActionAutoget");
			}
		}
		catch (Exception x)
		{
			MetricsManager.LogException("Throw::ClearFlags", x);
		}
		bool showJuice;
		Location2D juiceStart;
		Location2D juiceEnd;
		string juiceTile;
		string juiceColor;
		string juiceDetail;
		try
		{
			int num2 = XRL.Rules.Stat.RollPenetratingSuccesses("1d" + Stat("Agility"), 3);
			int num3 = 0;
			bool flag = false;
			bool flag2 = false;
			int num4 = currentCell.X - TargetCell.X;
			int num5 = currentCell.Y - TargetCell.Y;
			int num6 = (int)Math.Sqrt(num4 * num4 + num5 * num5);
			GetThrowProfileEvent.Process(out var Range, out var Strength, out var AimVariance, out var Telekinetic, this, Weapon, ApparentTarget, TargetCell, num6);
			Range += RangeVariance ?? GetThrowRangeRandomVariance();
			if (num <= Range && (HasIntProperty("CloseThrowRangeAccuracyBonus") || HasIntProperty("CloseThrowRangeAccuracySkillBonus")))
			{
				float num7 = (100f - Math.Max((float)GetIntProperty("CloseThrowRangeAccuracyBonus"), (float)GetIntProperty("CloseThrowRangeAccuracySkillBonus"))) / 100f;
				AimVariance = (int)((float)AimVariance * num7);
			}
			else
			{
				num += DistanceVariance ?? GetThrowDistanceRandomVariance();
				if (num < 2 && Range >= 2)
				{
					num = 2;
				}
			}
			List<Point> list = MissileWeapon.CalculateBulletTrajectory(MPath, Weapon, Weapon, this, currentCell.ParentZone, AimVariance.ToString());
			list.Insert(0, currentCell.Point);
			ScreenBuffer scrapBuffer = ScreenBuffer.GetScrapBuffer2();
			Zone parentZone = currentCell.ParentZone;
			Cell cell = null;
			List<LargerFolk_GameObject> objectsThatWantEvent = TargetCell.ParentZone.GetObjectsThatWantEvent(PooledEvent<ProjectileMovingEvent>.ID, ProjectileMovingEvent.CascadeLevel);
			ProjectileMovingEvent projectileMovingEvent = null;
			if (objectsThatWantEvent.Count > 0)
			{
				projectileMovingEvent = PooledEvent<ProjectileMovingEvent>.FromPool();
				projectileMovingEvent.Attacker = this;
				projectileMovingEvent.Projectile = Weapon;
				projectileMovingEvent.ScreenBuffer = scrapBuffer;
				projectileMovingEvent.TargetCell = TargetCell;
				projectileMovingEvent.ApparentTarget = ApparentTarget;
				projectileMovingEvent.Path = list;
				projectileMovingEvent.Throw = true;
			}
			if (Telekinetic)
			{
				TelekinesisBlip();
			}
			Cell cell2 = currentCell;
			showJuice = false;
			juiceStart = CurrentCell.Location;
			juiceEnd = Location2D.Invalid;
			RenderEvent renderEvent = Weapon.RenderForUI();
			juiceTile = renderEvent.Tile;
			juiceColor = renderEvent.GetForegroundColorChar().ToString();
			juiceDetail = renderEvent.getDetailColor().ToString();
			int i = 0;
			for (int count = list.Count; i < count; i++)
			{
				int num8 = currentCell.X - list[i].X;
				int num9 = currentCell.Y - list[i].Y;
				int num10 = (int)Math.Sqrt(num8 * num8 + num9 * num9);
				if (num10 >= Range || num10 >= num)
				{
					break;
				}
				cell = parentZone.GetCell(list[i].X, list[i].Y);
				if (cell == null)
				{
					break;
				}
				if (cell.IsVisible())
				{
					showJuice = true;
				}
				juiceEnd = cell.Location;
				cell.WakeCreaturesInArea();
				if (Telekinetic)
				{
					cell.TelekinesisBlip();
				}
				LargerFolk_GameObject gameObject = null;
				if (cell != currentCell)
				{
					gameObject = cell.GetCombatTarget(this, IgnoreFlight: true, IgnoreAttackable: false, IgnorePhase: false, Phase, null, null, null, null, null, AllowInanimate: true, InanimateSolidOnly: true, (LargerFolk_GameObject o) => o != this);
				}
				if ((num2 <= 0 || LargerFolk_GameObject == null || LargerFolk_GameObject == this) && count > 1 && i != count - 1)
				{
					Cell cell3 = parentZone.GetCell(list[i + 1].X, list[i + 1].Y);
					if (cell3 == null)
					{
						Weapon.PlayCombatSoundTag("ImpactSound");
						flag2 = true;
						break;
					}
					GameObject projectile = Weapon;
					GameObject apparentTarget = ApparentTarget;
					cell3.FindSolidObjectForMissile(this, null, projectile, out var SolidObject, out var IsSolid, out var _, out var RecheckHit, out var RecheckPhase, null, null, apparentTarget);
					if (SolidObject != null)
					{
						gameObject = SolidObject;
						flag = true;
					}
					else if (IsSolid)
					{
						Weapon.PlayCombatSoundTag("ImpactSound");
						flag2 = true;
						break;
					}
					if (RecheckPhase)
					{
						Phase = Weapon.GetPhase();
					}
					if (RecheckHit)
					{
						gameObject = cell.GetCombatTarget(this, IgnoreFlight: true, IgnoreAttackable: false, IgnorePhase: false, Phase, null, null, null, null, null, AllowInanimate: true, InanimateSolidOnly: true, (LargerFolk_GameObject o) => o != this);
					}
				}
				bool Done = false;
				bool flag3 = false;
				if (@for != null && cell2 != cell)
				{
					if (!@for.ThrownWeaponFlexPhaseTraversal(this, gameObject, ApparentTarget, Weapon, Phase, cell2, cell, out var RecheckHit2, out var RecheckPhase2))
					{
						Done = true;
						break;
					}
					if (RecheckPhase2)
					{
						Phase = Weapon.GetPhase();
					}
					if (RecheckHit2)
					{
						gameObject = cell.GetCombatTarget(this, IgnoreFlight: true, IgnoreAttackable: false, IgnorePhase: false, Phase, null, null, null, null, null, AllowInanimate: true, InanimateSolidOnly: true, (LargerFolk_GameObject o) => o != this);
					}
				}
				if (!MissileTraversingCellEvent.Check(Weapon, cell, cell2.GetDirectionFromCell(cell), this, Thrown: true))
				{
					Done = true;
					break;
				}
				if (!Validate(ref Weapon))
				{
					return true;
				}
				if (projectileMovingEvent != null)
				{
					projectileMovingEvent.Defender = gameObject;
					projectileMovingEvent.Cell = cell;
					projectileMovingEvent.PathIndex = i;
					foreach (LargerFolk_GameObject item in objectsThatWantEvent)
					{
						if (!item.HandleEvent(projectileMovingEvent))
						{
							Done = true;
							break;
						}
					}
					if (projectileMovingEvent.HitOverride != null)
					{
						gameObject = projectileMovingEvent.HitOverride;
						projectileMovingEvent.HitOverride = null;
					}
					if (projectileMovingEvent.ActivateShowUninvolved)
					{
						flag3 = true;
					}
					if (projectileMovingEvent.RecheckPhase)
					{
						Phase = Weapon.GetPhase();
						projectileMovingEvent.RecheckPhase = false;
					}
				}
				if (!Validate(Weapon))
				{
					ExecuteJuice();
					return true;
				}
				if (Done)
				{
					break;
				}
				if ((flag || num2 > 0) && gameObject != null && gameObject != this)
				{
					bool PenetrateCreatures = false;
					bool PenetrateWalls = false;
					if (DefenderMissileHitEvent.Check(null, this, gameObject, this, Weapon, null, null, ApparentTarget, null, FireType.Normal, 0, 20, 20, gameObject.IsPlayer(), null, ref Done, ref PenetrateCreatures, ref PenetrateWalls) || flag)
					{
						Weapon?.PlayCombatSoundTag("ImpactSound");
						gameObject?.PlayCombatSoundTag("ImpactSound");
						flag2 = true;
						Weapon?.Physics?.DidXToY("hit", gameObject, null, "!", null, null, null, null, UseFullNames: false, IndefiniteSubject: false, IndefiniteObject: false, IndefiniteObjectForOthers: false, PossessiveObject: false, this, null, null, DescribeSubjectDirection: false, DescribeSubjectDirectionLate: false, AlwaysVisible: false, FromDialog: false, UsePopup: false, gameObject);
						bool flag4 = gameObject != ApparentTarget;
						bool isCreature = gameObject.IsCreature;
						string blueprint = gameObject.Blueprint;
						WeaponUsageTracking.TrackThrownWeaponHit(this, Weapon, isCreature, blueprint, flag4);
						num2 -= num6;
						ThrownWeapon part = Weapon.GetPart<ThrownWeapon>();
						string Damage = part?.Damage ?? "1d2";
						int Penetration = part?.Penetration ?? 2;
						int PenetrationBonus = part?.PenetrationBonus ?? 0;
						int PenetrationModifier = Math.Max(XRL.Rules.Stat.GetScoreModifier(Strength), 1);
						bool Vorpal = false;
						GetThrownWeaponPerformanceEvent.GetFor(Weapon, ref Damage, ref Penetration, ref PenetrationBonus, ref PenetrationModifier, ref Vorpal, Prospective: false, this, gameObject);
						int combatAV = Stats.GetCombatAV(gameObject);
						if (Vorpal)
						{
							PenetrationModifier = combatAV;
							Penetration = combatAV;
						}
						if (PenetrationBonus != 0)
						{
							Penetration += PenetrationBonus;
							PenetrationModifier += PenetrationBonus;
						}
						int num11 = XRL.Rules.Stat.RollDamagePenetrations(combatAV, PenetrationModifier, Penetration);
						DieRoll cachedDieRoll = Damage.GetCachedDieRoll();
						for (int j = 0; j < num11; j++)
						{
							num3 += cachedDieRoll.Resolve();
						}
						if (num3 < 0)
						{
							num3 = 0;
						}
						Damage damage = new Damage(num3);
						damage.AddAttributes(part?.Attributes ?? "Cudgel");
						damage.AddAttribute("Thrown");
						if (Vorpal)
						{
							damage.AddAttribute("Vorpal");
						}
						if (flag4)
						{
							damage.AddAttribute("Accidental");
						}
						Event event2 = Event.New("WeaponThrowHit");
						event2.SetParameter("Damage", damage);
						event2.SetParameter("Penetrations", num11);
						event2.SetParameter("Owner", this);
						event2.SetParameter("Attacker", this);
						event2.SetParameter("Defender", gameObject);
						event2.SetParameter("Weapon", Weapon);
						event2.SetParameter("Projectile", Weapon);
						event2.SetParameter("Phase", Phase);
						event2.SetParameter("ApparentTarget", ApparentTarget);
						if (!Weapon.FireEvent(event2))
						{
							break;
						}
						num11 = event2.GetIntParameter("Penetrations");
						Event event3 = Event.New("TakeDamage");
						event3.SetParameter("Damage", damage);
						event3.SetParameter("Penetrations", num11);
						event3.SetParameter("Owner", this);
						event3.SetParameter("Attacker", this);
						event3.SetParameter("Defender", gameObject);
						event3.SetParameter("Weapon", Weapon);
						event3.SetParameter("Phase", Phase);
						event3.SetParameter("Projectile", Weapon);
						event3.SetFlag("ShowForInanimate", State: true);
						if (flag3)
						{
							event3.SetFlag("ShowUninvolved", State: true);
						}
						if (gameObject.FireEvent(event3))
						{
							num11 = event3.GetIntParameter("Penetrations");
							WeaponUsageTracking.TrackThrownWeaponDamage(this, Weapon, isCreature, blueprint, flag4, damage);
							if (damage.Amount > 0 && Options.ShowMonsterHPHearts)
							{
								gameObject.ParticleBlip(gameObject.GetHPColor() + "\u0003", 10, 0L);
							}
							if (damage.Amount > 0 || !damage.SuppressionMessageDone)
							{
								damage.PlaySound(gameObject);
								if (IsPlayer())
								{
									MessageQueue.AddPlayerMessage("You hit " + ((LargerFolk_GameObject == this) ? itself : gameObject.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null)) + " with " + Weapon.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " (x" + num11 + ") for " + damage.Amount + " damage!", XRL.Rules.Stat.GetResultColor(num11));
								}
								else if (gameObject.IsPlayer())
								{
									MessageQueue.AddPlayerMessage(Does("hit", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " with " + Weapon.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " (x" + num11 + ") for " + damage.Amount + " damage!", ColorCoding.ConsequentialColor(null, gameObject));
								}
								else if (gameObject.IsVisible())
								{
									MessageQueue.AddPlayerMessage(Does("hit", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " " + ((LargerFolk_GameObject == this) ? itself : gameObject.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null)) + " with " + Weapon.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " (x" + num11 + ") for " + damage.Amount + " damage!", ColorCoding.ConsequentialColor(null, gameObject));
								}
							}
						}
						Event event4 = new Event("ThrownProjectileHit");
						event4.SetParameter("Damage", damage);
						event4.SetParameter("Penetrations", num11);
						event4.SetParameter("Owner", this);
						event4.SetParameter("Attacker", this);
						event4.SetParameter("Defender", gameObject);
						event4.SetParameter("Weapon", Weapon);
						event4.SetParameter("Projectile", Weapon);
						event4.SetParameter("Phase", Phase);
						event4.SetParameter("ApparentTarget", ApparentTarget);
						Weapon.FireEvent(event4);
						if (IsPlayer())
						{
							Sidebar.CurrentTarget = gameObject;
						}
						break;
					}
				}
				XRLCore.Core.RenderBaseToBuffer(scrapBuffer);
				if (!Options.UseParticleVFX && parentZone.IsActive() && cell.IsVisible())
				{
					scrapBuffer.Goto(cell);
					RenderEvent renderEvent2 = Weapon.RenderForUI();
					if (!renderEvent2.Tile.IsNullOrEmpty())
					{
						XRL.The.ParticleManager.AddTile(renderEvent2.Tile, renderEvent2.ColorString, renderEvent2.DetailColor, cell.X, cell.Y, 0f, 0f, 2, 0f, 0f, renderEvent2.HFlip, renderEvent2.VFlip, 0L);
						XRL.The.ParticleManager.Frame();
						XRL.The.ParticleManager.Render(scrapBuffer);
					}
					else
					{
						scrapBuffer.Write(renderEvent2.ColorString + renderEvent2.RenderString);
					}
					XRLCore._Console.DrawBuffer(scrapBuffer);
					Thread.Sleep(25);
				}
				cell2 = cell;
			}
			ExecuteJuice();
			if (!flag2)
			{
				Weapon.PlayCombatSoundTag("ImpactSound");
				(from o in cell?.GetObjectsWithTagOrProperty("ImpactSound")
					where o != Weapon
					select o).FirstOrDefault()?.PlayCombatSoundTag("ImpactSound");
				flag2 = true;
			}
			int num12 = EnergyCost ?? 1000;
			if (num12 > 0)
			{
				UseEnergy(num12, "Missile Combat Throw", null, null);
			}
			if (Validate(ref Weapon))
			{
				(cell ?? TargetCell).AddObject(Weapon, Forced: false, System: false, IgnoreGravity: false, NoStack: false, Silent: false, Repaint: true, FlushTransient: true, null, "Thrown");
				Weapon.WasThrown(this, ApparentTarget);
				MissileWeapon.CleanupProjectile(Weapon);
			}
			return true;
		}
		finally
		{
			@for?.ThrownWeaponFlexPhaseEnd(Weapon);
			if (ThrowPathInUse && MPath == ThrowPath)
			{
				ThrowPath.Reset();
				ThrowPathInUse = false;
			}
		}
		void ExecuteJuice()
		{
			if (Options.UseParticleVFX && showJuice && juiceEnd != Location2D.Invalid && !juiceTile.IsNullOrEmpty() && !juiceColor.IsNullOrEmpty() && !juiceDetail.IsNullOrEmpty() && InActiveZone())
			{
				XRL.The.Core.RenderBase();
				CombatJuice.BlockUntilFinished((CombatJuiceEntry)CombatJuice.Throw(this, Weapon, juiceStart, juiceEnd, Async: true), (IList<LargerFolk_GameObject>)null, 1000, Interruptible: true);
			}
		}
	}

	public bool LimitToAquatic()
	{
		return Brain?.LimitToAquatic() ?? false;
	}

	public bool AutoMove(string Direction)
	{
		if (!IsPlayer() || !Options.InterruptHeldMovement)
		{
			return Move(Direction, Forced: false, System: false, IgnoreGravity: false, NoStack: false, AllowDashing: true, DoConfirmations: true, null, null, NearestAvailable: false, null, null, null);
		}
		AutoAct.Setting = "m";
		if (AutoAct.CheckHostileInterrupt(logSpot: true))
		{
			AutoAct.Setting = "";
			return false;
		}
		Cell cellFromDirection = CurrentCell.GetCellFromDirection(Direction);
		if ((cellFromDirection != null || Options.GetOption("OptionInterruptHeldMovementOnZoneTransition") == "Yes") && InterruptAutowalkEvent.Check(this, cellFromDirection, out var Because, out var IndicateObject, out var IndicateCell, out var AsThreat))
		{
			if (Because == null && Validate(ref IndicateObject))
			{
				Because = "of " + IndicateObject.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " " + DescribeDirectionToward(IndicateObject);
			}
			string because = Because;
			GameObject indicateObject = IndicateObject;
			AutoAct.Interrupt(because, IndicateCell, indicateObject, AsThreat);
			AutoAct.Setting = "";
			return false;
		}
		if (AutomoveInterruptTurn == XRL.The.Game.Turns || AutomoveInterruptTurn == XRL.The.Game.Turns - 1)
		{
			Because = AutomoveInterruptBecause;
			AutoAct.Setting = "";
			return false;
		}
		AutoAct.Setting = "";
		return Move(Direction, Forced: false, System: false, IgnoreGravity: false, NoStack: false, AllowDashing: true, DoConfirmations: true, null, null, NearestAvailable: false, null, null, null);
	}

	public bool Move(string Direction, out LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, bool AllowDashing = true, bool DoConfirmations = true, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, bool NearestAvailable = false, int? EnergyCost = null, string Type = null, int? MoveSpeed = null, bool Peaceful = false, bool IgnoreMobility = false, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, int CallDepth = 0)
	{
		Blocking = null;
		CallDepth++;
		if (CallDepth > 80)
		{
			return false;
		}
		bool flag = false;
		int num = 0;
		int num2 = 20;
		if (Actor == null)
		{
			Actor = Dragging ?? this;
		}
		int num3 = EnergyCost ?? ((!Forced && (Actor == null || Actor == this)) ? 1000 : 0);
		int num4 = num3;
		int value = MoveSpeed ?? Stat("MoveSpeed");
		if (CurrentCell == null)
		{
			return false;
		}
		Zone parentZone = CurrentCell.ParentZone;
		if (parentZone == null)
		{
			return false;
		}
		bool flag2 = parentZone.IsWorldMap();
		if (Actor != null && Actor != this && !CanBeInvoluntarilyMoved())
		{
			return false;
		}
		if (AllowDashing && !Forced && HasEffect<Dashing>() && !flag2)
		{
			num3 = 0;
			flag = true;
			num2 = 20;
			PlayWorldSound("Sounds/StatusEffects/sfx_ability_mutation_flamingRay_attack");
		}
		while (true)
		{
			Cell cell = CurrentCell.GetCellFromDirection(Direction, BuiltOnly: false);
			if (cell != null && NearestAvailable && !cell.IsEmptyOfSolidFor(this, IncludeCombatObjects: false))
			{
				List<Cell> list = cell.GetLocalAdjacentCells(1).ShuffleInPlace();
				for (int i = 0; i < list.Count; i++)
				{
					Cell cell2 = list[i];
					if (cell2.IsAdjacentTo(CurrentCell) && cell2.IsEmptyOfSolidFor(this, IncludeCombatObjects: false))
					{
						cell = cell2;
						break;
					}
				}
			}
			GameObject gameObject;
			bool flag3;
			bool Waterbound;
			bool WallWalker;
			GameObject gameObject2;
			if (cell != null)
			{
				if (IsPlayer() && !TutorialManager.BeforePlayerEnterCell(cell))
				{
					return false;
				}
				gameObject = null;
				flag3 = !flag2 && (IsPlayer() || IsCombatObject() || ConsiderSolid());
				if (flag3)
				{
					gameObject = cell.GetCombatTarget(this, IgnoreFlight: false, IgnoreAttackable: true, IgnorePhase: false, 0, null, null, null, Ignore, null, AllowInanimate: false);
				}
				gameObject2 = (Peaceful ? null : gameObject);
				bool Immobile = true;
				Waterbound = false;
				WallWalker = false;
				Brain?.CheckMobility(out Immobile, out Waterbound, out WallWalker);
				if (!Forced && gameObject2 == null && Immobile && !IgnoreMobility)
				{
					Fail("You are not a mobile creature.");
				}
				else
				{
					if (Forced)
					{
						goto IL_023b;
					}
					if (CheckFrozen())
					{
						if (!HasEffect<Paralyzed>())
						{
							goto IL_023b;
						}
						Fail("You are paralyzed!");
					}
				}
			}
			else if (IsPlayer())
			{
				MessageQueue.AddPlayerMessage("You cannot go that way.");
			}
			goto IL_0dcc;
			IL_0dcc:
			AfterMoveFailedEvent.Send(this, CurrentCell, cell, Forced, System, IgnoreGravity, NoStack, null, Type, null, null, null, Ignore);
			if (flag)
			{
				UseEnergy(1000, "Movement", null, null);
			}
			return false;
			IL_0c06:
			if (ProcessObjectLeavingCell(CurrentCell, ref Blocking, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore) && ProcessEnteringCell(cell, ref Blocking, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore) && ProcessObjectEnteringCell(cell, ref Blocking, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore) && (CurrentCell.ParentZone == cell.ParentZone || ProcessEnteringZone(CurrentCell, cell, ref Blocking, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore)) && ProcessLeaveCell(CurrentCell, ref Blocking, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore))
			{
				Cell currentCell = CurrentCell;
				if (CurrentCell != null)
				{
					CurrentCell.RemoveObject(this, Forced, System, IgnoreGravity, Silent: false, NoStack, Repaint: true, FlushTransient: true, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
				}
				cell.AddObject(this, Forced, System, IgnoreGravity, NoStack, Silent: false, Repaint: true, FlushTransient: true, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
				num++;
				if (IsPlayer())
				{
					XRL.The.Core.MoveConfirmDirection = null;
				}
				if (num3 > 0)
				{
					UseEnergy(num3, "Movement", null, value);
				}
				Event e = Event.New("AfterMoved", "FromCell", currentCell);
				ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
				FireEvent(e);
				if (parentZone != cell.ParentZone)
				{
					if (IsPlayer())
					{
						XRL.The.ZoneManager.SetActiveZone(cell.ParentZone);
					}
					XRL.The.ZoneManager.ProcessGoToPartyLeader();
				}
				if (flag)
				{
					num2--;
					Smoke();
					int num5 = XRL.Rules.Stat.Random(0, 10);
					if (num5 == 0)
					{
						ParticleBlip("&R*", 10, 0L);
					}
					if (num5 == 1)
					{
						ParticleBlip("&Y*", 10, 0L);
					}
					if (num5 == 2)
					{
						ParticleBlip("&r*", 10, 0L);
					}
					if (num5 == 3)
					{
						ParticleBlip("&W*", 10, 0L);
					}
					if (num5 == 4)
					{
						ParticleBlip("&Rú", 10, 0L);
					}
					if (num5 == 5)
					{
						ParticleBlip("&Yú", 10, 0L);
					}
					if (num5 == 6)
					{
						ParticleBlip("&rú", 10, 0L);
					}
					if (num5 == 7)
					{
						ParticleBlip("&Wú", 10, 0L);
					}
					if (num5 == 8)
					{
						ParticleBlip("&Rù", 10, 0L);
					}
					if (num5 == 9)
					{
						ParticleBlip("&Yù", 10, 0L);
					}
					if (num5 == 10)
					{
						ParticleBlip("&rù", 10, 0L);
					}
				}
				if (flag && IsPlayer())
				{
					ScreenBuffer scrapBuffer = ScreenBuffer.GetScrapBuffer1();
					TextConsole textConsole = Popup._TextConsole;
					XRLCore.Core.RenderBaseToBuffer(scrapBuffer);
					textConsole.DrawBuffer(scrapBuffer);
					XRLCore.ParticleManager.Frame();
					XRLCore.Core.Game.ZoneManager.Tick(AllowFreeze: true);
				}
				if (!flag || num2 <= 0)
				{
					break;
				}
				continue;
			}
			goto IL_0dcc;
			IL_08bb:
			GameObject gameObject3;
			if (Peaceful)
			{
				Blocking = gameObject3;
			}
			else if (flag)
			{
				int num6 = Math.Min(num / 3, 20);
				int hitModifier = Math.Min(num / 3, 20);
				int penModifier = num6;
				int penCapModifier = num6;
				Combat.AttackObject(this, gameObject3, null, hitModifier, penModifier, penCapModifier);
			}
			else
			{
				Combat.AttackObject(this, gameObject3);
			}
			goto IL_0dcc;
			IL_0757:
			int j = 0;
			for (int count = cell.Objects.Count; j < count; j++)
			{
				if (cell.Objects[j] != null && cell.Objects[j] != Ignore && cell.Objects[j].HasTagOrStringProperty("TerrainMovementEnergyCostMultiplier"))
				{
					try
					{
						float num7 = float.Parse(cell.Objects[j].GetTagOrStringProperty("TerrainMovementEnergyCostMultiplier", "1"));
						num3 += (int)((float)num4 * num7);
					}
					catch (Exception)
					{
						MetricsManager.LogError("Object " + cell.Objects[j].Blueprint + " had invalid TerrainMovementEnergyCostMultiplier.");
					}
				}
			}
			if (ProcessBeginMove(out var ReobtainCombatants, cell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap))
			{
				if (ReobtainCombatants && flag3)
				{
					gameObject = cell.GetCombatTarget(this, IgnoreFlight: false, IgnoreAttackable: true, IgnorePhase: false, 0, null, null, null, Ignore, null, AllowInanimate: false);
					gameObject2 = (Peaceful ? null : gameObject);
				}
				if (!Forced && HasPart<Digging>())
				{
					int num8 = 0;
					int count2 = cell.Objects.Count;
					while (num8 < count2)
					{
						gameObject3 = cell.Objects[num8];
						if (!gameObject3.IsWall() || !Options.DigOnMove || !gameObject3.ConsiderSolidFor(this) || !OkayToDamageEvent.Check(gameObject3, this))
						{
							num8++;
							continue;
						}
						goto IL_08bb;
					}
				}
				if (LargerFolk_GameObject == null)
				{
					goto IL_0c06;
				}
				bool flag4 = gameObject.IsHostileTowards(this);
				if (!Forced && ForceSwap == null && flag4)
				{
					if (IsPlayer())
					{
						if (AutoAct.IsActive())
						{
							AutoAct.Interrupt(gameObject.HasProperName ? (gameObject.does("are", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " in your way") : ("there" + gameObject.Is + " " + gameObject.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " in your way"), null, gameObject, IsThreat: true);
						}
						else if (!Peaceful)
						{
							if (flag)
							{
								int num9 = num / 3 * 2;
								int hitModifier2 = num / 3 * 2;
								GameObject defender = gameObject;
								int penCapModifier = num9;
								int penModifier = num9;
								Combat.AttackObject(this, defender, null, hitModifier2, penCapModifier, penModifier);
							}
							else
							{
								Combat.AttackObject(this, gameObject);
							}
						}
					}
				}
				else if (flag4 && ForceSwap != gameObject)
				{
					if (IsPlayer())
					{
						MessageQueue.AddPlayerMessage("You are stopped short by " + gameObject.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + ".");
					}
				}
				else if (!gameObject.IsPlayer() && CurrentCell != null)
				{
					if (ForceSwap != LargerFolk_GameObject && !gameObject.CanBePositionSwapped(this))
					{
						if (IsPlayer())
						{
							MessageQueue.AddPlayerMessage(gameObject.Does("cannot", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " be moved.");
						}
					}
					else if (ForceSwap != LargerFolk_GameObject && gameObject.HasEffect<Stuck>())
					{
						if (IsPlayer())
						{
							MessageQueue.AddPlayerMessage(gameObject.Does("are", int.MaxValue, null, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, WithIndefiniteArticle: false, null, IndicateHidden: false, Pronoun: false, SecondPerson: true, null) + " stuck.");
						}
					}
					else
					{
						GameObject gameObject4 = gameObject;
						string directionFromCell = cell.GetDirectionFromCell(CurrentCell);
						int? energyCost = 0;
						int penModifier = CallDepth + 1;
						if (gameObject4.Move(directionFromCell, Forced: true, System: false, IgnoreGravity: false, NoStack: false, AllowDashing: false, DoConfirmations: false, null, null, NearestAvailable: false, energyCost, null, null, Peaceful: true, IgnoreMobility: false, null, this, penModifier))
						{
							goto IL_0c06;
						}
						if (IsPlayer())
						{
							MessageQueue.AddPlayerMessage("You can't budge " + gameObject.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + ".");
						}
					}
				}
			}
			goto IL_0dcc;
			IL_023b:
			if (Forced || gameObject2 != null)
			{
				goto IL_0757;
			}
			if ((!IsPlayer() || !XRLCore.Core.IDKFA) && IsOverburdened())
			{
				StopMoving();
				Fail("You are carrying too much to move!");
			}
			else
			{
				if (!WallWalker || cell.HasWalkableWallFor(this))
				{
					if (Waterbound)
					{
						if (!cell.HasAquaticSupportFor(this))
						{
							Fail("You are an aquatic creature and may not move onto land!");
							goto IL_0dcc;
						}
					}
					else if (DoConfirmations && IsPlayer() && !IsConfused)
					{
						if (AutoAct.IsActive())
						{
							GameObject gameObject5 = (Options.ConfirmDangerousLiquid ? cell.GetDangerousOpenLiquidVolume() : null);
							if (gameObject5 != null && gameObject5 != Ignore && gameObject5.PhaseAndFlightMatches(this) && Popup.WarnYesNo("Your path would take you into " + gameObject5.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + ". Are you sure you want to do this?", "Sounds/UI/ui_notification_warning", AllowEscape: true, DialogResult.No) != 0)
							{
								AutoAct.Interrupt("you chose not to enter " + gameObject5.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null), null, gameObject5, IsThreat: true);
								return false;
							}
						}
						else
						{
							GameObject gameObject6 = (Options.ConfirmSwimming ? cell.GetSwimmingDepthLiquid() : null);
							if (gameObject6 != null && gameObject6 != Ignore && !HasEffect<Swimming>() && !cell.HasBridge() && gameObject6.PhaseAndFlightMatches(this))
							{
								if (XRL.The.Core.MoveConfirmDirection != Direction)
								{
									bool flag5 = gameObject6.IsDangerousOpenLiquidVolume();
									char color = (flag5 ? 'R' : 'W');
									string text = "There" + gameObject6.Is + " " + (flag5 ? ("a dangerous-looking " + gameObject6.ShortDisplayName) : gameObject6.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null)) + " that way.";
									if (!(Direction == "U") && !(Direction == "D"))
									{
										MessageQueue.AddPlayerMessage(text + " Move " + Directions.GetExpandedDirection(Direction) + " again to enter " + gameObject6.them + " and start swimming.", color);
										XRL.The.Core.MoveConfirmDirection = Direction;
										return false;
									}
									if (Popup.ShowYesNo(text + " Do you want to go " + Directions.GetIndicativeDirection(Direction) + " and start swimming?", "Sounds/UI/ui_notification", AllowEscape: true, DialogResult.No) != 0)
									{
										return false;
									}
								}
							}
							else if ((gameObject6 = (Options.ConfirmDangerousLiquid ? cell.GetDangerousOpenLiquidVolume() : null)) != null && gameObject6 != Ignore && gameObject6.PhaseAndFlightMatches(this))
							{
								if (XRL.The.Core.MoveConfirmDirection != Direction)
								{
									if (!(Direction == "U") && !(Direction == "D"))
									{
										MessageQueue.AddPlayerMessage("Are you sure you want to move into " + gameObject6.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + "? Move " + Directions.GetExpandedDirection(Direction) + " again to confirm.", 'R');
										XRL.The.Core.MoveConfirmDirection = Direction;
										return false;
									}
									if (Popup.WarnYesNo("There" + gameObject6.Is + " a dangerous-looking " + gameObject6.ShortDisplayName + " that way. Are you sure you want to move into " + gameObject6.them + "?", "Sounds/UI/ui_notification_warning", AllowEscape: true, DialogResult.No) != 0)
									{
										return false;
									}
								}
							}
							else if (cell.ParentZone.HasZoneProperty("ConfirmPullDown"))
							{
								gameObject6 = cell.GetFirstObjectWithPropertyOrTag("Stairs");
								if (gameObject6 != null && gameObject6 != Ignore)
								{
									StairsDown part = gameObject6.GetPart<StairsDown>();
									if (part != null && part.PullDown && XRL.The.Core.MoveConfirmDirection != Direction && !part.IsLongFall() && part.IsValidForPullDown(this))
									{
										if (!(Direction == "U") && !(Direction == "D"))
										{
											MessageQueue.AddPlayerMessage("Are you sure you want to drop down a level? Move " + Directions.GetExpandedDirection(Direction) + " again to confirm.", 'R');
											XRL.The.Core.MoveConfirmDirection = Direction;
											return false;
										}
										if (Popup.WarnYesNo("There" + gameObject6.Is + " " + gameObject6.an(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: false, Short: true, BaseOnly: false, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + " that way. Are you sure you want to move there and drop down a level?", "Sounds/UI/ui_notification_warning", AllowEscape: true, DialogResult.No) != 0)
										{
											return false;
										}
									}
								}
							}
						}
					}
					goto IL_0757;
				}
				Fail("You are a wall-dwelling creature and may only move onto walls.");
			}
			goto IL_0dcc;
		}
		if (flag)
		{
			UseEnergy(1000, "Movement", null, null);
		}
		if (IsPlayer())
		{
			CurrentZone?.SetActive();
		}
		return true;
	}

	public bool Move(string Direction, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, bool AllowDashing = true, bool DoConfirmations = true, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, bool NearestAvailable = false, int? EnergyCost = null, string Type = null, int? MoveSpeed = null, bool Peaceful = false, bool IgnoreMobility = false, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, int CallDepth = 0)
	{
		GameObject Blocking;
		return Move(Direction, out Blocking, Forced, System, IgnoreGravity, NoStack, AllowDashing, DoConfirmations, Dragging, Actor, NearestAvailable, EnergyCost, Type, MoveSpeed, Peaceful, IgnoreMobility, ForceSwap, Ignore, CallDepth + 1);
	}

	public bool Push(string Direction, int Force, int MaxDistance = 9999999, bool IgnoreGravity = false, bool Involuntary = true)
	{
		return Physics?.Push(Direction, Force, MaxDistance, IgnoreGravity, Involuntary) ?? false;
	}

	public int Accelerate(int Force, string Direction = null, Cell Toward = null, Cell AwayFrom = null, string Type = null, LargerFolk_GameObject Actor = null, bool Accidental = false, LargerFolk_GameObject IntendedTarget = null, string BonusDamage = null, double DamageFactor = 1.0, bool SuspendFalling = true, bool OneShort = false, bool Repeat = false, bool BuiltOnly = true, bool MessageForInanimate = true, bool DelayForDisplay = true)
	{
		if (Physics == null)
		{
			return 0;
		}
		return Physics.Accelerate(Force, Direction, Toward, AwayFrom, Type, Actor, Accidental, IntendedTarget, BonusDamage, DamageFactor, SuspendFalling, OneShort, Repeat, BuiltOnly, MessageForInanimate, DelayForDisplay);
	}

	public bool TemperatureChange(int Amount, LargerFolk_GameObject Actor = null, bool Radiant = false, bool MinAmbient = false, bool MaxAmbient = false, bool IgnoreResistance = false, int Phase = 0, int? Min = null, int? Max = null)
	{
		return Physics?.ProcessTemperatureChange(Amount, Actor, Radiant, MinAmbient, MaxAmbient, IgnoreResistance, Phase, Min, Max) ?? false;
	}

	private void ProcessMoveEvent(Event E, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null)
	{
		if (Forced)
		{
			E.SetFlag("Forced", State: true);
		}
		if (System)
		{
			E.SetFlag("System", State: true);
		}
		if (IgnoreGravity)
		{
			E.SetFlag("IgnoreGravity", State: true);
		}
		if (NoStack)
		{
			E.SetFlag("NoStack", State: true);
		}
		if (Direction != null)
		{
			E.SetParameter("Direction", Direction);
		}
		if (Type != null)
		{
			E.SetParameter("Type", Type);
			E.SetParameter(Type, 1);
		}
		if (Dragging != null)
		{
			E.SetParameter("Dragging", Dragging);
		}
		if (Actor != null)
		{
			E.SetParameter("Actor", Actor);
		}
		if (ForceSwap != null)
		{
			E.SetParameter("ForceSwap", ForceSwap);
		}
		if (Ignore != null)
		{
			E.SetParameter("Ignore", Ignore);
		}
	}

	public bool ProcessBeginMove(out bool ReobtainCombatants, Cell DestinationCell, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		ReobtainCombatants = false;
		if (DestinationCell == null)
		{
			return false;
		}
		if (HasRegisteredEvent("BeginMove"))
		{
			ReobtainCombatants = true;
			Event e = Event.New("BeginMove", "DestinationCell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (HasRegisteredEvent("BeginMoveLate"))
		{
			ReobtainCombatants = true;
			Event e2 = Event.New("BeginMoveLate", "DestinationCell", DestinationCell);
			ProcessMoveEvent(e2, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e2, ParentEvent) && !System)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessObjectLeavingCell(Cell CC, ref LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (CC == null)
		{
			return true;
		}
		if (CC.HasObjectWithRegisteredEvent("ObjectLeavingCell"))
		{
			Event e = Event.New("ObjectLeavingCell", "Object", this);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!CC.FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (CC.WantEvent(ObjectLeavingCellEvent.ID, MinEvent.CascadeLevel))
		{
			ObjectLeavingCellEvent objectLeavingCellEvent = ObjectLeavingCellEvent.FromPool(this, CC, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			bool num = CC.HandleEvent(objectLeavingCellEvent, ParentEvent);
			if (Blocking == null)
			{
				Blocking = objectLeavingCellEvent.Blocking;
			}
			if (!num && !System)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessEnteringCell(Cell DestinationCell, ref LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (HasRegisteredEvent("EnteringCell"))
		{
			Event e = Event.New("EnteringCell", "Cell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (WantEvent(EnteringCellEvent.ID, MinEvent.CascadeLevel))
		{
			EnteringCellEvent enteringCellEvent = EnteringCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			bool num = HandleEvent(enteringCellEvent, ParentEvent);
			if (Blocking == null)
			{
				Blocking = enteringCellEvent.Blocking;
			}
			if (!num && !System)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessObjectEnteringCell(Cell DestinationCell, ref LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (DestinationCell.HasObjectWithRegisteredEvent("ObjectEnteringCell"))
		{
			Event e = Event.New("ObjectEnteringCell", "Object", this);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!DestinationCell.FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (DestinationCell.WantEvent(ObjectEnteringCellEvent.ID, MinEvent.CascadeLevel))
		{
			ObjectEnteringCellEvent objectEnteringCellEvent = ObjectEnteringCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			bool num = DestinationCell.HandleEvent(objectEnteringCellEvent, ParentEvent);
			if (Blocking == null)
			{
				Blocking = objectEnteringCellEvent.Blocking;
			}
			if (!num && !System)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessEnteringZone(Cell CurrentCell, Cell DestinationCell, ref LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (HasRegisteredEvent("EnteringZone"))
		{
			Event e = Event.New("EnteringZone", "Origin", CurrentCell, "Cell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent))
			{
				return false;
			}
		}
		bool flag = WantEvent(EnteringZoneEvent.ID, EnteringZoneEvent.CascadeLevel);
		bool flag2 = DestinationCell.ParentZone.WantEvent(EnteringZoneEvent.ID, EnteringZoneEvent.CascadeLevel);
		if (flag || flag2)
		{
			EnteringZoneEvent enteringZoneEvent = EnteringZoneEvent.FromPool(this, CurrentCell, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			bool flag3 = true;
			if (flag)
			{
				flag3 = HandleEvent(enteringZoneEvent, ParentEvent);
			}
			if (flag2 && flag3)
			{
				flag3 = DestinationCell.ParentZone.HandleEvent(enteringZoneEvent, ParentEvent);
			}
			if (Blocking == null)
			{
				Blocking = enteringZoneEvent.Blocking;
			}
			if (!flag3)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessLeaveCell(Cell CC, ref LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (CC == null)
		{
			return true;
		}
		if (HasRegisteredEvent("LeaveCell"))
		{
			Event e = Event.New("LeaveCell", "Cell", CC);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (WantEvent(LeaveCellEvent.ID, MinEvent.CascadeLevel))
		{
			LeaveCellEvent leaveCellEvent = LeaveCellEvent.FromPool(this, CC, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			bool num = HandleEvent(leaveCellEvent, ParentEvent);
			if (Blocking == null)
			{
				Blocking = leaveCellEvent.Blocking;
			}
			if (!num && !System)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessLeavingCell(Cell DestinationCell, ref LargerFolk_GameObject Blocking, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (HasRegisteredEvent("LeavingCell"))
		{
			Event e = Event.New("LeavingCell", "Cell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (WantEvent(LeavingCellEvent.ID, MinEvent.CascadeLevel))
		{
			LeavingCellEvent leavingCellEvent = LeavingCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			bool num = HandleEvent(leavingCellEvent, ParentEvent);
			if (Blocking == null)
			{
				Blocking = leavingCellEvent.Blocking;
			}
			if (!num && !System)
			{
				return false;
			}
		}
		return true;
	}

	public bool ProcessLeftCell(Cell DestinationCell, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (HasRegisteredEvent("LeftCell"))
		{
			Event e = Event.New("LeftCell", "Cell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (WantEvent(LeftCellEvent.ID, MinEvent.CascadeLevel) && !HandleEvent(LeftCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore), ParentEvent) && !System)
		{
			return false;
		}
		return true;
	}

	public bool ProcessEnterCell(Cell DestinationCell, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (HasRegisteredEvent("EnterCell"))
		{
			Event e = Event.New("EnterCell", "Cell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (WantEvent(EnterCellEvent.ID, MinEvent.CascadeLevel) && !HandleEvent(EnterCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore), ParentEvent) && !System)
		{
			return false;
		}
		return true;
	}

	public bool ProcessEnteredCell(Cell DestinationCell, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (HasRegisteredEvent("EnteredCell"))
		{
			Event e = Event.New("EnteredCell", "Cell", DestinationCell);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if ((IsPlayer() || WantEvent(EnteredCellEvent.ID, MinEvent.CascadeLevel)) && !HandleEvent(EnteredCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore)) && !System)
		{
			return false;
		}
		return true;
	}

	public bool ProcessObjectEnteredCell(Cell DestinationCell, bool Forced = false, bool System = false, bool IgnoreGravity = false, bool NoStack = false, string Direction = null, string Type = null, LargerFolk_GameObject Dragging = null, LargerFolk_GameObject Actor = null, LargerFolk_GameObject ForceSwap = null, LargerFolk_GameObject Ignore = null, IEvent ParentEvent = null)
	{
		if (DestinationCell.HasObjectWithRegisteredEvent("ObjectEnteredCell"))
		{
			Event e = Event.New("ObjectEnteredCell", "Object", this);
			ProcessMoveEvent(e, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore);
			if (!DestinationCell.FireEvent(e, ParentEvent) && !System)
			{
				return false;
			}
		}
		if (DestinationCell.WantEvent(ObjectEnteredCellEvent.ID, MinEvent.CascadeLevel) && !DestinationCell.HandleEvent(ObjectEnteredCellEvent.FromPool(this, DestinationCell, Forced, System, IgnoreGravity, NoStack, Direction, Type, Dragging, Actor, ForceSwap, Ignore), ParentEvent) && !System)
		{
			return false;
		}
		return true;
	}

	public LargerFolk_GameObject SplitStack(int Count, LargerFolk_GameObject OwningObject = null, bool NoRemove = false)
	{
		if (Stacker != null)
		{
			return Stacker.SplitStack(Count, OwningObject, NoRemove);
		}
		return null;
	}

	private void AutoEquipFail(LargerFolk_GameObject obj, bool Silent = false, Cell WasInCell = null, LargerFolk_GameObject WasInInventory = null, Event E = null, List<LargerFolk_GameObject> WasUnequipped = null)
	{
		if (IsPlayer() && !Silent)
		{
			string text = null;
			if (E != null)
			{
				text = E.GetStringParameter("FailureMessage");
				if (WasUnequipped == null)
				{
					WasUnequipped = E.GetParameter("WasUnequipped") as List<LargerFolk_GameObject>;
				}
			}
			if (E == null || !E.HasFlag("OwnershipViolationDeclined"))
			{
				if (text == null)
				{
					text = "";
				}
				else if (text != "")
				{
					text += " ";
				}
				text = text + "You can't auto-equip " + obj.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null) + ".";
			}
			string text2 = DescribeUnequip(WasUnequipped);
			if (!text2.IsNullOrEmpty())
			{
				if (text == null)
				{
					text = "";
				}
				else if (text != "")
				{
					text += "\n\n";
				}
				text += text2;
			}
			if (!text.IsNullOrEmpty())
			{
				Popup.ShowFail(text);
			}
		}
		if (WasInCell != null)
		{
			if (Validate(ref obj) && obj.CurrentCell != WasInCell)
			{
				obj.RemoveFromContext();
				WasInCell.AddObject(obj);
			}
		}
		else if (WasInInventory?.Inventory != null && Validate(ref obj) && obj.InInventory != WasInInventory)
		{
			obj.RemoveFromContext();
			WasInInventory.Inventory.AddObject(obj);
		}
	}

	private bool AutoEquipSucceed(bool Silent, List<LargerFolk_GameObject> WasUnequipped)
	{
		if (!IsPlayer())
		{
			return true;
		}
		if (Silent)
		{
			return true;
		}
		string text = DescribeUnequip(WasUnequipped);
		if (!text.IsNullOrEmpty())
		{
			Popup.Show(text);
		}
		return true;
	}

	public string DescribeUnequip(List<LargerFolk_GameObject> WasUnequipped)
	{
		if (WasUnequipped == null || WasUnequipped.Count == 0)
		{
			return null;
		}
		WasUnequipped.Sort((LargerFolk_GameObject a, LargerFolk_GameObject b) => a.HasProperName.CompareTo(b.HasProperName));
		List<string> list = new List<string>(WasUnequipped.Count);
		bool flag = false;
		foreach (LargerFolk_GameObject item in WasUnequipped)
		{
			if (item.IsValid())
			{
				list.Add(item.t(int.MaxValue, null, null, AsIfKnown: false, Single: false, NoConfusion: false, NoColor: false, Stripped: false, WithoutTitles: true, Short: true, BaseOnly: false, null, IndicateHidden: false, SecondPerson: true, Reflexive: false, null));
				if (item.IsPlural)
				{
					flag = true;
				}
			}
		}
		if (list.Count <= 0)
		{
			return null;
		}
		return Grammar.MakeAndList(list).Capitalize() + " " + ((flag || list.Count > 1) ? "were" : "was") + " unequipped.";
	}

	public BodyPart getComparisonBodypart(LargerFolk_GameObject GO)
	{
		if (!Validate(ref GO))
		{
			return null;
		}
		if (GO.HasPropertyOrTag("CannotEquip"))
		{
			return null;
		}
		string inventoryCategory = GO.GetInventoryCategory();
		if (GO.IsThrownWeapon && !GO.HasPropertyOrTag("NoAIEquipAsThrownWeapon") && GO.Understood())
		{
			Body body = Body;
			return body.GetFirstPart("Thrown Weapon", (BodyPart p) => p.Equipped == null) ?? body.GetFirstPart("Thrown Weapon");
		}
		switch (inventoryCategory)
		{
		case "Shields":
		{
			XRL.World.Parts.Shield part4 = GO.GetPart<XRL.World.Parts.Shield>();
			List<BodyPart> part5 = Body.GetPart(part4.WornOn);
			foreach (BodyPart item in part5)
			{
				if (item.Equipped != null && item.Equipped.HasPart<XRL.World.Parts.Shield>())
				{
					return item;
				}
			}
			if (part5.Count > 0)
			{
				return part5[0];
			}
			break;
		}
		case "Armor":
		case "Clothes":
		{
			Armor part7 = GO.GetPart<Armor>();
			Body body4 = Body;
			if (body4 == null)
			{
				break;
			}
			foreach (BodyPart item2 in (part7.WornOn == "*") ? body4.LoopParts() : body4.LoopPart(part7.WornOn))
			{
				if (item2.Equipped == null)
				{
					return item2;
				}
			}
			using (IEnumerator<BodyPart> enumerator2 = ((part7.WornOn == "*") ? body4.LoopParts() : body4.LoopPart(part7.WornOn)).GetEnumerator())
			{
				if (enumerator2.MoveNext())
				{
					return enumerator2.Current;
				}
			}
			break;
		}
		case "Missile Weapons":
		{
			if (!GO.TryGetPart<MissileWeapon>(out var Part))
			{
				return null;
			}
			Body body3 = Body;
			if (body3 == null)
			{
				return null;
			}
			List<BodyPart> part6 = body3.GetPart(Part.GetSlotType());
			foreach (BodyPart item3 in part6)
			{
				if (item3.Equipped == null)
				{
					return item3;
				}
			}
			using (List<BodyPart>.Enumerator enumerator = part6.GetEnumerator())
			{
				if (enumerator.MoveNext())
				{
					return enumerator.Current;
				}
			}
			return null;
		}
		case "Ammo":
			return null;
		case "Melee Weapons":
		{
			MeleeWeapon part2 = GO.GetPart<MeleeWeapon>();
			List<BodyPart> part3 = Body.GetPart(part2.Slot);
			if (part3.Count <= 0)
			{
				break;
			}
			BodyPart bodyPart = null;
			foreach (BodyPart item4 in part3)
			{
				if (item4.Primary)
				{
					if (bodyPart == null)
					{
						bodyPart = item4;
					}
					if (item4.Equipped != null)
					{
						return item4;
					}
				}
			}
			break;
		}
		default:
		{
			Body body2 = Body;
			List<BodyPart> list = body2.GetPart("Hand");
			if (GO.HasPart<Armor>())
			{
				Armor part = GO.GetPart<Armor>();
				if (part.WornOn != "Body")
				{
					list = ((!(part.WornOn == "*")) ? body2.GetPart(part.WornOn) : body2.GetParts());
				}
			}
			foreach (BodyPart item5 in list)
			{
				if (!item5.Primary && item5.Equipped != null)
				{
					return item5;
				}
			}
			return null;
		}
		}
		return null;
	}

	public bool AutoEquip(LargerFolk_GameObject GO, bool Forced = false, bool ForceHeld = false, bool Silent = false)
	{
		if (!Validate(ref GO))
		{
			AutoEquipFail(GO, Silent);
			return false;
		}
		if (!Forced && GO.HasPropertyOrTag("CannotEquip"))
		{
			AutoEquipFail(GO, Silent);
			return false;
		}
		Cell currentCell = GO.CurrentCell;
		GameObject inInventory = GO.InInventory;
		if (inInventory != this && GO.Equipped != this)
		{
			GO.SplitFromStack();
			if (!ReceiveObject(GO, NoStack: true))
			{
				GO.CheckStack();
				return false;
			}
		}
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		string text = (ForceHeld ? "Melee Weapons" : GO.GetInventoryCategory());
		if (!ForceHeld && GO.IsThrownWeapon && !GO.HasPropertyOrTag("NoAIEquipAsThrownWeapon") && GO.Understood())
		{
			Body body = Body;
			BodyPart bodyPart = body.GetFirstPart("Thrown Weapon", (BodyPart p) => p.Equipped == null) ?? body.GetFirstPart("Thrown Weapon");
			if (bodyPart == null)
			{
				AutoEquipFail(GO, Silent, currentCell, inInventory);
			}
			else
			{
				Event @event = Event.New("CommandEquipObject", "Object", GO, "BodyPart", bodyPart);
				@event.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					@event.SetSilent(Silent: true);
				}
				@event.SetParameter("AutoEquipTry", 1);
				if (FireEvent(@event))
				{
					return AutoEquipSucceed(Silent, list);
				}
				AutoEquipFail(GO, Silent, currentCell, inInventory, @event);
			}
		}
		else
		{
			switch (text)
			{
			case "Shields":
			{
				XRL.World.Parts.Shield part4 = GO.GetPart<XRL.World.Parts.Shield>();
				Event event4 = Event.New("CommandEquipObject", "Object", GO);
				event4.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					event4.SetSilent(Silent: true);
				}
				List<BodyPart> part5 = Body.GetPart(part4.WornOn);
				int num3 = 0;
				foreach (BodyPart item in part5)
				{
					if (item.Equipped != null && item.Equipped.HasPart<XRL.World.Parts.Shield>())
					{
						event4.SetParameter("BodyPart", item);
						event4.SetParameter("AutoEquipTry", ++num3);
						if (FireEvent(event4))
						{
							return AutoEquipSucceed(Silent, list);
						}
					}
				}
				if (part5.Count > 0)
				{
					event4.SetParameter("BodyPart", part5[0]);
					event4.SetParameter("AutoEquipTry", ++num3);
					if (FireEvent(event4))
					{
						return AutoEquipSucceed(Silent, list);
					}
				}
				AutoEquipFail(GO, Silent, currentCell, inInventory, event4);
				break;
			}
			case "Armor":
			case "Clothes":
			{
				Armor part6 = GO.GetPart<Armor>();
				Event event5 = Event.New("CommandEquipObject", "Object", GO);
				event5.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					event5.SetSilent(Silent: true);
				}
				int num4 = 0;
				Body body3 = Body;
				if (body3 != null)
				{
					foreach (BodyPart item2 in (part6.WornOn == "*") ? body3.LoopParts() : body3.LoopPart(part6.WornOn))
					{
						if (item2.Equipped == null)
						{
							event5.SetParameter("BodyPart", item2);
							event5.SetParameter("AutoEquipTry", ++num4);
							if (FireEvent(event5))
							{
								return AutoEquipSucceed(Silent, list);
							}
						}
					}
					foreach (BodyPart item3 in (part6.WornOn == "*") ? body3.LoopParts() : body3.LoopPart(part6.WornOn))
					{
						if (item3.Equipped != null)
						{
							event5.SetParameter("BodyPart", item3);
							event5.SetParameter("AutoEquipTry", ++num4);
							if (FireEvent(event5))
							{
								return AutoEquipSucceed(Silent, list);
							}
						}
					}
				}
				AutoEquipFail(GO, Silent, currentCell, inInventory, event5);
				break;
			}
			case "Missile Weapons":
			{
				Event event7 = Event.New("CommandEquipObject", "Object", GO);
				event7.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					event7.SetSilent(Silent: true);
				}
				if (!GO.TryGetPart<MissileWeapon>(out var Part))
				{
					MetricsManager.LogError("Item for missile weapon auto-equip had no MissileWeapon part: " + GO.DebugName);
					AutoEquipFail(GO, Silent, currentCell, inInventory, event7);
					break;
				}
				Body body4 = Body;
				if (body4 == null)
				{
					MetricsManager.LogError("Creature trying to equip missile weapon had no body: " + DebugName);
					AutoEquipFail(GO, Silent, currentCell, inInventory, event7);
					break;
				}
				List<BodyPart> part8 = body4.GetPart(Part.GetSlotType());
				int num5 = 0;
				foreach (BodyPart item4 in part8)
				{
					if (item4.Equipped == null)
					{
						event7.SetParameter("BodyPart", item4);
						event7.SetParameter("AutoEquipTry", ++num5);
						if (FireEvent(event7))
						{
							return AutoEquipSucceed(Silent, list);
						}
					}
				}
				foreach (BodyPart item5 in part8)
				{
					event7.SetParameter("BodyPart", item5);
					event7.SetParameter("AutoEquipTry", ++num5);
					if (FireEvent(event7))
					{
						return AutoEquipSucceed(Silent, list);
					}
				}
				if (part8.Count > 0)
				{
					event7.SetParameter("BodyPart", part8[0]);
					event7.SetParameter("AutoEquipTry", ++num5);
					if (FireEvent(event7))
					{
						return AutoEquipSucceed(Silent, list);
					}
				}
				AutoEquipFail(GO, Silent, currentCell, inInventory, event7);
				break;
			}
			case "Ammo":
			{
				Event event6 = Event.New("CommandEquipObject", "Object", GO);
				event6.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					event6.SetSilent(Silent: true);
				}
				List<LargerFolk_GameObject> missileWeapons = GetMissileWeapons();
				if (missileWeapons == null || missileWeapons.Count == 0)
				{
					if (!Silent && IsPlayer())
					{
						Popup.ShowFail("You don't have a missile weapon equipped that uses that ammunition.");
					}
					return false;
				}
				foreach (LargerFolk_GameObject item6 in missileWeapons)
				{
					MagazineAmmoLoader part7 = item6.GetPart<MagazineAmmoLoader>();
					if (part7 != null && (GO.HasPart(part7.AmmoPart) || GO.HasTag(part7.AmmoPart)))
					{
						part7.Unload(this);
						part7.Load(this, GO);
						UseEnergy(part7.ReloadEnergy, "Reload", null, null);
						return AutoEquipSucceed(Silent, list);
					}
				}
				if (!Silent && IsPlayer())
				{
					Popup.ShowFail("You don't have a missile weapon equipped that uses that ammunition.");
				}
				break;
			}
			case "Melee Weapons":
			{
				MeleeWeapon part2 = GO.GetPart<MeleeWeapon>();
				Event event3 = Event.New("CommandEquipObject", "Object", GO);
				event3.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					event3.SetSilent(Silent: true);
				}
				List<BodyPart> part3 = Body.GetPart(part2.Slot);
				if (part3.Count > 0)
				{
					int num2 = 0;
					BodyPart bodyPart2 = null;
					foreach (BodyPart item7 in part3)
					{
						if (!item7.Primary)
						{
							continue;
						}
						if (bodyPart2 == null)
						{
							bodyPart2 = item7;
						}
						if (item7.Equipped == null)
						{
							event3.SetParameter("BodyPart", item7);
							event3.SetParameter("AutoEquipTry", ++num2);
							if (FireEvent(event3))
							{
								return AutoEquipSucceed(Silent, list);
							}
						}
					}
					foreach (BodyPart item8 in part3)
					{
						if (item8.Equipped == null)
						{
							event3.SetParameter("BodyPart", item8);
							event3.SetParameter("AutoEquipTry", ++num2);
							if (FireEvent(event3))
							{
								return AutoEquipSucceed(Silent, list);
							}
						}
					}
					event3.SetParameter("BodyPart", bodyPart2 ?? part3[0]);
					event3.SetParameter("AutoEquipTry", ++num2);
					if (FireEvent(event3))
					{
						return AutoEquipSucceed(Silent, list);
					}
				}
				AutoEquipFail(GO, Silent, currentCell, inInventory, event3);
				break;
			}
			default:
			{
				Event event2 = Event.New("CommandEquipObject", "Object", GO);
				event2.SetParameter("WasUnequipped", list);
				if (Silent)
				{
					event2.SetSilent(Silent: true);
				}
				Body body2 = Body;
				List<BodyPart> list2 = body2.GetPart("Hand");
				if (!ForceHeld && GO.HasPart<Armor>())
				{
					Armor part = GO.GetPart<Armor>();
					if (part.WornOn != "Body")
					{
						list2 = ((!(part.WornOn == "*")) ? body2.GetPart(part.WornOn) : body2.GetParts());
					}
				}
				int num = 0;
				foreach (BodyPart item9 in list2)
				{
					if (!item9.Primary && item9.Equipped == null)
					{
						event2.SetParameter("BodyPart", item9);
						event2.SetParameter("AutoEquipTry", ++num);
						if (FireEvent(event2))
						{
							return AutoEquipSucceed(Silent, list);
						}
					}
				}
				foreach (BodyPart item10 in list2)
				{
					if (!item10.Primary && item10.Equipped != null)
					{
						event2.SetParameter("BodyPart", item10);
						event2.SetParameter("AutoEquipTry", ++num);
						if (FireEvent(event2))
						{
							return AutoEquipSucceed(Silent, list);
						}
					}
				}
				foreach (BodyPart item11 in list2)
				{
					if (item11.Primary && item11.Equipped == null)
					{
						event2.SetParameter("BodyPart", item11);
						event2.SetParameter("AutoEquipTry", ++num);
						if (FireEvent(event2))
						{
							return AutoEquipSucceed(Silent, list);
						}
					}
				}
				foreach (BodyPart item12 in list2)
				{
					if (item12.Primary && item12.Equipped != null)
					{
						event2.SetParameter("BodyPart", item12);
						event2.SetParameter("AutoEquipTry", ++num);
						if (FireEvent(event2))
						{
							return AutoEquipSucceed(Silent, list);
						}
					}
				}
				AutoEquipFail(GO, Silent, currentCell, inInventory, event2);
				break;
			}
			}
		}
		return false;
	}

	public int GetSlotsRequiredFor(LargerFolk_GameObject Actor, string SlotType, bool FloorAtOne = true)
	{
		int num = GetSlotsRequiredEvent.GetFor(this, Actor, SlotType);
		if (FloorAtOne && num < 1)
		{
			num = 1;
		}
		return num;
	}

	public string GetTile()
	{
		return Render?.Tile;
	}

	public string GetForegroundColor()
	{
		return Render?.GetForegroundColor();
	}

	public void SetForegroundColor(string Color)
	{
		Render?.SetForegroundColor(Color);
	}

	public void SetForegroundColor(char Color)
	{
		Render?.SetForegroundColor(Color);
	}

	public string GetBackgroundColor()
	{
		return Render?.GetBackgroundColor();
	}

	public void SetBackgroundColor(string Color)
	{
		Render?.SetBackgroundColor(Color);
	}

	public string GetDetailColor()
	{
		return Render?.DetailColor;
	}

	public void SetBackgroundColor(char Color)
	{
		Render?.SetBackgroundColor(Color);
	}

	public void SetDetailColor(string Color)
	{
		if (Render != null)
		{
			Render.DetailColor = Color;
		}
	}

	public void SetDetailColor(char Color)
	{
		if (Render != null)
		{
			Render.DetailColor = Color.ToString() ?? "";
		}
	}

	public List<Effect> GetTonicEffects()
	{
		List<Effect> list = new List<Effect>();
		if (_Effects != null)
		{
			foreach (Effect effect in Effects)
			{
				if (effect.Duration > 0 && effect.IsTonic())
				{
					list.Add(effect);
				}
			}
		}
		return list;
	}

	public int GetTonicEffectCount()
	{
		int num = 0;
		if (_Effects != null)
		{
			int i = 0;
			for (int count = Effects.Count; i < count; i++)
			{
				if (Effects[i].Duration > 0 && Effects[i].IsTonic())
				{
					num++;
				}
			}
		}
		return num;
	}

	public int GetTonicCapacity()
	{
		return GetTonicCapacityEvent.GetFor(this);
	}

	public bool IsBroken()
	{
		return HasEffect<Broken>();
	}

	public bool IsRusted()
	{
		return HasEffect<Rusted>();
	}

	public bool IsEMPed()
	{
		return HasEffect<ElectromagneticPulsed>();
	}

	public bool IsInStasis()
	{
		return HasEffect<Stasis>();
	}

	public bool IsLedBy(LargerFolk_GameObject GO)
	{
		return Brain?.IsLedBy(GO) ?? false;
	}

	public bool InSamePartyAs(LargerFolk_GameObject GO)
	{
		return Brain?.InSamePartyAs(GO) ?? false;
	}

	public bool IsTryingToJoinPartyLeader()
	{
		return Brain?.IsTryingToJoinPartyLeader() ?? false;
	}

	public bool IsTryingToJoinPartyLeaderForZoneUncaching()
	{
		if (!IsTryingToJoinPartyLeader())
		{
			return false;
		}
		return FireEvent("KeepZoneCachedForPlayerJoin");
	}

	public bool IsBondedBy(LargerFolk_GameObject Object)
	{
		IBondedCompanion partDescendedFrom = GetPartDescendedFrom<IBondedCompanion>();
		while (partDescendedFrom?.CompanionOf != null)
		{
			if (partDescendedFrom.CompanionOf == this)
			{
				MetricsManager.LogError("bond cycle in " + DebugName + " + " + partDescendedFrom.DebugName);
				break;
			}
			if (partDescendedFrom.CompanionOf == Object)
			{
				return true;
			}
			partDescendedFrom = partDescendedFrom.CompanionOf.GetPartDescendedFrom<IBondedCompanion>();
		}
		return false;
	}

	public bool IsFluid()
	{
		if (HasPart<Gas>())
		{
			return true;
		}
		if (IsOpenLiquidVolume())
		{
			return true;
		}
		return false;
	}

	public bool ConsiderSolid()
	{
		if (Physics == null || !Physics.Solid || !Physics.IsReal)
		{
			return false;
		}
		return true;
	}

	public bool ConsiderSolidInRenderingContext()
	{
		if (Brain != null && Brain.LivesOnWalls)
		{
			return true;
		}
		if (Render != null && !Render.Occluding)
		{
			return false;
		}
		if (Physics != null && Physics.Solid && Physics.IsReal)
		{
			return true;
		}
		return false;
	}

	public bool ConsiderSolid(bool ForFluid)
	{
		if (!ConsiderSolid())
		{
			return false;
		}
		if (ForFluid)
		{
			if (HasTagOrProperty("Flyover"))
			{
				return false;
			}
			if (GetIntProperty("AllowMissiles") != 0)
			{
				return false;
			}
		}
		return true;
	}

	public bool ConsiderSolid(bool ForFluid, int Phase)
	{
		if (!ConsiderSolid())
		{
			return false;
		}
		if (ForFluid)
		{
			if (HasTagOrProperty("Flyover"))
			{
				return false;
			}
			if (GetIntProperty("AllowMissiles") != 0)
			{
				return false;
			}
		}
		if (!PhaseMatches(Phase))
		{
			return false;
		}
		return true;
	}

	public bool ConsiderSolidFor(LargerFolk_GameObject Object, bool ForFluid = false)
	{
		if (ConsiderSolid(ForFluid))
		{
			bool Immobile = true;
			bool Waterbound = false;
			bool WallWalker = false;
			Object?.Brain?.CheckMobility(out Immobile, out Waterbound, out WallWalker);
			if (WallWalker && IsWalkableWall(Object))
			{
				return false;
			}
			if (Object == null)
			{
				return true;
			}
			if (XRLCore.Core.IDKFA && Object.IsPlayer())
			{
				return false;
			}
			if (Object.IsFluid() || Object.IsFlying)
			{
				if (HasTagOrProperty("Flyover"))
				{
					return false;
				}
				if (GetIntProperty("AllowMissiles") != 0)
				{
					return false;
				}
			}
			if (!PhaseMatches(Object))
			{
				return false;
			}
			if (FungalVisionary.VisionLevel <= 0 && HasPart<FungalVision>() && !Object.HasPart<FungalVision>())
			{
				return false;
			}
			if (TryGetPart<Forcefield>(out var Part) && !HasPart<Stasisfield>() && Part.CanPass(Object))
			{
				return false;
			}
			return true;
		}
		return false;
	}

	public bool ConsiderSolidInRenderingContextFor(LargerFolk_GameObject Object)
	{
		if (Brain != null && Brain.LivesOnWalls)
		{
			return true;
		}
		return ConsiderSolidFor(Object);
	}

	public bool ConsiderUnableToOccupySameCell(LargerFolk_GameObject Object)
	{
		if (Physics == null || !Physics.IsReal)
		{
			return false;
		}
		if (Object.Physics == null || !Object.Physics.IsReal)
		{
			return false;
		}
		if (HasTagOrProperty("IgnoreOccupationChecks") || Object.HasTagOrProperty("IgnoreOccupationChecks"))
		{
			return false;
		}
		if (HasPart<Combat>() && Object.HasPart<Combat>())
		{
			return PhaseAndFlightMatches(Object);
		}
		if (Object.ConsiderSolidFor(this) && (Brain == null || !Brain.LivesOnWalls || !Object.IsWall()))
		{
			return true;
		}
		return false;
	}

	public bool ConsiderSolidForProjectile(LargerFolk_GameObject Projectile, LargerFolk_GameObject Attacker, out bool RecheckHit, out bool RecheckPhase, LargerFolk_GameObject Launcher = null, LargerFolk_GameObject ApparentTarget = null, bool? PenetrateCreatures = false, bool? PenetrateWalls = false, bool Prospective = false, bool TreatAsSolidHandled = false)
	{
		RecheckHit = false;
		RecheckPhase = false;
		if (Projectile == null)
		{
			return ConsiderSolidFor(Attacker);
		}
		if (FungalVisionary.VisionLevel <= 0 && HasPart<FungalVision>() && !Attacker.HasPart<FungalVision>())
		{
			return false;
		}
		bool penetrateCreatures = PenetrateCreatures == true;
		bool penetrateWalls = PenetrateWalls == true;
		if (!PenetrateCreatures.HasValue || !PenetrateWalls.HasValue)
		{
			GetMissileWeaponPerformanceEvent @for = GetMissileWeaponPerformanceEvent.GetFor(Attacker, Launcher, Projectile, null, null, null, null, null, null, null, null);
			penetrateCreatures = PenetrateCreatures ?? @for.PenetrateCreatures;
			penetrateWalls = PenetrateWalls ?? @for.PenetrateWalls;
		}
		int num = 0;
		bool result;
		do
		{
			IL_00d0:
			if (!TreatAsSolidHandled)
			{
				TreatAsSolid part = Projectile.GetPart<TreatAsSolid>();
				if (part != null)
				{
					bool RecheckHit2;
					bool RecheckPhase2;
					bool flag = part.Match(this, Attacker, out RecheckHit2, out RecheckPhase2, Launcher, ApparentTarget, null, penetrateCreatures, penetrateWalls, Prospective);
					if (RecheckPhase2)
					{
						RecheckPhase = true;
					}
					if (RecheckHit2)
					{
						RecheckHit = true;
						if (++num < 100)
						{
							goto IL_00d0;
						}
					}
					if (flag)
					{
						return true;
					}
				}
			}
			XRL.World.Parts.Physics physics = Physics;
			if (physics == null || !physics.Solid)
			{
				return false;
			}
			if (HasTagOrProperty("Flyover"))
			{
				return false;
			}
			if (GetIntProperty("AllowMissiles") != 0)
			{
				return false;
			}
			if (!PhaseMatches(Projectile))
			{
				return false;
			}
			Forcefield part2 = GetPart<Forcefield>();
			if (part2 != null && !HasPart<Stasisfield>() && part2.CanMissilePassFrom(Attacker, Projectile))
			{
				return false;
			}
			if (Projectile.HasTagOrProperty("Light") && HasTagOrProperty("Transparent"))
			{
				return false;
			}
			result = BeforeProjectileHitEvent.Check(Projectile, Attacker, this, out var Recheck, out var RecheckPhase3, penetrateCreatures, penetrateWalls, Launcher, ApparentTarget, null, null, LightBased: false, Prospective);
			if (RecheckPhase3)
			{
				RecheckPhase = true;
			}
			if (!Recheck)
			{
				break;
			}
			RecheckHit = true;
		}
		while (++num < 100);
		return result;
	}

	public bool ConsiderSolidForProjectile(LargerFolk_GameObject Projectile, LargerFolk_GameObject Attacker, LargerFolk_GameObject Launcher = null, LargerFolk_GameObject ApparentTarget = null, bool? PenetrateCreatures = false, bool? PenetrateWalls = false, bool Prospective = false, bool TreatAsSolidHandled = false)
	{
		bool RecheckHit;
		bool RecheckPhase;
		return ConsiderSolidForProjectile(Projectile, Attacker, out RecheckHit, out RecheckPhase, Launcher, ApparentTarget, PenetrateCreatures, PenetrateWalls, Prospective, TreatAsSolidHandled);
	}

	public bool CanInteractInCellWithSolid(LargerFolk_GameObject Actor)
	{
		if (Actor != null && Actor.IsPlayer() && XRLCore.Core.IDKFA)
		{
			return true;
		}
		if (ConsiderSolidFor(Actor))
		{
			return true;
		}
		Brain brain = Brain;
		if (brain != null && brain.LivesOnWalls)
		{
			return true;
		}
		return false;
	}

	public bool ConsiderOccludingFor(LargerFolk_GameObject Object)
	{
		return Render?.Occluding ?? false;
	}

	public int GetBodyPartCount()
	{
		return Body?.GetPartCount() ?? 0;
	}

	public int GetBodyPartCount(string Type)
	{
		return Body?.GetPartCount(Type) ?? 0;
	}

	public int GetBodyPartCount(Predicate<BodyPart> Filter)
	{
		return Body?.GetPartCount(Filter) ?? 0;
	}

	public int GetConcreteBodyPartCount()
	{
		return Body?.GetConcretePartCount() ?? 0;
	}

	public int GetAbstractBodyPartCount()
	{
		return Body?.GetAbstractPartCount() ?? 0;
	}

	public BodyPart GetRandomConcreteBodyPart(string preferType = null)
	{
		Body body = Body;
		if (preferType != null)
		{
			BodyPart randomElement = body.GetPart(preferType).GetRandomElement();
			if (randomElement != null && !randomElement.Abstract)
			{
				return randomElement;
			}
		}
		return body.GetConcreteParts().GetRandomElement();
	}

	public string GetGeneralTermForBodyParts(string Type, string Default = null)
	{
		switch (GetBodyPartCount(Type))
		{
		case 0:
			return Default;
		case 1:
			return GetFirstBodyPart(Type).GetOrdinalName();
		default:
		{
			string text = null;
			List<string> list = null;
			foreach (BodyPart item in Body.GetPart(Type))
			{
				string name = item.TypeModel().Name;
				if (text == null)
				{
					text = name;
				}
				else if (text != name)
				{
					if (list == null)
					{
						list = new List<string> { text, name };
					}
					if (!list.Contains(name))
					{
						list.Add(name);
					}
				}
			}
			if (list == null)
			{
				return text.Pluralize();
			}
			list.Sort();
			int i = 0;
			for (int count = list.Count; i < count; i++)
			{
				list[i] = list[i].Pluralize();
			}
			return Grammar.MakeAndList(list);
		}
		}
	}

	public BodyPart GetUnequippedPreferredBodyPartOrAlternate(string PreferredType, string AlternateType)
	{
		return Body?.GetUnequippedPreferredBodyPartOrAlternate(PreferredType, AlternateType);
	}

	public int GetSeededRange(string Channel, int low, int high)
	{
		return GetSeededRandom(Channel).Next(low, high + 1);
	}

	public System.Random GetSeededRandom(string Channel = "")
	{
		return WithSeededRandom((System.Random i) => i, Channel);
	}

	public T WithSeededRandom<T>(Func<System.Random, T> Proc, string Channel = "")
	{
		string text = "RandomSeed:" + Channel;
		if (!TryGetIntProperty(text, out var Result))
		{
			Result = Hash.String(XRL.The.Game.GetWorldSeed() + ID + text);
		}
		System.Random random = new System.Random(Result);
		T result = Proc(random);
		SetIntProperty(text, random.Next());
		return result;
	}

	public void WithSeededRandom(Action<System.Random> Proc, string Channel = "")
	{
		string text = "RandomSeed:" + Channel;
		if (!TryGetIntProperty(text, out var Result))
		{
			Result = Hash.String(XRL.The.Game.GetWorldSeed() + ID + text);
		}
		System.Random random = new System.Random(Result);
		Proc(random);
		SetIntProperty(text, random.Next());
	}

	public void PermuteRandomMutationBuys()
	{
		GetSeededRandom("RandomMutationBuy");
		GetSeededRandom("brainbrine");
	}

	public bool CanMakeTelepathicContactWith(LargerFolk_GameObject who)
	{
		if (who == null)
		{
			return false;
		}
		if (!HasPart<Telepathy>())
		{
			return false;
		}
		if (!CanReceiveTelepathyEvent.Check(who, this))
		{
			return false;
		}
		return true;
	}

	public bool CanMakeEmpathicContactWith(LargerFolk_GameObject who)
	{
		if (who == null)
		{
			return false;
		}
		if (!HasPart<Empathy>())
		{
			return false;
		}
		if (!CanReceiveEmpathyEvent.Check(who, this))
		{
			return false;
		}
		return true;
	}

	public bool CanManipulateTelekinetically(LargerFolk_GameObject Object = null)
	{
		if (TryGetPart<Telekinesis>(out var Part))
		{
			return DistanceTo(Object) <= Part.GetTelekineticRange();
		}
		return false;
	}

	public Cell PickDirection(string Label = null)
	{
		return Physics?.PickDirection(Label);
	}

	public int GetBodyWeight()
	{
		int num = Stat("Strength");
		int num2 = ((num > 0) ? (num * num - num * 15 + 150) : 0);
		if (num2 != 0 && IsGiganticCreature)
		{
			num2 *= 5;
		}
		return num2;
	}

	public int GetKineticResistance()
	{
		return GetKineticResistanceEvent.GetFor(this);
	}

	public int GetSpringiness()
	{
		return GetSpringinessEvent.GetFor(this);
	}

	public int GetKineticAbsorption()
	{
		return Math.Max(GetKineticResistance() + GetSpringiness(), 1);
	}

	public void Gravitate()
	{
		if (IsSubjectToGravity)
		{
			GravitationEvent.Check(this, CurrentCell);
		}
	}

	public int GetVisibilityRadius()
	{
		if (XRLCore.Core.VisAllToggle && IsPlayer())
		{
			return 80;
		}
		return AdjustVisibilityRadiusEvent.GetFor(this, GetIntProperty("VisibilityRadius", 80));
	}

	public void PotentiallyAngerOwner(LargerFolk_GameObject who, string Suppress = null)
	{
		if (!Owner.IsNullOrEmpty() && (Suppress.IsNullOrEmpty() || !HasPropertyOrTag(Suppress)))
		{
			Physics?.BroadcastForHelp(who);
		}
		GameObject inInventory = InInventory;
		if (!string.IsNullOrEmpty(inInventory?.Owner) && inInventory.Owner != Owner && (Suppress.IsNullOrEmpty() || !inInventory.HasPropertyOrTag(Suppress)))
		{
			inInventory.Physics?.BroadcastForHelp(who);
		}
	}

	public int GetFuriousConfusion()
	{
		int num = 0;
		foreach (Effect effect in Effects)
		{
			if (effect is FuriouslyConfused furiouslyConfused)
			{
				num += furiouslyConfused.Level;
			}
		}
		return num + GetIntProperty("FuriousConfusionLevel");
	}

	public int GetConfusion()
	{
		int num = 0;
		foreach (Effect effect in Effects)
		{
			if (effect is XRL.World.Effects.Confused confused)
			{
				num += confused.Level;
			}
			else if (effect is FuriouslyConfused furiouslyConfused)
			{
				num += furiouslyConfused.Level;
			}
			else if (effect is HulkHoney_Tonic_Allergy)
			{
				num++;
			}
		}
		return num + GetIntProperty("ConfusionLevel");
	}

	public int GetTotalConfusion()
	{
		return GetConfusion();
	}

	public void RestorePristineHealth(bool UseHeal = false, bool SkipEffects = false)
	{
		Statistic stat = GetStat("Hitpoints");
		if (stat != null)
		{
			if (UseHeal)
			{
				Heal(stat.BaseValue, Message: true, FloatText: true);
			}
			else
			{
				stat.Penalty = 0;
			}
		}
		Body body = Body;
		if (body != null)
		{
			int num = 0;
			while (body.DismemberedParts != null && body.DismemberedParts.Count > 0 && ++num < 100)
			{
				body.RegenerateLimb(WholeLimb: false, null, null, null, null, null);
			}
		}
		if (Physics != null)
		{
			Physics.Temperature = 25;
		}
		if (TryGetPart<Stomach>(out var Part))
		{
			Part.Water = RuleSettings.WATER_MAXIMUM;
		}
		if (_Effects == null || SkipEffects)
		{
			return;
		}
		List<Effect> list = null;
		foreach (Effect effect in Effects)
		{
			if (effect.IsOfTypes(100663296) && !effect.IsOfType(134217728))
			{
				if (list == null)
				{
					list = new List<Effect>();
				}
				list.Add(effect);
			}
		}
		if (list == null)
		{
			return;
		}
		foreach (Effect item in list)
		{
			if (Effects.Contains(item))
			{
				RemoveEffect(item, NeedStackCheck: false);
			}
		}
		CheckStack();
	}

	public bool HasInventoryActionWithName(string Name, LargerFolk_GameObject Actor = null)
	{
		foreach (InventoryAction inventoryAction in EquipmentAPI.GetInventoryActions(this, Actor ?? ThePlayer))
		{
			if (inventoryAction.Name == Name)
			{
				return true;
			}
		}
		return false;
	}

	public bool HasInventoryActionWithCommand(string Command, LargerFolk_GameObject Actor = null)
	{
		foreach (InventoryAction inventoryAction in EquipmentAPI.GetInventoryActions(this, Actor ?? ThePlayer))
		{
			if (inventoryAction.Command == Command)
			{
				return true;
			}
		}
		return false;
	}

	public bool IsSpecialItem()
	{
		if (HasProperty("RelicName"))
		{
			return true;
		}
		if (HasTagOrProperty("QuestItem"))
		{
			return true;
		}
		if (HasPart(typeof(SpecialItem)))
		{
			return true;
		}
		if (HasPart(typeof(ModExtradimensional)))
		{
			return true;
		}
		if (IsImportant())
		{
			return true;
		}
		return false;
	}

	public bool Fail(string msg)
	{
		if (IsPlayer())
		{
			Popup.ShowFail(msg);
		}
		return false;
	}

	public void ForfeitTurn(bool EnergyNeutral = false)
	{
		if (!EnergyNeutral)
		{
			Statistic energy = Energy;
			if (energy != null)
			{
				energy.BaseValue = 0;
			}
		}
		if (IsPlayer())
		{
			XRL.The.ActionManager.SkipPlayerTurn = true;
		}
	}

	public void PassTurn()
	{
		UseEnergy(1000, "Pass", null, null, Passive: true);
	}

	public string GetListDisplayContext(LargerFolk_GameObject who)
	{
		if (this == who)
		{
			return "self";
		}
		GameObject inInventory = InInventory;
		if (inInventory != null)
		{
			if (inInventory == who)
			{
				return "inventory";
			}
			if (inInventory.InInventory == who || inInventory.Equipped == who)
			{
				return inInventory.DisplayNameOnlyStripped;
			}
		}
		if (Equipped == who)
		{
			BodyPart bodyPart = who.FindEquippedObject(this);
			if (bodyPart != null)
			{
				return bodyPart.Name;
			}
			return "equipped";
		}
		GetContext(out var ObjectContext, out var CellContext);
		if (ObjectContext != null)
		{
			if (ObjectContext == who)
			{
				return "held";
			}
			return ObjectContext.DisplayNameOnlyStripped;
		}
		if (CellContext != null)
		{
			if (who.DistanceTo(this) <= 1)
			{
				return Directions.GetDirectionDescription(who.CurrentCell.GetDirectionFromCell(CellContext));
			}
			return "elsewhere";
		}
		return null;
	}

	public int GetHeartCount()
	{
		int num = 1 + GetIntProperty("ExtraHearts");
		if (HasPart<TwoHearted>())
		{
			num++;
		}
		return num;
	}

	public void SetHasMarkOfDeath(bool flag)
	{
		if (flag)
		{
			SetIntProperty("HasMarkOfDeath", 1, RemoveIfZero: true);
		}
		else
		{
			SetIntProperty("HasMarkOfDeath", 2, RemoveIfZero: true);
		}
	}

	public bool FindMarkOfDeath(IPart skip = null)
	{
		if (!(GetPartExcept("Tattoos", skip) is Tattoos tattoos))
		{
			return false;
		}
		string stringGameState = XRL.The.Game.GetStringGameState("MarkOfDeath");
		foreach (List<string> value in tattoos.Descriptions.Values)
		{
			int i = 0;
			for (int count = value.Count; i < count; i++)
			{
				if (value[i].Contains(stringGameState))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool HasMarkOfDeath(IPart skip = null)
	{
		switch (GetIntProperty("HasMarkOfDeath"))
		{
		case 1:
			return true;
		case 2:
			return false;
		default:
		{
			bool flag = FindMarkOfDeath();
			SetHasMarkOfDeath(flag);
			return flag;
		}
		}
	}

	public void CheckMarkOfDeath(IPart skip = null)
	{
		SetHasMarkOfDeath(FindMarkOfDeath(skip));
	}

	public void ToggleMarkOfDeath()
	{
		SetHasMarkOfDeath(!HasMarkOfDeath());
	}

	public int GetMaximumLiquidExposure()
	{
		return GetMaximumLiquidExposureEvent.GetFor(this);
	}

	public double GetMaximumLiquidExposureAsDouble()
	{
		return GetMaximumLiquidExposureEvent.GetDoubleFor(this);
	}

	public bool CanBeInvoluntarilyMoved()
	{
		return CanBeInvoluntarilyMovedEvent.Check(this);
	}

	public bool CanBeDismembered(string Attributes = null)
	{
		return CanBeDismemberedEvent.Check(this, Attributes);
	}

	public bool CanBeDismembered(LargerFolk_GameObject Weapon)
	{
		return CanBeDismembered(Weapon?.GetPart<MeleeWeapon>()?.Attributes);
	}

	public bool CanTravel()
	{
		return CanTravelEvent.Check(this);
	}

	public bool CanHaveNosebleed()
	{
		if (!Effect.CanEffectTypeBeAppliedTo(24, this))
		{
			return false;
		}
		if (!Respires)
		{
			return false;
		}
		if (!Body.HasVariantPart("Face"))
		{
			return false;
		}
		return true;
	}

	public bool CanClear(bool Important = false, bool Combat = false)
	{
		if ((Important || !IsImportant()) && !HasPropertyOrTag("NoClear"))
		{
			if (!Combat)
			{
				return !IsCombatObject();
			}
			return true;
		}
		return false;
	}

	public int GetHostileWalkRadius(LargerFolk_GameObject who)
	{
		return GetHostileWalkRadiusEvent.GetFor(who, this);
	}

	public bool IsWalkableWall(LargerFolk_GameObject By, ref bool Uncacheable)
	{
		if (!IsWall())
		{
			return false;
		}
		if (!PhaseMatches(By))
		{
			return false;
		}
		if (IsCreature)
		{
			Uncacheable = true;
			if (!IsAlliedTowards(By))
			{
				return false;
			}
		}
		return true;
	}

	public bool IsWalkableWall(LargerFolk_GameObject By)
	{
		bool Uncacheable = false;
		return IsWalkableWall(By, ref Uncacheable);
	}

	public bool CanBePositionSwapped(LargerFolk_GameObject By = null)
	{
		if (IsPlayer())
		{
			return false;
		}
		if (!HasPropertyOrTag("Noswap"))
		{
			return true;
		}
		if (IsMobile())
		{
			return true;
		}
		return false;
	}

	public string GetBleedLiquid()
	{
		return GetPropertyOrTag("BleedLiquid", "blood-1000");
	}

	public int GetPowerLoadLevel()
	{
		return GetPowerLoadLevelEvent.GetFor(this);
	}

	public Cell MovingTo()
	{
		return Brain?.MovingTo();
	}

	public bool IsFleeing()
	{
		return Brain?.IsFleeing() ?? false;
	}

	public bool ShouldShunt()
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		if (!IsCombatObject(NoBrainOnly: true))
		{
			return false;
		}
		int i = 0;
		for (int count = currentCell.Objects.Count; i < count; i++)
		{
			LargerFolk_GameObject gameObject = currentCell.Objects[i];
			if (gameObject != this && gameObject.IsCombatObject(NoBrainOnly: true))
			{
				return true;
			}
		}
		return false;
	}

	public bool IsFactionMember(string Faction)
	{
		return Brain?.IsFactionMember(Faction) ?? false;
	}

	public bool IsSafeContainerForLiquid(string liquid)
	{
		return LiquidVolume.IsGameObjectSafeContainerForLiquid(this, liquid);
	}

	public void Indicate(bool AsThreat = false)
	{
		GetCurrentCell()?.Indicate(AsThreat);
	}

	public void EmitMessage(string Message, LargerFolk_GameObject Object = null, string Color = null, bool UsePopup = false)
	{
		if (Message.IsNullOrEmpty() || !IsVisible())
		{
			return;
		}
		string text = GameText.VariableReplace(Message, this, Object, UsePopup);
		if (!text.IsNullOrEmpty())
		{
			if (UsePopup)
			{
				Popup.Show(text.Color(Color));
			}
			else
			{
				MessageQueue.AddPlayerMessage(text, Color);
			}
		}
	}

	public void PlayWorldOrUISound(string Clip, float? Volume = null)
	{
		if (IsPlayer())
		{
			SoundManager.PlayUISound(Clip, Volume ?? 1f);
		}
		else
		{
			PlayWorldSound(Clip, Volume ?? 0.5f);
		}
	}

	public void PlayWorldSound(string Clip, float Volume = 0.5f, float PitchVariance = 0f, bool Combat = false, float Delay = 0f, float Pitch = 1f, float CostMultiplier = 1f, int CostMaximum = int.MaxValue)
	{
		if (!Clip.IsNullOrEmpty())
		{
			(Holder ?? this).GetCurrentCell()?.PlayWorldSound(Clip, Volume, PitchVariance, Combat, Delay, Pitch, CostMultiplier, CostMaximum);
		}
	}

	public string GetLiquidColor(string Default = "K")
	{
		return LiquidVolume?.GetPrimaryLiquidColor() ?? Default;
	}

	public string GetTinkeringBlueprint()
	{
		return GetPart<TinkerItem>()?.ActiveBlueprint ?? Blueprint;
	}

	public bool AttackDirection(string Direction, bool EnableSwoop = true)
	{
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		Cell cellFromDirection = currentCell.GetCellFromDirection(Direction, BuiltOnly: false);
		if (cellFromDirection == null)
		{
			return false;
		}
		if (EnableSwoop && IsFlying && cellFromDirection.GetCombatTarget(this) == null && cellFromDirection.GetCombatTarget(this, IgnoreFlight: true) != null)
		{
			if (!IsActivatedAbilityVoluntarilyUsable(Flight.SWOOP_ATTACK_COMMAND_NAME))
			{
				return false;
			}
			return Combat.SwoopAttack(this, Direction);
		}
		return Combat.AttackDirection(this, Direction);
	}

	public bool HasBeenRead(LargerFolk_GameObject By = null)
	{
		return HasBeenReadEvent.Check(this, By ?? XRL.The.Player);
	}

	public bool MakeNonflammable()
	{
		if (!HasTag("Creature") && Physics != null)
		{
			Physics.FlameTemperature = 99999;
			return true;
		}
		return false;
	}

	public bool MakeImperviousToHeat()
	{
		if (!HasTag("Creature") && Physics != null)
		{
			Physics.FlameTemperature = 99999;
			Physics.VaporTemperature = 99999;
			return true;
		}
		return false;
	}

	public bool CheckHP(int? CurrentHP = null, int? PreviousHP = null, int? MaxHP = null, bool Preregistered = false)
	{
		return Physics?.CheckHP(CurrentHP, PreviousHP, MaxHP, Preregistered) ?? false;
	}

	public bool WillCheckHP(bool? Registering = null)
	{
		if (Registering == true)
		{
			return ModIntProperty("WillCheckHP", 1) > 0;
		}
		if (Registering == false)
		{
			SetIntProperty("WillCheckHP", 0);
			return true;
		}
		return GetIntProperty("WillCheckHP") > 0;
	}

	public bool NeedsRecharge()
	{
		foreach (IRechargeable item in GetPartsDescendedFrom<IRechargeable>())
		{
			if (item.CanBeRecharged() && item.GetRechargeAmount() > 0)
			{
				return true;
			}
		}
		return false;
	}

	public bool CanApplyEffect(string Name, int Duration = 0, string EventName = null)
	{
		if (!FireEvent(EventName ?? ("CanApply" + Name)))
		{
			return false;
		}
		if (!CanApplyEffectEvent.Check(this, Name, Duration))
		{
			return false;
		}
		return true;
	}

	public bool IsEquipmentSolelyForSlotType(string Type)
	{
		string usesSlots = UsesSlots;
		if (!usesSlots.IsNullOrEmpty())
		{
			List<string> list = usesSlots.CachedCommaExpansion();
			int i = 0;
			for (int count = list.Count; i < count; i++)
			{
				if (list[i] != Type)
				{
					return false;
				}
			}
			return true;
		}
		if (TryGetPart<Armor>(out var Part) && Part.WornOn == Type)
		{
			return true;
		}
		if (TryGetPart<XRL.World.Parts.Shield>(out var Part2) && Part2.WornOn == Type)
		{
			return true;
		}
		return Type == "Hand";
	}

	public bool IsEntirelyFloating()
	{
		return IsEquipmentSolelyForSlotType("Floating Nearby");
	}

	public void ReplaceDisplayName(GetDisplayNameEvent E)
	{
		GetDisplayNameEvent.ReplaceFor(this, E, DisplayNameBase);
	}

	public bool IsSizeCompatibleWithEquipper(LargerFolk_GameObject Equipper)
	{
		if (Equipper.IsGiganticCreature)
		{
			if (!IsGiganticEquipment && HasPropertyOrTag("GiganticEquippable") && !IsNatural() && !IsEntirelyFloating())
			{
				return false;
			}
		}
		else if (IsGiganticEquipment && !IsNatural() && !IsEquipmentSolelyForSlotType("Hand") && !IsEquipmentSolelyForSlotType("Missile Weapon") && !IsEntirelyFloating())
		{
			return false;
		}
		return true;
	}

	public bool EquipAsDefaultBehavior()
	{
		if (!IsNatural())
		{
			return false;
		}
		if (HasPart<Armor>() && !HasTagOrProperty("AllowArmorDefaultBehavior"))
		{
			return false;
		}
		if (HasPart<XRL.World.Parts.Shield>() && !HasTagOrProperty("AllowShieldDefaultBehavior"))
		{
			return false;
		}
		if (HasTagOrProperty("NoDefaultBehavior"))
		{
			return false;
		}
		return true;
	}

	public void Understand(LargerFolk_GameObject Object)
	{
		if (IsPlayer())
		{
			Object.MakeUnderstood();
		}
	}

	public void CheckDefaultBehaviorGiganticness(LargerFolk_GameObject Equipper)
	{
		if (Validate(ref Equipper) && Equipper.IsGiganticCreature && !IsGiganticEquipment)
		{
			IsGiganticEquipment = true;
			ModIntProperty("ModGiganticNoDisplayName", 1, RemoveIfZero: true);
		}
	}

	public bool IsInteresting()
	{
		return GetPointsOfInterestEvent.Check(this, XRL.The.Player);
	}

	public int GetSkillAndPowerCountInSkill(string Skill)
	{
		if (Skill.IsNullOrEmpty())
		{
			return 0;
		}
		int num = 0;
		if (HasSkill(Skill))
		{
			num++;
		}
		SkillEntry skillIfExists = SkillFactory.Factory.GetSkillIfExists(Skill);
		if (skillIfExists != null)
		{
			foreach (string key in skillIfExists.Powers.Keys)
			{
				if (HasSkill(key))
				{
					num++;
				}
			}
		}
		return num;
	}

	public bool IsEMPSensitive()
	{
		return !TransparentToEMPEvent.Check(this);
	}

	public bool IsAffliction()
	{
		return IsAfflictionEvent.Check(this);
	}

	public string GetNativeRegion()
	{
		return GetPropertyOrTag("NativeRegion");
	}

	public bool ShouldAttackToReachTarget(LargerFolk_GameObject Object, LargerFolk_GameObject Target = null)
	{
		return ShouldAttackToReachTargetEvent.Check(this, Object, Target ?? this.Target);
	}

	public int SortVs(LargerFolk_GameObject Object, Dictionary<GameObject, string> CategoryCache = null, bool UseCategory = true, bool UseDisplayName = true, bool UseEvent = true, bool UseRenderLayer = false, List<LargerFolk_GameObject> Items = null)
	{
		string value = null;
		string value2 = null;
		if (UseCategory)
		{
			if (CategoryCache == null || !CategoryCache.TryGetValue(this, out value))
			{
				value = GetInventoryCategory();
				CategoryCache?.Add(this, value);
			}
			if (CategoryCache == null || !CategoryCache.TryGetValue(Object, out value2))
			{
				value2 = Object.GetInventoryCategory();
				CategoryCache?.Add(Object, value2);
			}
			int num = string.Compare(value ?? "", value2 ?? "", ignoreCase: true);
			if (num != 0)
			{
				return num;
			}
		}
		if (UseRenderLayer)
		{
			int num2 = (Object.Render?.RenderLayer ?? 0).CompareTo(Render?.RenderLayer ?? 0);
			if (num2 != 0)
			{
				return num2;
			}
		}
		if (UseDisplayName)
		{
			int num3 = string.Compare(GetCachedDisplayNameForSort(), Object.GetCachedDisplayNameForSort(), ignoreCase: true);
			if (num3 != 0)
			{
				return num3;
			}
		}
		if (UseEvent)
		{
			int @for = GetGameObjectSortEvent.GetFor(this, Object, value ?? GetInventoryCategory(), value2 ?? Object.GetInventoryCategory());
			if (@for != 0)
			{
				return @for;
			}
		}
		return Items?.IndexOf(this).CompareTo(Items.IndexOf(Object)) ?? 0;
	}

	public int GetModificationCount()
	{
		int num = 0;
		foreach (IPart parts in PartsList)
		{
			if (parts is IModification)
			{
				num++;
			}
		}
		return num;
	}

	public int GetModificationSlotsUsed()
	{
		int num = 0;
		foreach (IPart parts in PartsList)
		{
			if (parts is IModification modification)
			{
				num += modification.GetModificationSlotUsage();
			}
		}
		return num;
	}

	public bool IsInLoveWith(LargerFolk_GameObject Subject)
	{
		if (_Effects != null)
		{
			foreach (Effect effect in Effects)
			{
				if (effect is Lovesick lovesick && lovesick.Beauty == Subject)
				{
					return true;
				}
			}
		}
		return false;
	}

	public string GetDescriptiveCategory()
	{
		if (!Understood())
		{
			return "artifact";
		}
		if (IsCreature)
		{
			return "creature";
		}
		if (HasPart<CyberneticsBaseItem>())
		{
			return "implant";
		}
		if (HasPart<MissileWeapon>() || HasPart<ThrownWeapon>())
		{
			return "weapon";
		}
		if (TryGetPart<MeleeWeapon>(out var Part) && !Part.IsImprovisedWeapon())
		{
			return "weapon";
		}
		switch (Scanning.GetScanTypeFor(this))
		{
		case Scanning.Scan.Tech:
			return "artifact";
		case Scanning.Scan.Bio:
			return "organism";
		default:
			if (HasPart<Armor>() && !IsPluralIfKnown)
			{
				return "armor";
			}
			if (HasPart<XRL.World.Parts.Shield>() && !IsPluralIfKnown)
			{
				return "shield";
			}
			if (!Takeable)
			{
				return "object";
			}
			return "item";
		}
	}

	public bool WithinSensePsychicRange(Cell Cell)
	{
		if (Cell == null)
		{
			return false;
		}
		SensePsychic part = GetPart<SensePsychic>();
		if (part == null)
		{
			return false;
		}
		return DistanceTo(Cell) <= part.Radius;
	}

	public bool WithinSensePsychicRange(LargerFolk_GameObject Object)
	{
		return WithinSensePsychicRange(Object?.CurrentCell);
	}

	public bool CanBeUnequipped(LargerFolk_GameObject Equipper = null, LargerFolk_GameObject Actor = null, bool Forced = false, bool SemiForced = false)
	{
		if (Equipper == null)
		{
			Equipper = Equipped;
		}
		if (Actor == null)
		{
			Actor = Equipper;
		}
		return CanBeUnequippedEvent.Check(this, Equipper, Actor, Forced, SemiForced);
	}

	public bool BeginBeingUnequipped(ref string FailureMessage, ref bool DestroyOnUnequipDeclined, LargerFolk_GameObject Equipper = null, LargerFolk_GameObject Actor = null, BodyPart BodyPart = null, bool Silent = false, bool Forced = false, bool SemiForced = false, int AutoEquipTry = 0)
	{
		if (Equipper == null)
		{
			Equipper = Equipped;
		}
		if (Actor == null)
		{
			Actor = Equipper;
		}
		return BeginBeingUnequippedEvent.Check(this, ref FailureMessage, ref DestroyOnUnequipDeclined, Equipper, Actor, BodyPart, Silent, Forced, SemiForced, AutoEquipTry);
	}

	public bool BeginBeingUnequipped(LargerFolk_GameObject Equipper = null, LargerFolk_GameObject Actor = null, BodyPart BodyPart = null, bool Silent = false, bool Forced = false, bool SemiForced = false, int AutoEquipTry = 0)
	{
		string FailureMessage = null;
		bool DestroyOnUnequipDeclined = false;
		return BeginBeingUnequipped(ref FailureMessage, ref DestroyOnUnequipDeclined, Equipper, Actor, BodyPart, Silent, Forced, SemiForced, AutoEquipTry);
	}

	public bool HasAdjacentAllyOf(LargerFolk_GameObject Actor)
	{
		if (!Validate(ref Actor))
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null)
		{
			return false;
		}
		int i = 0;
		for (int count = currentCell.Objects.Count; i < count; i++)
		{
			LargerFolk_GameObject gameObject = currentCell.Objects[i];
			if (gameObject != Actor && gameObject != this && gameObject.IsCombatObject() && Actor.IsAlliedTowards(gameObject))
			{
				return true;
			}
		}
		foreach (Cell localAdjacentCell in currentCell.GetLocalAdjacentCells())
		{
			int j = 0;
			for (int count2 = localAdjacentCell.Objects.Count; j < count2; j++)
			{
				GameObject gameObject2 = localAdjacentCell.Objects[j];
				if (gameObject2 != Actor && gameObject2.IsCombatObject() && Actor.IsAlliedTowards(gameObject2))
				{
					return true;
				}
			}
		}
		return false;
	}

	public static bool PerformReplaceCell(LargerFolk_GameObject Actor)
	{
		if (!Validate(ref Actor))
		{
			return false;
		}
		GetReplaceCellInteractionsEvent @for = GetReplaceCellInteractionsEvent.GetFor(Actor);
		if (@for.Objects == null || @for.Objects.Count == 0)
		{
			return Actor.Fail("You have no devices that use energy cells.");
		}
		GameObject Object = Popup.PickGameObject("Choose an item to slot a cell into.", @for.Objects, AllowEscape: true, ShowContext: true);
		if (!Validate(ref Object))
		{
			return false;
		}
		return InventoryActionEvent.Check(Object, Actor, Object, @for.Interactions[Object]);
	}

	public string GetCreatureType(bool Capitalized = false, bool SkipSetting = false)
	{
		string text = (SkipSetting ? null : GetPropertyOrTag("CreatureType")) ?? (HasTagOrProperty("UseExtendedDisplayNameForCreatureType") ? GetReferenceDisplayName(int.MaxValue, null, "CreatureType", NoColor: false, Stripped: true, ColorOnly: false, WithoutTitles: true) : (HasPropertyOrTag("NoAnimatedNamePrefix") ? DisplayNameOnlyDirectAndStripped : (HasPart<AnimatedObject>() ? ("animated " + DisplayNameOnlyDirectAndStripped) : ShortDisplayNameWithoutTitlesStripped)));
		if (Capitalized)
		{
			text = Grammar.MakeTitleCase(text);
		}
		return text;
	}

	public string GiveProperName(string Name = null, bool Force = false, string Special = null, bool SpecialFaildown = false, bool? HasHonorific = null, bool? HasEpithet = null, Dictionary<string, string> NamingContext = null, Func<string, string> Process = null)
	{
		if (!Force && HasProperName)
		{
			return null;
		}
		if (!HasPropertyOrTag("CreatureType"))
		{
			SetStringProperty("CreatureType", GetCreatureType(Capitalized: false, SkipSetting: true));
		}
		if (Name.IsNullOrEmpty())
		{
			bool specialFaildown = SpecialFaildown;
			Name = NameMaker.MakeName(this, null, null, null, null, null, null, null, null, null, Special, null, NamingContext, FailureOkay: false, specialFaildown, HasHonorific, HasEpithet);
		}
		if (Process != null)
		{
			Name = Process(Name);
		}
		DisplayName = Name;
		HasProperName = true;
		if (IsOriginalPlayerBody() && XRL.The.Game != null)
		{
			XRL.The.Game.PlayerName = Name;
		}
		return Name;
	}

	public string GetFactionRank(string Faction)
	{
		if (Faction.IsNullOrEmpty())
		{
			return null;
		}
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.GetFactionRank(Faction);
		}
		return GetFactionRankEvent.GetFor(this, Faction);
	}

	public int GetFactionStanding(string Faction)
	{
		if (Faction.IsNullOrEmpty())
		{
			return 0;
		}
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.GetFactionStanding(Faction);
		}
		return XRL.World.Faction.GetRankStanding(Faction, GetFactionRank(Faction));
	}

	public bool IsBelowFactionRank(string Faction, string Rank)
	{
		if (Faction.IsNullOrEmpty())
		{
			return true;
		}
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.IsBelowRank(Faction, Rank);
		}
		string factionRank = GetFactionRank(Faction);
		if (factionRank == null)
		{
			return true;
		}
		if (factionRank == Rank)
		{
			return false;
		}
		int rankStanding = XRL.World.Faction.GetRankStanding(Faction, factionRank);
		int rankStanding2 = XRL.World.Faction.GetRankStanding(Faction, Rank);
		return rankStanding < rankStanding2;
	}

	public bool IsAtLeastFactionRank(string Faction, string Rank)
	{
		return !IsBelowFactionRank(Faction, Rank);
	}

	public bool IsBelowFactionStanding(string Faction, int Standing)
	{
		if (Faction.IsNullOrEmpty())
		{
			return true;
		}
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.IsBelowStanding(Faction, Standing);
		}
		return GetFactionStanding(Faction) < Standing;
	}

	public bool IsAtLeastFactionStanding(string Faction, int Standing)
	{
		return !IsBelowFactionStanding(Faction, Standing);
	}

	public bool PromoteIfBelow(string Faction, string Rank, bool Message = true, bool IgnoreVisibility = false, bool Capitalize = true)
	{
		if (Faction.IsNullOrEmpty())
		{
			return false;
		}
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.PromoteIfBelow(Faction, Rank, Message, Capitalize);
		}
		return RequirePart<FactionRank>().PromoteIfBelow(Faction, Rank, Message, IgnoreVisibility, Capitalize);
	}

	public bool HasWorshipped(string Faction, int WithinTurns = 0)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasWorshipped(Faction, WithinTurns);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasWorshipped(Faction, WithinTurns);
		}
		return false;
	}

	public bool HasWorshipped(Worshippable Being, int WithinTurns = 0)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasWorshipped(Being, WithinTurns);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasWorshipped(Being, WithinTurns);
		}
		return false;
	}

	public bool HasWorshippedInName(string Name, string Faction = null, int WithinTurns = 0)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasWorshippedInName(Name, Faction, WithinTurns);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasWorshippedInName(Name, Faction, WithinTurns);
		}
		return false;
	}

	public bool HasWorshippedBySpec(string Spec, string ContextFaction = null)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasWorshippedBySpec(Spec, ContextFaction);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasWorshippedBySpec(Spec, ContextFaction);
		}
		return false;
	}

	public List<WorshipTracking> GetWorshipTracking()
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.GetWorshipTracking();
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.GetWorshipTracking();
		}
		return null;
	}

	public bool HasBlasphemed(string Faction, int WithinTurns = 0)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasBlasphemed(Faction, WithinTurns);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasBlasphemed(Faction, WithinTurns);
		}
		return false;
	}

	public bool HasBlasphemed(Worshippable Being, int WithinTurns = 0)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasBlasphemed(Being, WithinTurns);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasBlasphemed(Being, WithinTurns);
		}
		return false;
	}

	public bool HasBlasphemedAgainstName(string Name, string Faction = null, int WithinTurns = 0)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasBlasphemedAgainstName(Name, Faction, WithinTurns);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasBlasphemedAgainstName(Name, Faction, WithinTurns);
		}
		return false;
	}

	public bool HasBlasphemedBySpec(string Spec, string ContextFaction = null)
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.HasBlasphemedBySpec(Spec, ContextFaction);
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.HasBlasphemedBySpec(Spec, ContextFaction);
		}
		return false;
	}

	public List<WorshipTracking> GetBlasphemyTracking()
	{
		if (IsPlayer())
		{
			return XRL.The.Game.PlayerReputation.GetBlasphemyTracking();
		}
		if (TryGetPart<SacralTracking>(out var Part))
		{
			return Part.GetBlasphemyTracking();
		}
		return null;
	}

	public void GetCompanions(List<LargerFolk_GameObject> Store)
	{
		ZoneManager zoneManager = XRL.The.ZoneManager;
		Zone activeZone = zoneManager.ActiveZone;
		activeZone?.FindObjects(Store, IsPlayer() ? new Predicate<LargerFolk_GameObject>(ObjectIsPlayerLed) : ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => o.IsLedBy(this))));
		foreach (Zone value in zoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				value.FindObjects(Store, IsPlayer() ? new Predicate<LargerFolk_GameObject>(ObjectIsPlayerLed) : ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => o.IsLedBy(this))));
			}
		}
	}

	public bool AnyCompanion(int MaxDistance = 0, Predicate<LargerFolk_GameObject> Filter = null)
	{
		ZoneManager zoneManager = XRL.The.ZoneManager;
		Zone activeZone = zoneManager.ActiveZone;
		Predicate<LargerFolk_GameObject> leadFilter = (IsPlayer() ? new Predicate<LargerFolk_GameObject>(ObjectIsPlayerLed) : ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => o.IsLedBy(this))));
		Predicate<LargerFolk_GameObject> distanceFilter = ((MaxDistance == 0) ? ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => true)) : ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => DistanceTo(o) <= MaxDistance)));
		if (activeZone != null && activeZone.HasObject((LargerFolk_GameObject o) => leadFilter(o) && distanceFilter(o) && Filter(o)))
		{
			return true;
		}
		foreach (Zone value in zoneManager.CachedZones.Values)
		{
			if (value != activeZone && value.HasObject((LargerFolk_GameObject o) => leadFilter(o) && distanceFilter(o) && Filter(o)))
			{
				return true;
			}
		}
		return false;
	}

	public void GetCompanions(List<LargerFolk_GameObject> Store, int MaxDistance = 0, Predicate<LargerFolk_GameObject> Filter = null)
	{
		ZoneManager zoneManager = XRL.The.ZoneManager;
		Zone activeZone = zoneManager.ActiveZone;
		activeZone?.FindObjects(Store, IsPlayer() ? new Predicate<LargerFolk_GameObject>(ObjectIsPlayerLed) : ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => o.IsLedBy(this))));
		foreach (Zone value in zoneManager.CachedZones.Values)
		{
			if (value != activeZone)
			{
				value.FindObjects(Store, IsPlayer() ? new Predicate<LargerFolk_GameObject>(ObjectIsPlayerLed) : ((Predicate<LargerFolk_GameObject>)((LargerFolk_GameObject o) => o.IsLedBy(this))));
			}
		}
		if (MaxDistance > 0)
		{
			for (int num = Store.Count - 1; num >= 0; num--)
			{
				if (DistanceTo(Store[num]) > MaxDistance)
				{
					Store.RemoveAt(num);
				}
			}
		}
		if (Filter == null)
		{
			return;
		}
		for (int num2 = Store.Count - 1; num2 >= 0; num2--)
		{
			if (!Filter(Store[num2]))
			{
				Store.RemoveAt(num2);
			}
		}
	}

	public List<LargerFolk_GameObject> GetCompanions()
	{
		List<LargerFolk_GameObject> list = new List<LargerFolk_GameObject>();
		GetCompanions(list);
		return list;
	}

	public List<LargerFolk_GameObject> GetCompanions(int MaxDistance = 0, Predicate<LargerFolk_GameObject> Filter = null)
	{
		List<LargerFolk_GameObject> list = new List<LargerFolk_GameObject>();
		GetCompanions(list, MaxDistance, Filter);
		return list;
	}

	public List<LargerFolk_GameObject> GetCompanionsReadonly()
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetCompanions(list);
		return list;
	}

	public List<LargerFolk_GameObject> GetCompanionsReadonly(int MaxDistance = 0, Predicate<LargerFolk_GameObject> Filter = null)
	{
		List<LargerFolk_GameObject> list = Event.NewGameObjectList();
		GetCompanions(list, MaxDistance, Filter);
		return list;
	}

	private static bool ObjectIsPlayerLed(LargerFolk_GameObject Object)
	{
		return Object.IsPlayerLed();
	}

	public bool HealsNaturally()
	{
		return HealsNaturallyEvent.Check(this);
	}

	public bool CanBeReplicated(LargerFolk_GameObject Actor, string Context = null, bool Temporary = false)
	{
		return CanBeReplicatedEvent.Check(this, Actor, Context, Temporary);
	}

	public void WantToReequip()
	{
		if (!IsPlayer())
		{
			Brain?.WantToReequip();
		}
	}

	public int CheckStacks()
	{
		return Inventory?.CheckStacks() ?? 0;
	}

	public void Pool()
	{
		if ((Flags & 0x20) != 0)
		{
			MetricsManager.LogError("!POOLEDOBJECT Attempting to pool a presently serialized object: '" + DebugName + "'.");
			return;
		}
		if ((Flags & 0x10) != 0)
		{
			MetricsManager.LogError("Attempting to pool object multiple times.");
			return;
		}
		if (IsPlayer() && XRL.The.Game.Running)
		{
			MetricsManager.LogError("Attempting to pool player.");
			return;
		}
		XRL.The.ActionManager?.RemoveActiveObject(this);
		Clear();
		Blueprint = "*PooledObject";
		Flags |= 16;
		GameObjectFactory.ObjectPool.Enqueue(this);
	}

	public static LargerFolk_GameObject Get()
	{
		if (!GameObjectFactory.ObjectPool.TryDequeue(out var result))
		{
			return new GameObject();
		}
		if (result == null)
		{
			XRLCore.LogError("Got null object from gameObjectPool");
			return new GameObject();
		}
		result.Flags = 0;
		return result;
	}

	[Obsolete("Use FlushTransientCache")]
	public void FlushWantTurnTickCache()
	{
		FlushTransientCache();
	}

	public bool ShouldShowInNearbyItemsList()
	{
		if (HasTagOrProperty("HideInNearbyItemsList"))
		{
			return false;
		}
		Cell currentCell = CurrentCell;
		if (currentCell == null || !currentCell.IsSolid())
		{
			return IsVisible();
		}
		return CanInteractInCellWithSolid(XRL.The.Player);
	}

	public void Clear()
	{
		if (RegisteredEvents != null)
		{
			RegisteredEvents.Dispose();
			RegisteredEvents = null;
		}
		ClearParts();
		ClearEffects();
		_BaseID = 0;
		Flags = 0;
		Blueprint = "Object";
		_BlueprintCache = null;
		Stacker = null;
		Energy = null;
		Render = null;
		Physics = null;
		Brain = null;
		Body = null;
		LiquidVolume = null;
		Inventory = null;
		Abilities = null;
		PronounSetName = null;
		GenderName = null;
		DeepCopyInventoryObjectMap = null;
		_CachedDisplayNameForSort = null;
		CarriedWeightCache = -1;
		MaxCarriedWeightCache = -1;
		Dying = false;
		Statistics.Clear();
		FlushTransientCache();
		ResetNameCache();
		if (_IntProperty != null)
		{
			_IntProperty.Clear();
		}
		if (_Property != null)
		{
			_Property.Clear();
		}
	}

	public void ClearParts()
	{
		RegisteredPartEvents?.Clear();
		PartRack partsList = PartsList;
		for (int num = partsList.Count - 1; num >= 0; num--)
		{
			IPart part = partsList[num];
			part.ApplyUnregistrar(this);
			part.Reset();
			part.Pool?.Return(part);
		}
		partsList.Clear();
		PartsCascade = 0;
		if (!RegisteredPartEvents.IsNullOrEmpty())
		{
			MetricsManager.LogError($"GamePoolError::{DebugName} still has {RegisteredPartEvents.Count} part registrations after unregistering:\n" + string.Join(", ", RegisteredPartEvents.Keys.Take(5)));
			RegisteredPartEvents.Clear();
		}
	}

	public void ClearEffects()
	{
		RegisteredEffectEvents?.Clear();
		EffectRack effects = _Effects;
		if (effects != null)
		{
			for (int num = effects.Count - 1; num >= 0; num--)
			{
				effects[num].ApplyUnregistrar(this);
				effects[num]._Object = null;
			}
			effects.Clear();
		}
		if (!RegisteredEffectEvents.IsNullOrEmpty())
		{
			MetricsManager.LogError($"GamePoolError::{DebugName} still has {RegisteredEffectEvents.Count} effect registrations after unregistering:\n" + string.Join(", ", RegisteredEffectEvents.Keys.Take(5)));
			RegisteredEffectEvents.Clear();
		}
	}

	public string GetFlagsDebugString()
	{
		StringBuilder stringBuilder = new StringBuilder();
		if ((Flags & 1) != 0)
		{
			stringBuilder.Append("FLAG_PRONOUNS_KNOWN").Append(" ");
		}
		if ((Flags & 2) != 0)
		{
			stringBuilder.Append("FLAG_COMBAT").Append(" ");
		}
		if ((Flags & 4) != 0)
		{
			stringBuilder.Append("FLAG_GRAVEYARD").Append(" ");
		}
		if ((Flags & 8) != 0)
		{
			stringBuilder.Append("FLAG_TEMPORARY").Append(" ");
		}
		if ((Flags & 0x10) != 0)
		{
			stringBuilder.Append("FLAG_POOLED").Append(" ");
		}
		if ((Flags & 0x20) != 0)
		{
			stringBuilder.Append("FLAG_SERIALIZED").Append(" ");
		}
		return stringBuilder.ToString();
	}

	public void SetPronounSetKnown(bool Value)
	{
		Flags.SetBit(1, Value);
	}

	public bool IsCombatObject()
	{
		if ((Flags & 2) != 0 || Brain != null)
		{
			return !HasTagOrProperty("NoCombat");
		}
		return false;
	}

	public bool IsCombatObject(bool NoBrainOnly)
	{
		if (HasTagOrProperty("NoCombat"))
		{
			return false;
		}
		if ((Flags & 2) != 0)
		{
			return true;
		}
		if (Brain == null)
		{
			return false;
		}
		return !NoBrainOnly;
	}

	public void FlushTransientCache()
	{
		TransientCache = 0;
	}

	public bool IsMerchant()
	{
		if (!HasTagOrProperty("Merchant"))
		{
			return HasPart<GenericInventoryRestocker>();
		}
		return true;
	}

	public void Save(SerializationWriter Writer)
	{
		Writer.WriteOptimized(_BaseID);
		Writer.WriteOptimized(Flags);
		Writer.WriteOptimized(Blueprint);
		Writer.WriteOptimized(GenderName);
		Writer.WriteOptimized(PronounSetName);
		if (_Property.IsNullOrEmpty())
		{
			Writer.WriteOptimized(0);
		}
		else
		{
			Writer.WriteOptimized(_Property.Count);
			foreach (KeyValuePair<string, string> item in _Property)
			{
				Writer.WriteOptimized(item.Key);
				Writer.WriteOptimized(item.Value);
			}
		}
		if (_IntProperty.IsNullOrEmpty())
		{
			Writer.WriteOptimized(0);
		}
		else
		{
			Writer.WriteOptimized(_IntProperty.Count);
			foreach (KeyValuePair<string, int> item2 in _IntProperty)
			{
				Writer.WriteOptimized(item2.Key);
				Writer.WriteOptimized(item2.Value);
			}
		}
		Writer.WriteOptimized(Statistics.Count);
		foreach (KeyValuePair<string, Statistic> statistic in Statistics)
		{
			statistic.Value.Save(Writer);
		}
		if (_Effects.IsNullOrEmpty())
		{
			Writer.WriteOptimized(0);
		}
		else
		{
			Writer.WriteOptimized(_Effects.Count);
			foreach (Effect effect in _Effects)
			{
				Effect.Save(effect, Writer);
			}
		}
		if (PartsList.IsNullOrEmpty())
		{
			Writer.WriteOptimized(0);
		}
		else
		{
			Writer.WriteOptimized(PartsList.Count);
			for (int i = 0; i < PartsList.Count; i++)
			{
				IPart.Save(PartsList[i], Writer);
			}
		}
		Writer.Write(RegisteredEvents);
		if (RegisteredEffectEvents.IsNullOrEmpty())
		{
			Writer.WriteOptimized(0);
		}
		else
		{
			Writer.WriteOptimized(RegisteredEffectEvents.Count);
			foreach (KeyValuePair<string, List<Effect>> registeredEffectEvent in RegisteredEffectEvents)
			{
				Writer.WriteOptimized(registeredEffectEvent.Key);
				List<Effect> value = registeredEffectEvent.Value;
				int count = value.Count;
				Writer.WriteOptimized(count);
				for (int j = 0; j < count; j++)
				{
					Writer.Write(value[j].ID);
				}
			}
		}
		if (RegisteredPartEvents.IsNullOrEmpty())
		{
			Writer.WriteOptimized(0);
			return;
		}
		int num = RegisteredPartEvents.Count;
		foreach (KeyValuePair<string, List<IPart>> registeredPartEvent in RegisteredPartEvents)
		{
			List<IPart> value2 = registeredPartEvent.Value;
			int num2 = registeredPartEvent.Value.Count;
			for (int num3 = num2 - 1; num3 >= 0; num3--)
			{
				if (value2[num3].AllowStaticRegistration())
				{
					num2--;
				}
			}
			if (num2 <= 0)
			{
				num--;
			}
		}
		Writer.WriteOptimized(num);
		foreach (KeyValuePair<string, List<IPart>> registeredPartEvent2 in RegisteredPartEvents)
		{
			List<IPart> value3 = registeredPartEvent2.Value;
			int count2 = value3.Count;
			int num4 = count2;
			for (int num5 = count2 - 1; num5 >= 0; num5--)
			{
				if (value3[num5].AllowStaticRegistration())
				{
					num4--;
				}
			}
			if (num4 <= 0)
			{
				continue;
			}
			Writer.WriteOptimized(registeredPartEvent2.Key);
			Writer.WriteOptimized(num4);
			for (int k = 0; k < count2; k++)
			{
				IPart part = value3[k];
				if (!part.AllowStaticRegistration())
				{
					if (part._ParentObject == this)
					{
						Writer.Write((byte)0);
						Writer.WriteTokenized(part.GetType());
					}
					else
					{
						Writer.Write((byte)1);
						Writer.WriteTokenized(part.GetType());
						Writer.WriteGameObject(part._ParentObject);
					}
				}
			}
		}
	}

	public void Load(SerializationReader Reader)
	{
		_BaseID = Reader.ReadOptimizedInt32();
		Flags = Reader.ReadOptimizedInt32();
		Blueprint = Reader.ReadOptimizedString();
		GenderName = Reader.ReadOptimizedString();
		PronounSetName = Reader.ReadOptimizedString();
		int num = Reader.ReadOptimizedInt32();
		if (num > 0)
		{
			_Property = new Dictionary<string, string>(num);
			for (int i = 0; i < num; i++)
			{
				_Property.Add(Reader.ReadOptimizedString(), Reader.ReadOptimizedString());
			}
		}
		num = Reader.ReadOptimizedInt32();
		if (num > 0)
		{
			_IntProperty = new Dictionary<string, int>(num);
			for (int j = 0; j < num; j++)
			{
				_IntProperty.Add(Reader.ReadOptimizedString(), Reader.ReadOptimizedInt32());
			}
		}
		object obj = null;
		num = Reader.ReadOptimizedInt32();
		for (int k = 0; k < num; k++)
		{
			Statistic statistic = Statistic.Load(Reader, this);
			Statistics.Add(statistic.Name, statistic);
			obj = statistic;
		}
		Energy = Statistics.GetValue("Energy");
		RegisteredEffectEvents?.Clear();
		num = Reader.ReadOptimizedInt32();
		if (num > 0)
		{
			Rack<Effect> effects = Effects;
			effects.EnsureCapacity(num);
			for (int l = 0; l < num; l++)
			{
				try
				{
					Effect effect = Effect.Load(this, Reader);
					if (effect != null)
					{
						effects.Add(effect);
						obj = effect;
					}
				}
				catch (Exception ex)
				{
					if (obj != null)
					{
						ex.Data["LastType"] = obj.GetType();
					}
					ExceptionDispatchInfo.Throw(ex);
				}
			}
		}
		num = Reader.ReadOptimizedInt32();
		if (num > 0)
		{
			PartsList.EnsureCapacity(num);
			for (int m = 0; m < num; m++)
			{
				try
				{
					IPart part = IPart.Load(this, Reader);
					if (part != null)
					{
						AddPartInternals(part, DoRegistration: false, Initial: false, Creation: true);
						obj = part;
					}
				}
				catch (Exception ex2)
				{
					if (obj != null)
					{
						ex2.Data["LastType"] = obj.GetType();
					}
					ExceptionDispatchInfo.Throw(ex2);
				}
			}
		}
		RegisteredEvents = Reader.ReadEventRegistry();
		num = Reader.ReadOptimizedInt32();
		if (num > 0)
		{
			if (RegisteredEffectEvents == null)
			{
				RegisteredEffectEvents = new Dictionary<string, List<Effect>>(num);
			}
			RegisteredEffectEvents.EnsureCapacity(num);
			for (int n = 0; n < num; n++)
			{
				string key = Reader.ReadOptimizedString();
				int num2 = Reader.ReadOptimizedInt32();
				List<Effect> list = new List<Effect>(num2);
				RegisteredEffectEvents[key] = list;
				for (int num3 = 0; num3 < num2; num3++)
				{
					Effect effect2 = GetEffect(Reader.ReadGuid());
					if (effect2 != null)
					{
						list.Add(effect2);
					}
				}
			}
		}
		num = Reader.ReadOptimizedInt32();
		if (num > 0)
		{
			if (RegisteredPartEvents == null)
			{
				RegisteredPartEvents = new Dictionary<string, List<IPart>>(num);
			}
			RegisteredPartEvents.EnsureCapacity(num);
			for (int num4 = 0; num4 < num; num4++)
			{
				string text = Reader.ReadOptimizedString();
				int num5 = Reader.ReadOptimizedInt32();
				List<IPart> list2 = new List<IPart>(num5);
				RegisteredPartEvents[text] = list2;
				for (int num6 = 0; num6 < num5; num6++)
				{
					bool num7 = Reader.ReadByte() == 1;
					Type type = Reader.ReadTokenizedType();
					LargerFolk_GameObject gameObject = this;
					if (num7)
					{
						GameObject gameObject2 = Reader.ReadGameObject();
						if (gameObject2 == null)
						{
							MetricsManager.LogError(DebugName + "." + text + ": External parent of part '" + type?.FullName + "' is null, skipping.");
							continue;
						}
						if (gameObject2.PartsList.Count == 0)
						{
							if (!ExternalLoadBindings.TryGetValue(this, out var value))
							{
								value = (ExternalLoadBindings[this] = new List<ExternalEventBind>());
							}
							value.Add(new ExternalEventBind(text, gameObject2, type));
							continue;
						}
						gameObject = gameObject2;
					}
					IPart part2 = gameObject.GetPart(type);
					if (part2 == null)
					{
						MetricsManager.LogError(DebugName + "." + text + ": Bad event bind from part '" + type?.FullName + "'.");
					}
					else
					{
						list2.Add(part2);
					}
				}
			}
		}
		if (PartsList != null)
		{
			int num8 = 0;
			for (int count = PartsList.Count; num8 < count; num8++)
			{
				PartsList[num8].ObjectLoaded();
			}
		}
		ResetNameCache();
	}

	public void FinalizeRead(SerializationReader Reader)
	{
		if (ExternalLoadBindings.TryGetValue(this, out var value))
		{
			int i = 0;
			for (int count = value.Count; i < count; i++)
			{
				ExternalEventBind externalEventBind = value[i];
				IPart part = externalEventBind.Object.GetPart(externalEventBind.Type);
				if (part == null)
				{
					MetricsManager.LogError(DebugName + "." + externalEventBind.Event + ": Bad event bind from " + externalEventBind.Object.DebugName + ", part '" + externalEventBind.Type?.FullName + "'.");
				}
				else
				{
					if (!RegisteredPartEvents.TryGetValue(externalEventBind.Event, out var value2))
					{
						value2 = (RegisteredPartEvents[externalEventBind.Event] = new List<IPart>());
					}
					value2.Add(part);
				}
			}
		}
		_Effects?.FinalizeRead(this, Reader);
		PartsList.FinalizeRead(this, Reader);
		Flags &= -33;
	}
}
